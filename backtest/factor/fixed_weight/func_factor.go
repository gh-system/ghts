package ftfw

import dpd "github.com/ghts/ghts/lib/daily_price_data"

func f최근_급등(일일_가격정보_모음 *dpd.S종목별_일일_가격정보_모음) (최근_급등_여부 bool, 최근_급등일 uint32) {
	if 일일_가격정보_모음 == nil {
		return false, 0
	}

	for i := 1; i < 63; i++ {
		if len(일일_가격정보_모음.M저장소) < i+3 {
			break
		}

		_1일전_종가 := 일일_가격정보_모음.M저장소[len(일일_가격정보_모음.M저장소)-i].M종가
		_3일전_종가 := 일일_가격정보_모음.M저장소[len(일일_가격정보_모음.M저장소)-i-3].M종가

		if f급등(_1일전_종가, _1일전_종가, _3일전_종가) {
			return true, 일일_가격정보_모음.M저장소[len(일일_가격정보_모음.M저장소)-i].M일자
		}
	}

	return false, 0
}

func f급등(기준가, 전일_종가, 삼일전_종가 float64) bool {
	_1일_수익율 := (기준가 - 전일_종가) / 전일_종가
	_3일_수익율 := (기준가 - 삼일전_종가) / 삼일전_종가

	return _1일_수익율 > 0.2 || _3일_수익율 > 0.25
}

func f최근_급락(일일_가격정보_모음 *dpd.S종목별_일일_가격정보_모음) (최근_급락_여부 bool, 최근_급락일 uint32) {
	if 일일_가격정보_모음 == nil {
		return false, 0
	}

	for i := 1; i < 63; i++ {
		if len(일일_가격정보_모음.M저장소) < i+3 {
			break
		}

		_1일전_종가 := 일일_가격정보_모음.M저장소[len(일일_가격정보_모음.M저장소)-i].M종가
		_3일전_종가 := 일일_가격정보_모음.M저장소[len(일일_가격정보_모음.M저장소)-i-3].M종가

		if f급락(_1일전_종가, _1일전_종가, _3일전_종가) {
			return true, 일일_가격정보_모음.M저장소[len(일일_가격정보_모음.M저장소)-i].M일자
		}
	}

	return false, 0
}

func f급락(기준가, 전일_종가, 삼일전_종가 float64) bool {
	_1일_수익율 := (기준가 - 전일_종가) / 전일_종가
	_3일_수익율 := (기준가 - 삼일전_종가) / 삼일전_종가

	return _1일_수익율 < -0.1 || _3일_수익율 < -0.15
}
