package lib

import (
	"strings"
	"testing"
)

func TestS모의_테스트(t *testing.T) {
	t.Parallel()

	모의_테스트_인터페이스 := *(new(interface{}))
	모의_테스트_인터페이스 = new(S모의_테스트)

	_, ok := 모의_테스트_인터페이스.(testing.TB)
	F테스트_참임(t, ok)

	_, ok = 모의_테스트_인터페이스.(I모의_테스트)
	F테스트_참임(t, ok)

	모의_테스트 := new(S모의_테스트)

	모의_테스트.S모의_테스트_리셋()
	F테스트_거짓임(t, 모의_테스트.Failed())

	모의_테스트.S모의_테스트_리셋()
	모의_테스트.S값(false)
	F테스트_참임(t, 모의_테스트.Failed())

	모의_테스트.S모의_테스트_리셋()
	F테스트_거짓임(t, 모의_테스트.Failed())

	모의_테스트.S모의_테스트_리셋()
	모의_테스트.Error()
	F테스트_참임(t, 모의_테스트.Failed())

	모의_테스트.S모의_테스트_리셋()
	모의_테스트.Errorf("")
	F테스트_참임(t, 모의_테스트.Failed())

	모의_테스트.S모의_테스트_리셋()
	모의_테스트.Fail()
	F테스트_참임(t, 모의_테스트.Failed())

	모의_테스트.S모의_테스트_리셋()
	모의_테스트.FailNow()
	F테스트_참임(t, 모의_테스트.Failed())

	모의_테스트.S모의_테스트_리셋()
	모의_테스트.Fatal()
	F테스트_참임(t, 모의_테스트.Failed())

	모의_테스트.S모의_테스트_리셋()
	모의_테스트.Fatalf("")
	F테스트_참임(t, 모의_테스트.Failed())
}

func TestS예외처리(t *testing.T) {
	문자열, 에러 := f패닉_처리_테스트_도우미()
	F테스트_에러발생(t, 에러)
	F테스트_참임(t, strings.Contains(에러.Error(), "패닉 발생"))
	F테스트_같음(t, 문자열, "바뀐값")
}

func f패닉_처리_테스트_도우미() (패닉_발생시_변경될_변수 string, 에러 error) {
	패닉_발생시_변경될_변수 = "원래값"
	defer S예외처리{
		M에러:    &에러,
		M출력_숨김: true,
		M함수:    func() { 패닉_발생시_변경될_변수 = "바뀐값" }}.S실행()

	panic("패닉 발생")
}
