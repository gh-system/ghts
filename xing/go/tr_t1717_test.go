package xing

import (
	"github.com/ghts/ghts/lib"
	xt "github.com/ghts/ghts/xing/base"
	"testing"
	"time"
)

func TestT1717_종목별_매매주체_동향(t *testing.T) {
	t.Parallel()

	const 종목코드 = "005930" // 삼성전자
	var 이전_일자 time.Time

	종료일 := F당일()
	시작일 := 종료일.AddDate(0, 0, -40)

	값_모음, 에러 := TrT1717_종목별_매매주체_동향(종목코드, xt.P일별_순매수_T1717, 시작일, 종료일)
	lib.F테스트_에러없음(t, 에러)
	lib.F테스트_참임(t, len(값_모음) > 20 && len(값_모음) <= 40, len(값_모음))

	for i, 값 := range 값_모음 {
		// 개장 전 마지막 값에서 에러가 발생하는 경우가 있음.
		if i == len(값_모음)-1 {
			break
		}

		lib.F테스트_참임(t, 값.M일자.After(이전_일자) || 값.M일자.Equal(이전_일자))
		lib.F테스트_참임(t, 값.M일자.Equal(시작일) || 값.M일자.After(시작일), 값.M일자, 시작일)
		이전_일자 = 값.M일자

		lib.F테스트_같음(t, 값.M종목코드, 종목코드)
		lib.F테스트_참임(t, 값.M종가 > 0)
		lib.F테스트_참임(t, 값.M거래량 > 0)
		// 순매수량은 +/- 모두 가능하므로 테스트 하기 어렵다.
		lib.F테스트_참임(t, 값.M사모펀드_순매수량 == 0 || 값.M사모펀드_단가 > 0)
		lib.F테스트_참임(t, 값.M증권_순매수량 == 0 || 값.M증권_단가 > 0)
		lib.F테스트_참임(t, 값.M보험_순매수량 == 0 || 값.M보험_단가 > 0)
		lib.F테스트_참임(t, 값.M투신_순매수량 == 0 || 값.M투신_단가 > 0)
		lib.F테스트_참임(t, 값.M은행_순매수량 == 0 || 값.M은행_단가 > 0)
		lib.F테스트_참임(t, 값.M종금_순매수량 == 0 || 값.M종금_단가 > 0)
		lib.F테스트_참임(t, 값.M기금_순매수량 == 0 || 값.M기금_단가 > 0)
		lib.F테스트_참임(t, 값.M기타법인_순매수량 == 0 || 값.M기타법인_단가 > 0)
		lib.F테스트_참임(t, 값.M개인_순매수량 == 0 || 값.M개인_단가 > 0)
		lib.F테스트_참임(t, 값.M등록_외국인_순매수량 == 0 || 값.M등록_외국인_단가 > 0)
		lib.F테스트_참임(t, 값.M미등록_외국인_순매수량 == 0 || 값.M미등록_외국인_단가 > 0)
		lib.F테스트_참임(t, 값.M국가외_순매수량 == 0 || 값.M국가외_단가 > 0)
		lib.F테스트_참임(t, 값.M기관_순매수량 == 0 || 값.M기관_단가 > 0)
		lib.F테스트_참임(t, 값.M외인계_순매수량 == 0 || 값.M외인계_단가 > 0)
		lib.F테스트_참임(t, 값.M기타계_순매수량 == 0 || 값.M기타계_단가 > 0)
	}
}
