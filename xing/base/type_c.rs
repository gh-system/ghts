/* automatically generated by rust-bindgen 0.60.1 */

# [repr (C , packed)] # [derive (Debug , Copy , Clone)] pub struct TR_DATA { pub RequestID : :: std :: os :: raw :: c_int , pub DataLength : :: std :: os :: raw :: c_int , pub TotalDataBufferSize : :: std :: os :: raw :: c_int , pub ElapsedTime : :: std :: os :: raw :: c_int , pub DataMode : :: std :: os :: raw :: c_int , pub TrCode : [:: std :: os :: raw :: c_char ; 10usize] , pub _TrCode : [:: std :: os :: raw :: c_char ; 1usize] , pub Cont : [:: std :: os :: raw :: c_char ; 1usize] , pub ContKey : [:: std :: os :: raw :: c_char ; 18usize] , pub _ContKey : [:: std :: os :: raw :: c_char ; 1usize] , pub None : [:: std :: os :: raw :: c_char ; 31usize] , pub BlockName : [:: std :: os :: raw :: c_char ; 16usize] , pub _BlockName : [:: std :: os :: raw :: c_char ; 1usize] , pub Data : * mut :: std :: os :: raw :: c_uchar , } # [test] fn bindgen_test_layout_TR_DATA () { assert_eq ! (:: std :: mem :: size_of :: < TR_DATA > () , 107usize , concat ! ("Size of: " , stringify ! (TR_DATA))) ; assert_eq ! (:: std :: mem :: align_of :: < TR_DATA > () , 1usize , concat ! ("Alignment of " , stringify ! (TR_DATA))) ; fn test_field_RequestID () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < TR_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RequestID) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (TR_DATA) , "::" , stringify ! (RequestID))) ; } test_field_RequestID () ; fn test_field_DataLength () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < TR_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . DataLength) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (TR_DATA) , "::" , stringify ! (DataLength))) ; } test_field_DataLength () ; fn test_field_TotalDataBufferSize () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < TR_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . TotalDataBufferSize) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (TR_DATA) , "::" , stringify ! (TotalDataBufferSize))) ; } test_field_TotalDataBufferSize () ; fn test_field_ElapsedTime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < TR_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ElapsedTime) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (TR_DATA) , "::" , stringify ! (ElapsedTime))) ; } test_field_ElapsedTime () ; fn test_field_DataMode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < TR_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . DataMode) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (TR_DATA) , "::" , stringify ! (DataMode))) ; } test_field_DataMode () ; fn test_field_TrCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < TR_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . TrCode) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (TR_DATA) , "::" , stringify ! (TrCode))) ; } test_field_TrCode () ; fn test_field__TrCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < TR_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _TrCode) as usize - ptr as usize } , 30usize , concat ! ("Offset of field: " , stringify ! (TR_DATA) , "::" , stringify ! (_TrCode))) ; } test_field__TrCode () ; fn test_field_Cont () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < TR_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Cont) as usize - ptr as usize } , 31usize , concat ! ("Offset of field: " , stringify ! (TR_DATA) , "::" , stringify ! (Cont))) ; } test_field_Cont () ; fn test_field_ContKey () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < TR_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ContKey) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (TR_DATA) , "::" , stringify ! (ContKey))) ; } test_field_ContKey () ; fn test_field__ContKey () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < TR_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ContKey) as usize - ptr as usize } , 50usize , concat ! ("Offset of field: " , stringify ! (TR_DATA) , "::" , stringify ! (_ContKey))) ; } test_field__ContKey () ; fn test_field_None () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < TR_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . None) as usize - ptr as usize } , 51usize , concat ! ("Offset of field: " , stringify ! (TR_DATA) , "::" , stringify ! (None))) ; } test_field_None () ; fn test_field_BlockName () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < TR_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BlockName) as usize - ptr as usize } , 82usize , concat ! ("Offset of field: " , stringify ! (TR_DATA) , "::" , stringify ! (BlockName))) ; } test_field_BlockName () ; fn test_field__BlockName () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < TR_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _BlockName) as usize - ptr as usize } , 98usize , concat ! ("Offset of field: " , stringify ! (TR_DATA) , "::" , stringify ! (_BlockName))) ; } test_field__BlockName () ; fn test_field_Data () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < TR_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Data) as usize - ptr as usize } , 99usize , concat ! ("Offset of field: " , stringify ! (TR_DATA) , "::" , stringify ! (Data))) ; } test_field_Data () ; } # [repr (C , packed)] # [derive (Debug , Copy , Clone)] pub struct REALTIME_DATA { pub TrCode : [:: std :: os :: raw :: c_char ; 3usize] , pub _TrCode : [:: std :: os :: raw :: c_char ; 1usize] , pub KeyLength : :: std :: os :: raw :: c_int , pub KeyData : [:: std :: os :: raw :: c_char ; 32usize] , pub _KeyData : [:: std :: os :: raw :: c_char ; 1usize] , pub RegKey : [:: std :: os :: raw :: c_char ; 32usize] , pub _RegKey : [:: std :: os :: raw :: c_char ; 1usize] , pub DataLength : :: std :: os :: raw :: c_int , pub Data : * mut :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_REALTIME_DATA () { assert_eq ! (:: std :: mem :: size_of :: < REALTIME_DATA > () , 86usize , concat ! ("Size of: " , stringify ! (REALTIME_DATA))) ; assert_eq ! (:: std :: mem :: align_of :: < REALTIME_DATA > () , 1usize , concat ! ("Alignment of " , stringify ! (REALTIME_DATA))) ; fn test_field_TrCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < REALTIME_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . TrCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (REALTIME_DATA) , "::" , stringify ! (TrCode))) ; } test_field_TrCode () ; fn test_field__TrCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < REALTIME_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _TrCode) as usize - ptr as usize } , 3usize , concat ! ("Offset of field: " , stringify ! (REALTIME_DATA) , "::" , stringify ! (_TrCode))) ; } test_field__TrCode () ; fn test_field_KeyLength () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < REALTIME_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . KeyLength) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (REALTIME_DATA) , "::" , stringify ! (KeyLength))) ; } test_field_KeyLength () ; fn test_field_KeyData () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < REALTIME_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . KeyData) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (REALTIME_DATA) , "::" , stringify ! (KeyData))) ; } test_field_KeyData () ; fn test_field__KeyData () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < REALTIME_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _KeyData) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (REALTIME_DATA) , "::" , stringify ! (_KeyData))) ; } test_field__KeyData () ; fn test_field_RegKey () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < REALTIME_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RegKey) as usize - ptr as usize } , 41usize , concat ! ("Offset of field: " , stringify ! (REALTIME_DATA) , "::" , stringify ! (RegKey))) ; } test_field_RegKey () ; fn test_field__RegKey () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < REALTIME_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _RegKey) as usize - ptr as usize } , 73usize , concat ! ("Offset of field: " , stringify ! (REALTIME_DATA) , "::" , stringify ! (_RegKey))) ; } test_field__RegKey () ; fn test_field_DataLength () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < REALTIME_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . DataLength) as usize - ptr as usize } , 74usize , concat ! ("Offset of field: " , stringify ! (REALTIME_DATA) , "::" , stringify ! (DataLength))) ; } test_field_DataLength () ; fn test_field_Data () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < REALTIME_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Data) as usize - ptr as usize } , 78usize , concat ! ("Offset of field: " , stringify ! (REALTIME_DATA) , "::" , stringify ! (Data))) ; } test_field_Data () ; } # [repr (C , packed)] # [derive (Debug , Copy , Clone)] pub struct MSG_DATA { pub RequestID : :: std :: os :: raw :: c_int , pub SystemError : :: std :: os :: raw :: c_int , pub MsgCode : [:: std :: os :: raw :: c_char ; 5usize] , pub _MsgCode : [:: std :: os :: raw :: c_char ; 1usize] , pub MsgLength : :: std :: os :: raw :: c_int , pub MsgData : * mut :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_MSG_DATA () { assert_eq ! (:: std :: mem :: size_of :: < MSG_DATA > () , 26usize , concat ! ("Size of: " , stringify ! (MSG_DATA))) ; assert_eq ! (:: std :: mem :: align_of :: < MSG_DATA > () , 1usize , concat ! ("Alignment of " , stringify ! (MSG_DATA))) ; fn test_field_RequestID () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < MSG_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RequestID) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (MSG_DATA) , "::" , stringify ! (RequestID))) ; } test_field_RequestID () ; fn test_field_SystemError () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < MSG_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . SystemError) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (MSG_DATA) , "::" , stringify ! (SystemError))) ; } test_field_SystemError () ; fn test_field_MsgCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < MSG_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MsgCode) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (MSG_DATA) , "::" , stringify ! (MsgCode))) ; } test_field_MsgCode () ; fn test_field__MsgCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < MSG_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _MsgCode) as usize - ptr as usize } , 13usize , concat ! ("Offset of field: " , stringify ! (MSG_DATA) , "::" , stringify ! (_MsgCode))) ; } test_field__MsgCode () ; fn test_field_MsgLength () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < MSG_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MsgLength) as usize - ptr as usize } , 14usize , concat ! ("Offset of field: " , stringify ! (MSG_DATA) , "::" , stringify ! (MsgLength))) ; } test_field_MsgLength () ; fn test_field_MsgData () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < MSG_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MsgData) as usize - ptr as usize } , 18usize , concat ! ("Offset of field: " , stringify ! (MSG_DATA) , "::" , stringify ! (MsgData))) ; } test_field_MsgData () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct LINK_DATA { pub LinkName : [:: std :: os :: raw :: c_char ; 32usize] , pub LinkData : [:: std :: os :: raw :: c_char ; 32usize] , pub None : [:: std :: os :: raw :: c_char ; 64usize] , } # [test] fn bindgen_test_layout_LINK_DATA () { assert_eq ! (:: std :: mem :: size_of :: < LINK_DATA > () , 128usize , concat ! ("Size of: " , stringify ! (LINK_DATA))) ; assert_eq ! (:: std :: mem :: align_of :: < LINK_DATA > () , 1usize , concat ! ("Alignment of " , stringify ! (LINK_DATA))) ; fn test_field_LinkName () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < LINK_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . LinkName) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (LINK_DATA) , "::" , stringify ! (LinkName))) ; } test_field_LinkName () ; fn test_field_LinkData () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < LINK_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . LinkData) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (LINK_DATA) , "::" , stringify ! (LinkData))) ; } test_field_LinkData () ; fn test_field_None () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < LINK_DATA > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . None) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (LINK_DATA) , "::" , stringify ! (None))) ; } test_field_None () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CSPAT00600InBlock1 { pub acntNo : [:: std :: os :: raw :: c_char ; 20usize] , pub inptPwd : [:: std :: os :: raw :: c_char ; 8usize] , pub isuNo : [:: std :: os :: raw :: c_char ; 12usize] , pub ordQty : [:: std :: os :: raw :: c_char ; 16usize] , pub ordPrc : [:: std :: os :: raw :: c_char ; 13usize] , pub bnsTpCode : [:: std :: os :: raw :: c_char ; 1usize] , pub ordprcPtnCode : [:: std :: os :: raw :: c_char ; 2usize] , pub mgntrnCode : [:: std :: os :: raw :: c_char ; 3usize] , pub loanDt : [:: std :: os :: raw :: c_char ; 8usize] , pub ordCndiTpCode : [:: std :: os :: raw :: c_char ; 1usize] , } # [test] fn bindgen_test_layout_CSPAT00600InBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < CSPAT00600InBlock1 > () , 84usize , concat ! ("Size of: " , stringify ! (CSPAT00600InBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < CSPAT00600InBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (CSPAT00600InBlock1))) ; fn test_field_acntNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . acntNo) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600InBlock1) , "::" , stringify ! (acntNo))) ; } test_field_acntNo () ; fn test_field_inptPwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . inptPwd) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600InBlock1) , "::" , stringify ! (inptPwd))) ; } test_field_inptPwd () ; fn test_field_isuNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . isuNo) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600InBlock1) , "::" , stringify ! (isuNo))) ; } test_field_isuNo () ; fn test_field_ordQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordQty) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600InBlock1) , "::" , stringify ! (ordQty))) ; } test_field_ordQty () ; fn test_field_ordPrc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordPrc) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600InBlock1) , "::" , stringify ! (ordPrc))) ; } test_field_ordPrc () ; fn test_field_bnsTpCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bnsTpCode) as usize - ptr as usize } , 69usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600InBlock1) , "::" , stringify ! (bnsTpCode))) ; } test_field_bnsTpCode () ; fn test_field_ordprcPtnCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordprcPtnCode) as usize - ptr as usize } , 70usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600InBlock1) , "::" , stringify ! (ordprcPtnCode))) ; } test_field_ordprcPtnCode () ; fn test_field_mgntrnCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mgntrnCode) as usize - ptr as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600InBlock1) , "::" , stringify ! (mgntrnCode))) ; } test_field_mgntrnCode () ; fn test_field_loanDt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . loanDt) as usize - ptr as usize } , 75usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600InBlock1) , "::" , stringify ! (loanDt))) ; } test_field_loanDt () ; fn test_field_ordCndiTpCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordCndiTpCode) as usize - ptr as usize } , 83usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600InBlock1) , "::" , stringify ! (ordCndiTpCode))) ; } test_field_ordCndiTpCode () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CSPAT00600OutBlock1 { pub recCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub acntNo : [:: std :: os :: raw :: c_char ; 20usize] , pub inptPwd : [:: std :: os :: raw :: c_char ; 8usize] , pub isuNo : [:: std :: os :: raw :: c_char ; 12usize] , pub ordQty : [:: std :: os :: raw :: c_char ; 16usize] , pub ordPrc : [:: std :: os :: raw :: c_char ; 13usize] , pub bnsTpCode : [:: std :: os :: raw :: c_char ; 1usize] , pub ordprcPtnCode : [:: std :: os :: raw :: c_char ; 2usize] , pub prgmOrdprcPtnCode : [:: std :: os :: raw :: c_char ; 2usize] , pub stslAbleYn : [:: std :: os :: raw :: c_char ; 1usize] , pub stslOrdprcTpCode : [:: std :: os :: raw :: c_char ; 1usize] , pub commdaCode : [:: std :: os :: raw :: c_char ; 2usize] , pub mgntrnCode : [:: std :: os :: raw :: c_char ; 3usize] , pub loanDt : [:: std :: os :: raw :: c_char ; 8usize] , pub mbrNo : [:: std :: os :: raw :: c_char ; 3usize] , pub ordCndiTpCode : [:: std :: os :: raw :: c_char ; 1usize] , pub strtgCode : [:: std :: os :: raw :: c_char ; 6usize] , pub grpId : [:: std :: os :: raw :: c_char ; 20usize] , pub ordSeqNo : [:: std :: os :: raw :: c_char ; 10usize] , pub ptflNo : [:: std :: os :: raw :: c_char ; 10usize] , pub bskNo : [:: std :: os :: raw :: c_char ; 10usize] , pub trchNo : [:: std :: os :: raw :: c_char ; 10usize] , pub itemNo : [:: std :: os :: raw :: c_char ; 10usize] , pub opDrtnNo : [:: std :: os :: raw :: c_char ; 12usize] , pub lpYn : [:: std :: os :: raw :: c_char ; 1usize] , pub cvrgTpCode : [:: std :: os :: raw :: c_char ; 1usize] , } # [test] fn bindgen_test_layout_CSPAT00600OutBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < CSPAT00600OutBlock1 > () , 188usize , concat ! ("Size of: " , stringify ! (CSPAT00600OutBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < CSPAT00600OutBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (CSPAT00600OutBlock1))) ; fn test_field_recCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . recCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock1) , "::" , stringify ! (recCnt))) ; } test_field_recCnt () ; fn test_field_acntNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . acntNo) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock1) , "::" , stringify ! (acntNo))) ; } test_field_acntNo () ; fn test_field_inptPwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . inptPwd) as usize - ptr as usize } , 25usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock1) , "::" , stringify ! (inptPwd))) ; } test_field_inptPwd () ; fn test_field_isuNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . isuNo) as usize - ptr as usize } , 33usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock1) , "::" , stringify ! (isuNo))) ; } test_field_isuNo () ; fn test_field_ordQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordQty) as usize - ptr as usize } , 45usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock1) , "::" , stringify ! (ordQty))) ; } test_field_ordQty () ; fn test_field_ordPrc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordPrc) as usize - ptr as usize } , 61usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock1) , "::" , stringify ! (ordPrc))) ; } test_field_ordPrc () ; fn test_field_bnsTpCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bnsTpCode) as usize - ptr as usize } , 74usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock1) , "::" , stringify ! (bnsTpCode))) ; } test_field_bnsTpCode () ; fn test_field_ordprcPtnCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordprcPtnCode) as usize - ptr as usize } , 75usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock1) , "::" , stringify ! (ordprcPtnCode))) ; } test_field_ordprcPtnCode () ; fn test_field_prgmOrdprcPtnCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prgmOrdprcPtnCode) as usize - ptr as usize } , 77usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock1) , "::" , stringify ! (prgmOrdprcPtnCode))) ; } test_field_prgmOrdprcPtnCode () ; fn test_field_stslAbleYn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . stslAbleYn) as usize - ptr as usize } , 79usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock1) , "::" , stringify ! (stslAbleYn))) ; } test_field_stslAbleYn () ; fn test_field_stslOrdprcTpCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . stslOrdprcTpCode) as usize - ptr as usize } , 80usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock1) , "::" , stringify ! (stslOrdprcTpCode))) ; } test_field_stslOrdprcTpCode () ; fn test_field_commdaCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . commdaCode) as usize - ptr as usize } , 81usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock1) , "::" , stringify ! (commdaCode))) ; } test_field_commdaCode () ; fn test_field_mgntrnCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mgntrnCode) as usize - ptr as usize } , 83usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock1) , "::" , stringify ! (mgntrnCode))) ; } test_field_mgntrnCode () ; fn test_field_loanDt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . loanDt) as usize - ptr as usize } , 86usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock1) , "::" , stringify ! (loanDt))) ; } test_field_loanDt () ; fn test_field_mbrNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mbrNo) as usize - ptr as usize } , 94usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock1) , "::" , stringify ! (mbrNo))) ; } test_field_mbrNo () ; fn test_field_ordCndiTpCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordCndiTpCode) as usize - ptr as usize } , 97usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock1) , "::" , stringify ! (ordCndiTpCode))) ; } test_field_ordCndiTpCode () ; fn test_field_strtgCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . strtgCode) as usize - ptr as usize } , 98usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock1) , "::" , stringify ! (strtgCode))) ; } test_field_strtgCode () ; fn test_field_grpId () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . grpId) as usize - ptr as usize } , 104usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock1) , "::" , stringify ! (grpId))) ; } test_field_grpId () ; fn test_field_ordSeqNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordSeqNo) as usize - ptr as usize } , 124usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock1) , "::" , stringify ! (ordSeqNo))) ; } test_field_ordSeqNo () ; fn test_field_ptflNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ptflNo) as usize - ptr as usize } , 134usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock1) , "::" , stringify ! (ptflNo))) ; } test_field_ptflNo () ; fn test_field_bskNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bskNo) as usize - ptr as usize } , 144usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock1) , "::" , stringify ! (bskNo))) ; } test_field_bskNo () ; fn test_field_trchNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . trchNo) as usize - ptr as usize } , 154usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock1) , "::" , stringify ! (trchNo))) ; } test_field_trchNo () ; fn test_field_itemNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . itemNo) as usize - ptr as usize } , 164usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock1) , "::" , stringify ! (itemNo))) ; } test_field_itemNo () ; fn test_field_opDrtnNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . opDrtnNo) as usize - ptr as usize } , 174usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock1) , "::" , stringify ! (opDrtnNo))) ; } test_field_opDrtnNo () ; fn test_field_lpYn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lpYn) as usize - ptr as usize } , 186usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock1) , "::" , stringify ! (lpYn))) ; } test_field_lpYn () ; fn test_field_cvrgTpCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cvrgTpCode) as usize - ptr as usize } , 187usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock1) , "::" , stringify ! (cvrgTpCode))) ; } test_field_cvrgTpCode () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CSPAT00600OutBlock2 { pub recCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub ordNo : [:: std :: os :: raw :: c_char ; 10usize] , pub ordTime : [:: std :: os :: raw :: c_char ; 9usize] , pub ordMktCode : [:: std :: os :: raw :: c_char ; 2usize] , pub ordPtnCode : [:: std :: os :: raw :: c_char ; 2usize] , pub shtnIsuNo : [:: std :: os :: raw :: c_char ; 9usize] , pub mgempNo : [:: std :: os :: raw :: c_char ; 9usize] , pub ordAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub spareOrdNo : [:: std :: os :: raw :: c_char ; 10usize] , pub cvrgSeqno : [:: std :: os :: raw :: c_char ; 10usize] , pub rsvOrdNo : [:: std :: os :: raw :: c_char ; 10usize] , pub spotOrdQty : [:: std :: os :: raw :: c_char ; 16usize] , pub ruseOrdQty : [:: std :: os :: raw :: c_char ; 16usize] , pub mnyOrdAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub substOrdAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub ruseOrdAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub acntNm : [:: std :: os :: raw :: c_char ; 40usize] , pub isuNm : [:: std :: os :: raw :: c_char ; 40usize] , } # [test] fn bindgen_test_layout_CSPAT00600OutBlock2 () { assert_eq ! (:: std :: mem :: size_of :: < CSPAT00600OutBlock2 > () , 252usize , concat ! ("Size of: " , stringify ! (CSPAT00600OutBlock2))) ; assert_eq ! (:: std :: mem :: align_of :: < CSPAT00600OutBlock2 > () , 1usize , concat ! ("Alignment of " , stringify ! (CSPAT00600OutBlock2))) ; fn test_field_recCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . recCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock2) , "::" , stringify ! (recCnt))) ; } test_field_recCnt () ; fn test_field_ordNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordNo) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock2) , "::" , stringify ! (ordNo))) ; } test_field_ordNo () ; fn test_field_ordTime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordTime) as usize - ptr as usize } , 15usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock2) , "::" , stringify ! (ordTime))) ; } test_field_ordTime () ; fn test_field_ordMktCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordMktCode) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock2) , "::" , stringify ! (ordMktCode))) ; } test_field_ordMktCode () ; fn test_field_ordPtnCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordPtnCode) as usize - ptr as usize } , 26usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock2) , "::" , stringify ! (ordPtnCode))) ; } test_field_ordPtnCode () ; fn test_field_shtnIsuNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shtnIsuNo) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock2) , "::" , stringify ! (shtnIsuNo))) ; } test_field_shtnIsuNo () ; fn test_field_mgempNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mgempNo) as usize - ptr as usize } , 37usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock2) , "::" , stringify ! (mgempNo))) ; } test_field_mgempNo () ; fn test_field_ordAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordAmt) as usize - ptr as usize } , 46usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock2) , "::" , stringify ! (ordAmt))) ; } test_field_ordAmt () ; fn test_field_spareOrdNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . spareOrdNo) as usize - ptr as usize } , 62usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock2) , "::" , stringify ! (spareOrdNo))) ; } test_field_spareOrdNo () ; fn test_field_cvrgSeqno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cvrgSeqno) as usize - ptr as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock2) , "::" , stringify ! (cvrgSeqno))) ; } test_field_cvrgSeqno () ; fn test_field_rsvOrdNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . rsvOrdNo) as usize - ptr as usize } , 82usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock2) , "::" , stringify ! (rsvOrdNo))) ; } test_field_rsvOrdNo () ; fn test_field_spotOrdQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . spotOrdQty) as usize - ptr as usize } , 92usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock2) , "::" , stringify ! (spotOrdQty))) ; } test_field_spotOrdQty () ; fn test_field_ruseOrdQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ruseOrdQty) as usize - ptr as usize } , 108usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock2) , "::" , stringify ! (ruseOrdQty))) ; } test_field_ruseOrdQty () ; fn test_field_mnyOrdAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mnyOrdAmt) as usize - ptr as usize } , 124usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock2) , "::" , stringify ! (mnyOrdAmt))) ; } test_field_mnyOrdAmt () ; fn test_field_substOrdAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . substOrdAmt) as usize - ptr as usize } , 140usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock2) , "::" , stringify ! (substOrdAmt))) ; } test_field_substOrdAmt () ; fn test_field_ruseOrdAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ruseOrdAmt) as usize - ptr as usize } , 156usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock2) , "::" , stringify ! (ruseOrdAmt))) ; } test_field_ruseOrdAmt () ; fn test_field_acntNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . acntNm) as usize - ptr as usize } , 172usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock2) , "::" , stringify ! (acntNm))) ; } test_field_acntNm () ; fn test_field_isuNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . isuNm) as usize - ptr as usize } , 212usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock2) , "::" , stringify ! (isuNm))) ; } test_field_isuNm () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CSPAT00600OutBlock { pub outBlock1 : CSPAT00600OutBlock1 , pub outBlock2 : CSPAT00600OutBlock2 , } # [test] fn bindgen_test_layout_CSPAT00600OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < CSPAT00600OutBlock > () , 440usize , concat ! ("Size of: " , stringify ! (CSPAT00600OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < CSPAT00600OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (CSPAT00600OutBlock))) ; fn test_field_outBlock1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . outBlock1) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock) , "::" , stringify ! (outBlock1))) ; } test_field_outBlock1 () ; fn test_field_outBlock2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00600OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . outBlock2) as usize - ptr as usize } , 188usize , concat ! ("Offset of field: " , stringify ! (CSPAT00600OutBlock) , "::" , stringify ! (outBlock2))) ; } test_field_outBlock2 () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CSPAT00700InBlock1 { pub orgOrdNo : [:: std :: os :: raw :: c_char ; 10usize] , pub acntNo : [:: std :: os :: raw :: c_char ; 20usize] , pub inptPwd : [:: std :: os :: raw :: c_char ; 8usize] , pub isuNo : [:: std :: os :: raw :: c_char ; 12usize] , pub ordQty : [:: std :: os :: raw :: c_char ; 16usize] , pub ordprcPtnCode : [:: std :: os :: raw :: c_char ; 2usize] , pub ordCndiTpCode : [:: std :: os :: raw :: c_char ; 1usize] , pub ordPrc : [:: std :: os :: raw :: c_char ; 13usize] , } # [test] fn bindgen_test_layout_CSPAT00700InBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < CSPAT00700InBlock1 > () , 82usize , concat ! ("Size of: " , stringify ! (CSPAT00700InBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < CSPAT00700InBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (CSPAT00700InBlock1))) ; fn test_field_orgOrdNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . orgOrdNo) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700InBlock1) , "::" , stringify ! (orgOrdNo))) ; } test_field_orgOrdNo () ; fn test_field_acntNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . acntNo) as usize - ptr as usize } , 10usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700InBlock1) , "::" , stringify ! (acntNo))) ; } test_field_acntNo () ; fn test_field_inptPwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . inptPwd) as usize - ptr as usize } , 30usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700InBlock1) , "::" , stringify ! (inptPwd))) ; } test_field_inptPwd () ; fn test_field_isuNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . isuNo) as usize - ptr as usize } , 38usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700InBlock1) , "::" , stringify ! (isuNo))) ; } test_field_isuNo () ; fn test_field_ordQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordQty) as usize - ptr as usize } , 50usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700InBlock1) , "::" , stringify ! (ordQty))) ; } test_field_ordQty () ; fn test_field_ordprcPtnCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordprcPtnCode) as usize - ptr as usize } , 66usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700InBlock1) , "::" , stringify ! (ordprcPtnCode))) ; } test_field_ordprcPtnCode () ; fn test_field_ordCndiTpCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordCndiTpCode) as usize - ptr as usize } , 68usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700InBlock1) , "::" , stringify ! (ordCndiTpCode))) ; } test_field_ordCndiTpCode () ; fn test_field_ordPrc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordPrc) as usize - ptr as usize } , 69usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700InBlock1) , "::" , stringify ! (ordPrc))) ; } test_field_ordPrc () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CSPAT00700OutBlock1 { pub recCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub orgOrdNo : [:: std :: os :: raw :: c_char ; 10usize] , pub acntNo : [:: std :: os :: raw :: c_char ; 20usize] , pub inptPwd : [:: std :: os :: raw :: c_char ; 8usize] , pub isuNo : [:: std :: os :: raw :: c_char ; 12usize] , pub ordQty : [:: std :: os :: raw :: c_char ; 16usize] , pub ordprcPtnCode : [:: std :: os :: raw :: c_char ; 2usize] , pub ordCndiTpCode : [:: std :: os :: raw :: c_char ; 1usize] , pub ordPrc : [:: std :: os :: raw :: c_char ; 13usize] , pub commdaCode : [:: std :: os :: raw :: c_char ; 2usize] , pub strtgCode : [:: std :: os :: raw :: c_char ; 6usize] , pub grpId : [:: std :: os :: raw :: c_char ; 20usize] , pub ordSeqNo : [:: std :: os :: raw :: c_char ; 10usize] , pub ptflNo : [:: std :: os :: raw :: c_char ; 10usize] , pub bskNo : [:: std :: os :: raw :: c_char ; 10usize] , pub trchNo : [:: std :: os :: raw :: c_char ; 10usize] , pub itemNo : [:: std :: os :: raw :: c_char ; 10usize] , } # [test] fn bindgen_test_layout_CSPAT00700OutBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < CSPAT00700OutBlock1 > () , 165usize , concat ! ("Size of: " , stringify ! (CSPAT00700OutBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < CSPAT00700OutBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (CSPAT00700OutBlock1))) ; fn test_field_recCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . recCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock1) , "::" , stringify ! (recCnt))) ; } test_field_recCnt () ; fn test_field_orgOrdNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . orgOrdNo) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock1) , "::" , stringify ! (orgOrdNo))) ; } test_field_orgOrdNo () ; fn test_field_acntNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . acntNo) as usize - ptr as usize } , 15usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock1) , "::" , stringify ! (acntNo))) ; } test_field_acntNo () ; fn test_field_inptPwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . inptPwd) as usize - ptr as usize } , 35usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock1) , "::" , stringify ! (inptPwd))) ; } test_field_inptPwd () ; fn test_field_isuNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . isuNo) as usize - ptr as usize } , 43usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock1) , "::" , stringify ! (isuNo))) ; } test_field_isuNo () ; fn test_field_ordQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordQty) as usize - ptr as usize } , 55usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock1) , "::" , stringify ! (ordQty))) ; } test_field_ordQty () ; fn test_field_ordprcPtnCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordprcPtnCode) as usize - ptr as usize } , 71usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock1) , "::" , stringify ! (ordprcPtnCode))) ; } test_field_ordprcPtnCode () ; fn test_field_ordCndiTpCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordCndiTpCode) as usize - ptr as usize } , 73usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock1) , "::" , stringify ! (ordCndiTpCode))) ; } test_field_ordCndiTpCode () ; fn test_field_ordPrc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordPrc) as usize - ptr as usize } , 74usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock1) , "::" , stringify ! (ordPrc))) ; } test_field_ordPrc () ; fn test_field_commdaCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . commdaCode) as usize - ptr as usize } , 87usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock1) , "::" , stringify ! (commdaCode))) ; } test_field_commdaCode () ; fn test_field_strtgCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . strtgCode) as usize - ptr as usize } , 89usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock1) , "::" , stringify ! (strtgCode))) ; } test_field_strtgCode () ; fn test_field_grpId () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . grpId) as usize - ptr as usize } , 95usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock1) , "::" , stringify ! (grpId))) ; } test_field_grpId () ; fn test_field_ordSeqNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordSeqNo) as usize - ptr as usize } , 115usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock1) , "::" , stringify ! (ordSeqNo))) ; } test_field_ordSeqNo () ; fn test_field_ptflNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ptflNo) as usize - ptr as usize } , 125usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock1) , "::" , stringify ! (ptflNo))) ; } test_field_ptflNo () ; fn test_field_bskNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bskNo) as usize - ptr as usize } , 135usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock1) , "::" , stringify ! (bskNo))) ; } test_field_bskNo () ; fn test_field_trchNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . trchNo) as usize - ptr as usize } , 145usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock1) , "::" , stringify ! (trchNo))) ; } test_field_trchNo () ; fn test_field_itemNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . itemNo) as usize - ptr as usize } , 155usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock1) , "::" , stringify ! (itemNo))) ; } test_field_itemNo () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CSPAT00700OutBlock2 { pub recCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub ordNo : [:: std :: os :: raw :: c_char ; 10usize] , pub prntOrdNo : [:: std :: os :: raw :: c_char ; 10usize] , pub ordTime : [:: std :: os :: raw :: c_char ; 9usize] , pub ordMktCode : [:: std :: os :: raw :: c_char ; 2usize] , pub ordPtnCode : [:: std :: os :: raw :: c_char ; 2usize] , pub shtnIsuNo : [:: std :: os :: raw :: c_char ; 9usize] , pub prgmOrdprcPtnCode : [:: std :: os :: raw :: c_char ; 2usize] , pub stslOrdprcTpCode : [:: std :: os :: raw :: c_char ; 1usize] , pub stslAbleYn : [:: std :: os :: raw :: c_char ; 1usize] , pub mgntrnCode : [:: std :: os :: raw :: c_char ; 3usize] , pub loanDt : [:: std :: os :: raw :: c_char ; 8usize] , pub cvrgOrdTp : [:: std :: os :: raw :: c_char ; 1usize] , pub lpYn : [:: std :: os :: raw :: c_char ; 1usize] , pub mgempNo : [:: std :: os :: raw :: c_char ; 9usize] , pub ordAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub bnsTpCode : [:: std :: os :: raw :: c_char ; 1usize] , pub spareOrdNo : [:: std :: os :: raw :: c_char ; 10usize] , pub cvrgSeqno : [:: std :: os :: raw :: c_char ; 10usize] , pub rsvOrdNo : [:: std :: os :: raw :: c_char ; 10usize] , pub mnyOrdAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub substOrdAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub ruseOrdAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub acntNm : [:: std :: os :: raw :: c_char ; 40usize] , pub isuNm : [:: std :: os :: raw :: c_char ; 40usize] , } # [test] fn bindgen_test_layout_CSPAT00700OutBlock2 () { assert_eq ! (:: std :: mem :: size_of :: < CSPAT00700OutBlock2 > () , 248usize , concat ! ("Size of: " , stringify ! (CSPAT00700OutBlock2))) ; assert_eq ! (:: std :: mem :: align_of :: < CSPAT00700OutBlock2 > () , 1usize , concat ! ("Alignment of " , stringify ! (CSPAT00700OutBlock2))) ; fn test_field_recCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . recCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock2) , "::" , stringify ! (recCnt))) ; } test_field_recCnt () ; fn test_field_ordNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordNo) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock2) , "::" , stringify ! (ordNo))) ; } test_field_ordNo () ; fn test_field_prntOrdNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prntOrdNo) as usize - ptr as usize } , 15usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock2) , "::" , stringify ! (prntOrdNo))) ; } test_field_prntOrdNo () ; fn test_field_ordTime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordTime) as usize - ptr as usize } , 25usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock2) , "::" , stringify ! (ordTime))) ; } test_field_ordTime () ; fn test_field_ordMktCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordMktCode) as usize - ptr as usize } , 34usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock2) , "::" , stringify ! (ordMktCode))) ; } test_field_ordMktCode () ; fn test_field_ordPtnCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordPtnCode) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock2) , "::" , stringify ! (ordPtnCode))) ; } test_field_ordPtnCode () ; fn test_field_shtnIsuNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shtnIsuNo) as usize - ptr as usize } , 38usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock2) , "::" , stringify ! (shtnIsuNo))) ; } test_field_shtnIsuNo () ; fn test_field_prgmOrdprcPtnCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prgmOrdprcPtnCode) as usize - ptr as usize } , 47usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock2) , "::" , stringify ! (prgmOrdprcPtnCode))) ; } test_field_prgmOrdprcPtnCode () ; fn test_field_stslOrdprcTpCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . stslOrdprcTpCode) as usize - ptr as usize } , 49usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock2) , "::" , stringify ! (stslOrdprcTpCode))) ; } test_field_stslOrdprcTpCode () ; fn test_field_stslAbleYn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . stslAbleYn) as usize - ptr as usize } , 50usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock2) , "::" , stringify ! (stslAbleYn))) ; } test_field_stslAbleYn () ; fn test_field_mgntrnCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mgntrnCode) as usize - ptr as usize } , 51usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock2) , "::" , stringify ! (mgntrnCode))) ; } test_field_mgntrnCode () ; fn test_field_loanDt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . loanDt) as usize - ptr as usize } , 54usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock2) , "::" , stringify ! (loanDt))) ; } test_field_loanDt () ; fn test_field_cvrgOrdTp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cvrgOrdTp) as usize - ptr as usize } , 62usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock2) , "::" , stringify ! (cvrgOrdTp))) ; } test_field_cvrgOrdTp () ; fn test_field_lpYn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lpYn) as usize - ptr as usize } , 63usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock2) , "::" , stringify ! (lpYn))) ; } test_field_lpYn () ; fn test_field_mgempNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mgempNo) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock2) , "::" , stringify ! (mgempNo))) ; } test_field_mgempNo () ; fn test_field_ordAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordAmt) as usize - ptr as usize } , 73usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock2) , "::" , stringify ! (ordAmt))) ; } test_field_ordAmt () ; fn test_field_bnsTpCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bnsTpCode) as usize - ptr as usize } , 89usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock2) , "::" , stringify ! (bnsTpCode))) ; } test_field_bnsTpCode () ; fn test_field_spareOrdNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . spareOrdNo) as usize - ptr as usize } , 90usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock2) , "::" , stringify ! (spareOrdNo))) ; } test_field_spareOrdNo () ; fn test_field_cvrgSeqno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cvrgSeqno) as usize - ptr as usize } , 100usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock2) , "::" , stringify ! (cvrgSeqno))) ; } test_field_cvrgSeqno () ; fn test_field_rsvOrdNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . rsvOrdNo) as usize - ptr as usize } , 110usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock2) , "::" , stringify ! (rsvOrdNo))) ; } test_field_rsvOrdNo () ; fn test_field_mnyOrdAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mnyOrdAmt) as usize - ptr as usize } , 120usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock2) , "::" , stringify ! (mnyOrdAmt))) ; } test_field_mnyOrdAmt () ; fn test_field_substOrdAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . substOrdAmt) as usize - ptr as usize } , 136usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock2) , "::" , stringify ! (substOrdAmt))) ; } test_field_substOrdAmt () ; fn test_field_ruseOrdAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ruseOrdAmt) as usize - ptr as usize } , 152usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock2) , "::" , stringify ! (ruseOrdAmt))) ; } test_field_ruseOrdAmt () ; fn test_field_acntNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . acntNm) as usize - ptr as usize } , 168usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock2) , "::" , stringify ! (acntNm))) ; } test_field_acntNm () ; fn test_field_isuNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . isuNm) as usize - ptr as usize } , 208usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock2) , "::" , stringify ! (isuNm))) ; } test_field_isuNm () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CSPAT00700OutBlock { pub outBlock1 : CSPAT00700OutBlock1 , pub outBlock2 : CSPAT00700OutBlock2 , } # [test] fn bindgen_test_layout_CSPAT00700OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < CSPAT00700OutBlock > () , 413usize , concat ! ("Size of: " , stringify ! (CSPAT00700OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < CSPAT00700OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (CSPAT00700OutBlock))) ; fn test_field_outBlock1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . outBlock1) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock) , "::" , stringify ! (outBlock1))) ; } test_field_outBlock1 () ; fn test_field_outBlock2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00700OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . outBlock2) as usize - ptr as usize } , 165usize , concat ! ("Offset of field: " , stringify ! (CSPAT00700OutBlock) , "::" , stringify ! (outBlock2))) ; } test_field_outBlock2 () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CSPAT00800InBlock1 { pub orgOrdNo : [:: std :: os :: raw :: c_char ; 10usize] , pub acntNo : [:: std :: os :: raw :: c_char ; 20usize] , pub inptPwd : [:: std :: os :: raw :: c_char ; 8usize] , pub isuNo : [:: std :: os :: raw :: c_char ; 12usize] , pub ordQty : [:: std :: os :: raw :: c_char ; 16usize] , } # [test] fn bindgen_test_layout_CSPAT00800InBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < CSPAT00800InBlock1 > () , 66usize , concat ! ("Size of: " , stringify ! (CSPAT00800InBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < CSPAT00800InBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (CSPAT00800InBlock1))) ; fn test_field_orgOrdNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . orgOrdNo) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800InBlock1) , "::" , stringify ! (orgOrdNo))) ; } test_field_orgOrdNo () ; fn test_field_acntNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . acntNo) as usize - ptr as usize } , 10usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800InBlock1) , "::" , stringify ! (acntNo))) ; } test_field_acntNo () ; fn test_field_inptPwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . inptPwd) as usize - ptr as usize } , 30usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800InBlock1) , "::" , stringify ! (inptPwd))) ; } test_field_inptPwd () ; fn test_field_isuNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . isuNo) as usize - ptr as usize } , 38usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800InBlock1) , "::" , stringify ! (isuNo))) ; } test_field_isuNo () ; fn test_field_ordQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordQty) as usize - ptr as usize } , 50usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800InBlock1) , "::" , stringify ! (ordQty))) ; } test_field_ordQty () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CSPAT00800OutBlock1 { pub recCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub orgOrdNo : [:: std :: os :: raw :: c_char ; 10usize] , pub acntNo : [:: std :: os :: raw :: c_char ; 20usize] , pub inptPwd : [:: std :: os :: raw :: c_char ; 8usize] , pub isuNo : [:: std :: os :: raw :: c_char ; 12usize] , pub ordQty : [:: std :: os :: raw :: c_char ; 16usize] , pub commdaCode : [:: std :: os :: raw :: c_char ; 2usize] , pub grpId : [:: std :: os :: raw :: c_char ; 20usize] , pub strtgCode : [:: std :: os :: raw :: c_char ; 6usize] , pub ordSeqNo : [:: std :: os :: raw :: c_char ; 10usize] , pub ptflNo : [:: std :: os :: raw :: c_char ; 10usize] , pub bskNo : [:: std :: os :: raw :: c_char ; 10usize] , pub trchNo : [:: std :: os :: raw :: c_char ; 10usize] , pub itemNo : [:: std :: os :: raw :: c_char ; 10usize] , } # [test] fn bindgen_test_layout_CSPAT00800OutBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < CSPAT00800OutBlock1 > () , 149usize , concat ! ("Size of: " , stringify ! (CSPAT00800OutBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < CSPAT00800OutBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (CSPAT00800OutBlock1))) ; fn test_field_recCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . recCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock1) , "::" , stringify ! (recCnt))) ; } test_field_recCnt () ; fn test_field_orgOrdNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . orgOrdNo) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock1) , "::" , stringify ! (orgOrdNo))) ; } test_field_orgOrdNo () ; fn test_field_acntNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . acntNo) as usize - ptr as usize } , 15usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock1) , "::" , stringify ! (acntNo))) ; } test_field_acntNo () ; fn test_field_inptPwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . inptPwd) as usize - ptr as usize } , 35usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock1) , "::" , stringify ! (inptPwd))) ; } test_field_inptPwd () ; fn test_field_isuNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . isuNo) as usize - ptr as usize } , 43usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock1) , "::" , stringify ! (isuNo))) ; } test_field_isuNo () ; fn test_field_ordQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordQty) as usize - ptr as usize } , 55usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock1) , "::" , stringify ! (ordQty))) ; } test_field_ordQty () ; fn test_field_commdaCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . commdaCode) as usize - ptr as usize } , 71usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock1) , "::" , stringify ! (commdaCode))) ; } test_field_commdaCode () ; fn test_field_grpId () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . grpId) as usize - ptr as usize } , 73usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock1) , "::" , stringify ! (grpId))) ; } test_field_grpId () ; fn test_field_strtgCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . strtgCode) as usize - ptr as usize } , 93usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock1) , "::" , stringify ! (strtgCode))) ; } test_field_strtgCode () ; fn test_field_ordSeqNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordSeqNo) as usize - ptr as usize } , 99usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock1) , "::" , stringify ! (ordSeqNo))) ; } test_field_ordSeqNo () ; fn test_field_ptflNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ptflNo) as usize - ptr as usize } , 109usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock1) , "::" , stringify ! (ptflNo))) ; } test_field_ptflNo () ; fn test_field_bskNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bskNo) as usize - ptr as usize } , 119usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock1) , "::" , stringify ! (bskNo))) ; } test_field_bskNo () ; fn test_field_trchNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . trchNo) as usize - ptr as usize } , 129usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock1) , "::" , stringify ! (trchNo))) ; } test_field_trchNo () ; fn test_field_itemNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . itemNo) as usize - ptr as usize } , 139usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock1) , "::" , stringify ! (itemNo))) ; } test_field_itemNo () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CSPAT00800OutBlock2 { pub recCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub ordNo : [:: std :: os :: raw :: c_char ; 10usize] , pub prntOrdNo : [:: std :: os :: raw :: c_char ; 10usize] , pub ordTime : [:: std :: os :: raw :: c_char ; 9usize] , pub ordMktCode : [:: std :: os :: raw :: c_char ; 2usize] , pub ordPtnCode : [:: std :: os :: raw :: c_char ; 2usize] , pub shtnIsuNo : [:: std :: os :: raw :: c_char ; 9usize] , pub prgmOrdprcPtnCode : [:: std :: os :: raw :: c_char ; 2usize] , pub stslOrdprcTpCode : [:: std :: os :: raw :: c_char ; 1usize] , pub stslAbleYn : [:: std :: os :: raw :: c_char ; 1usize] , pub mgntrnCode : [:: std :: os :: raw :: c_char ; 3usize] , pub loanDt : [:: std :: os :: raw :: c_char ; 8usize] , pub cvrgOrdTp : [:: std :: os :: raw :: c_char ; 1usize] , pub lpYn : [:: std :: os :: raw :: c_char ; 1usize] , pub mgempNo : [:: std :: os :: raw :: c_char ; 9usize] , pub bnsTpCode : [:: std :: os :: raw :: c_char ; 1usize] , pub spareOrdNo : [:: std :: os :: raw :: c_char ; 10usize] , pub cvrgSeqno : [:: std :: os :: raw :: c_char ; 10usize] , pub rsvOrdNo : [:: std :: os :: raw :: c_char ; 10usize] , pub acntNm : [:: std :: os :: raw :: c_char ; 40usize] , pub isuNm : [:: std :: os :: raw :: c_char ; 40usize] , } # [test] fn bindgen_test_layout_CSPAT00800OutBlock2 () { assert_eq ! (:: std :: mem :: size_of :: < CSPAT00800OutBlock2 > () , 184usize , concat ! ("Size of: " , stringify ! (CSPAT00800OutBlock2))) ; assert_eq ! (:: std :: mem :: align_of :: < CSPAT00800OutBlock2 > () , 1usize , concat ! ("Alignment of " , stringify ! (CSPAT00800OutBlock2))) ; fn test_field_recCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . recCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock2) , "::" , stringify ! (recCnt))) ; } test_field_recCnt () ; fn test_field_ordNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordNo) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock2) , "::" , stringify ! (ordNo))) ; } test_field_ordNo () ; fn test_field_prntOrdNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prntOrdNo) as usize - ptr as usize } , 15usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock2) , "::" , stringify ! (prntOrdNo))) ; } test_field_prntOrdNo () ; fn test_field_ordTime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordTime) as usize - ptr as usize } , 25usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock2) , "::" , stringify ! (ordTime))) ; } test_field_ordTime () ; fn test_field_ordMktCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordMktCode) as usize - ptr as usize } , 34usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock2) , "::" , stringify ! (ordMktCode))) ; } test_field_ordMktCode () ; fn test_field_ordPtnCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordPtnCode) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock2) , "::" , stringify ! (ordPtnCode))) ; } test_field_ordPtnCode () ; fn test_field_shtnIsuNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shtnIsuNo) as usize - ptr as usize } , 38usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock2) , "::" , stringify ! (shtnIsuNo))) ; } test_field_shtnIsuNo () ; fn test_field_prgmOrdprcPtnCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prgmOrdprcPtnCode) as usize - ptr as usize } , 47usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock2) , "::" , stringify ! (prgmOrdprcPtnCode))) ; } test_field_prgmOrdprcPtnCode () ; fn test_field_stslOrdprcTpCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . stslOrdprcTpCode) as usize - ptr as usize } , 49usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock2) , "::" , stringify ! (stslOrdprcTpCode))) ; } test_field_stslOrdprcTpCode () ; fn test_field_stslAbleYn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . stslAbleYn) as usize - ptr as usize } , 50usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock2) , "::" , stringify ! (stslAbleYn))) ; } test_field_stslAbleYn () ; fn test_field_mgntrnCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mgntrnCode) as usize - ptr as usize } , 51usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock2) , "::" , stringify ! (mgntrnCode))) ; } test_field_mgntrnCode () ; fn test_field_loanDt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . loanDt) as usize - ptr as usize } , 54usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock2) , "::" , stringify ! (loanDt))) ; } test_field_loanDt () ; fn test_field_cvrgOrdTp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cvrgOrdTp) as usize - ptr as usize } , 62usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock2) , "::" , stringify ! (cvrgOrdTp))) ; } test_field_cvrgOrdTp () ; fn test_field_lpYn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lpYn) as usize - ptr as usize } , 63usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock2) , "::" , stringify ! (lpYn))) ; } test_field_lpYn () ; fn test_field_mgempNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mgempNo) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock2) , "::" , stringify ! (mgempNo))) ; } test_field_mgempNo () ; fn test_field_bnsTpCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bnsTpCode) as usize - ptr as usize } , 73usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock2) , "::" , stringify ! (bnsTpCode))) ; } test_field_bnsTpCode () ; fn test_field_spareOrdNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . spareOrdNo) as usize - ptr as usize } , 74usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock2) , "::" , stringify ! (spareOrdNo))) ; } test_field_spareOrdNo () ; fn test_field_cvrgSeqno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cvrgSeqno) as usize - ptr as usize } , 84usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock2) , "::" , stringify ! (cvrgSeqno))) ; } test_field_cvrgSeqno () ; fn test_field_rsvOrdNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . rsvOrdNo) as usize - ptr as usize } , 94usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock2) , "::" , stringify ! (rsvOrdNo))) ; } test_field_rsvOrdNo () ; fn test_field_acntNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . acntNm) as usize - ptr as usize } , 104usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock2) , "::" , stringify ! (acntNm))) ; } test_field_acntNm () ; fn test_field_isuNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . isuNm) as usize - ptr as usize } , 144usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock2) , "::" , stringify ! (isuNm))) ; } test_field_isuNm () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CSPAT00800OutBlock { pub outBlock1 : CSPAT00800OutBlock1 , pub outBlock2 : CSPAT00800OutBlock2 , } # [test] fn bindgen_test_layout_CSPAT00800OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < CSPAT00800OutBlock > () , 333usize , concat ! ("Size of: " , stringify ! (CSPAT00800OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < CSPAT00800OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (CSPAT00800OutBlock))) ; fn test_field_outBlock1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . outBlock1) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock) , "::" , stringify ! (outBlock1))) ; } test_field_outBlock1 () ; fn test_field_outBlock2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAT00800OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . outBlock2) as usize - ptr as usize } , 149usize , concat ! ("Offset of field: " , stringify ! (CSPAT00800OutBlock) , "::" , stringify ! (outBlock2))) ; } test_field_outBlock2 () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct SC0_OutBlock { pub lineseq : [:: std :: os :: raw :: c_char ; 10usize] , pub accno : [:: std :: os :: raw :: c_char ; 11usize] , pub user : [:: std :: os :: raw :: c_char ; 8usize] , pub len : [:: std :: os :: raw :: c_char ; 6usize] , pub gubun : [:: std :: os :: raw :: c_char ; 1usize] , pub compress : [:: std :: os :: raw :: c_char ; 1usize] , pub encrypt : [:: std :: os :: raw :: c_char ; 1usize] , pub offset : [:: std :: os :: raw :: c_char ; 3usize] , pub trcode : [:: std :: os :: raw :: c_char ; 8usize] , pub compid : [:: std :: os :: raw :: c_char ; 3usize] , pub userid : [:: std :: os :: raw :: c_char ; 16usize] , pub media : [:: std :: os :: raw :: c_char ; 2usize] , pub ifid : [:: std :: os :: raw :: c_char ; 3usize] , pub seq : [:: std :: os :: raw :: c_char ; 9usize] , pub trid : [:: std :: os :: raw :: c_char ; 16usize] , pub pubip : [:: std :: os :: raw :: c_char ; 12usize] , pub prvip : [:: std :: os :: raw :: c_char ; 12usize] , pub pcbpno : [:: std :: os :: raw :: c_char ; 3usize] , pub bpno : [:: std :: os :: raw :: c_char ; 3usize] , pub termno : [:: std :: os :: raw :: c_char ; 8usize] , pub lang : [:: std :: os :: raw :: c_char ; 1usize] , pub proctm : [:: std :: os :: raw :: c_char ; 9usize] , pub msgcode : [:: std :: os :: raw :: c_char ; 4usize] , pub outgu : [:: std :: os :: raw :: c_char ; 1usize] , pub compreq : [:: std :: os :: raw :: c_char ; 1usize] , pub funckey : [:: std :: os :: raw :: c_char ; 4usize] , pub reqcnt : [:: std :: os :: raw :: c_char ; 4usize] , pub filler : [:: std :: os :: raw :: c_char ; 6usize] , pub cont : [:: std :: os :: raw :: c_char ; 1usize] , pub contkey : [:: std :: os :: raw :: c_char ; 18usize] , pub varlen : [:: std :: os :: raw :: c_char ; 2usize] , pub varhdlen : [:: std :: os :: raw :: c_char ; 2usize] , pub varmsglen : [:: std :: os :: raw :: c_char ; 2usize] , pub trsrc : [:: std :: os :: raw :: c_char ; 1usize] , pub eventid : [:: std :: os :: raw :: c_char ; 4usize] , pub ifinfo : [:: std :: os :: raw :: c_char ; 4usize] , pub filler1 : [:: std :: os :: raw :: c_char ; 41usize] , pub ordchegb : [:: std :: os :: raw :: c_char ; 2usize] , pub marketgb : [:: std :: os :: raw :: c_char ; 2usize] , pub ordgb : [:: std :: os :: raw :: c_char ; 2usize] , pub orgordno : [:: std :: os :: raw :: c_char ; 10usize] , pub accno1 : [:: std :: os :: raw :: c_char ; 11usize] , pub accno2 : [:: std :: os :: raw :: c_char ; 9usize] , pub passwd : [:: std :: os :: raw :: c_char ; 8usize] , pub expcode : [:: std :: os :: raw :: c_char ; 12usize] , pub shtcode : [:: std :: os :: raw :: c_char ; 9usize] , pub hname : [:: std :: os :: raw :: c_char ; 40usize] , pub ordqty : [:: std :: os :: raw :: c_char ; 16usize] , pub ordprice : [:: std :: os :: raw :: c_char ; 13usize] , pub hogagb : [:: std :: os :: raw :: c_char ; 1usize] , pub etfhogagb : [:: std :: os :: raw :: c_char ; 2usize] , pub pgmtype : [:: std :: os :: raw :: c_char ; 2usize] , pub gmhogagb : [:: std :: os :: raw :: c_char ; 1usize] , pub gmhogayn : [:: std :: os :: raw :: c_char ; 1usize] , pub singb : [:: std :: os :: raw :: c_char ; 3usize] , pub loandt : [:: std :: os :: raw :: c_char ; 8usize] , pub cvrgordtp : [:: std :: os :: raw :: c_char ; 1usize] , pub strtgcode : [:: std :: os :: raw :: c_char ; 6usize] , pub groupid : [:: std :: os :: raw :: c_char ; 20usize] , pub ordseqno : [:: std :: os :: raw :: c_char ; 10usize] , pub prtno : [:: std :: os :: raw :: c_char ; 10usize] , pub basketno : [:: std :: os :: raw :: c_char ; 10usize] , pub trchno : [:: std :: os :: raw :: c_char ; 10usize] , pub itemno : [:: std :: os :: raw :: c_char ; 10usize] , pub brwmgmyn : [:: std :: os :: raw :: c_char ; 1usize] , pub mbrno : [:: std :: os :: raw :: c_char ; 3usize] , pub procgb : [:: std :: os :: raw :: c_char ; 1usize] , pub admbrchno : [:: std :: os :: raw :: c_char ; 3usize] , pub futaccno : [:: std :: os :: raw :: c_char ; 20usize] , pub futmarketgb : [:: std :: os :: raw :: c_char ; 1usize] , pub tongsingb : [:: std :: os :: raw :: c_char ; 2usize] , pub lpgb : [:: std :: os :: raw :: c_char ; 1usize] , pub dummy : [:: std :: os :: raw :: c_char ; 20usize] , pub ordno : [:: std :: os :: raw :: c_char ; 10usize] , pub ordtm : [:: std :: os :: raw :: c_char ; 9usize] , pub prntordno : [:: std :: os :: raw :: c_char ; 10usize] , pub mgempno : [:: std :: os :: raw :: c_char ; 9usize] , pub orgordundrqty : [:: std :: os :: raw :: c_char ; 16usize] , pub orgordmdfyqty : [:: std :: os :: raw :: c_char ; 16usize] , pub ordordcancelqty : [:: std :: os :: raw :: c_char ; 16usize] , pub nmcpysndno : [:: std :: os :: raw :: c_char ; 10usize] , pub ordamt : [:: std :: os :: raw :: c_char ; 16usize] , pub bnstp : [:: std :: os :: raw :: c_char ; 1usize] , pub spareordno : [:: std :: os :: raw :: c_char ; 10usize] , pub cvrgseqno : [:: std :: os :: raw :: c_char ; 10usize] , pub rsvordno : [:: std :: os :: raw :: c_char ; 10usize] , pub mtordseqno : [:: std :: os :: raw :: c_char ; 10usize] , pub spareordqty : [:: std :: os :: raw :: c_char ; 16usize] , pub orduserid : [:: std :: os :: raw :: c_char ; 16usize] , pub spotordqty : [:: std :: os :: raw :: c_char ; 16usize] , pub ordruseqty : [:: std :: os :: raw :: c_char ; 16usize] , pub mnyordamt : [:: std :: os :: raw :: c_char ; 16usize] , pub ordsubstamt : [:: std :: os :: raw :: c_char ; 16usize] , pub ruseordamt : [:: std :: os :: raw :: c_char ; 16usize] , pub ordcmsnamt : [:: std :: os :: raw :: c_char ; 16usize] , pub crdtuseamt : [:: std :: os :: raw :: c_char ; 16usize] , pub secbalqty : [:: std :: os :: raw :: c_char ; 16usize] , pub spotordableqty : [:: std :: os :: raw :: c_char ; 16usize] , pub ordableruseqty : [:: std :: os :: raw :: c_char ; 16usize] , pub flctqty : [:: std :: os :: raw :: c_char ; 16usize] , pub secbalqtyd2 : [:: std :: os :: raw :: c_char ; 16usize] , pub sellableqty : [:: std :: os :: raw :: c_char ; 16usize] , pub unercsellordqty : [:: std :: os :: raw :: c_char ; 16usize] , pub avrpchsprc : [:: std :: os :: raw :: c_char ; 13usize] , pub pchsamt : [:: std :: os :: raw :: c_char ; 16usize] , pub deposit : [:: std :: os :: raw :: c_char ; 16usize] , pub substamt : [:: std :: os :: raw :: c_char ; 16usize] , pub csgnmnymgn : [:: std :: os :: raw :: c_char ; 16usize] , pub csgnsubstmgn : [:: std :: os :: raw :: c_char ; 16usize] , pub crdtpldgruseamt : [:: std :: os :: raw :: c_char ; 16usize] , pub ordablemny : [:: std :: os :: raw :: c_char ; 16usize] , pub ordablesubstamt : [:: std :: os :: raw :: c_char ; 16usize] , pub ruseableamt : [:: std :: os :: raw :: c_char ; 16usize] , } # [test] fn bindgen_test_layout_SC0_OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < SC0_OutBlock > () , 1088usize , concat ! ("Size of: " , stringify ! (SC0_OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < SC0_OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (SC0_OutBlock))) ; fn test_field_lineseq () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lineseq) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (lineseq))) ; } test_field_lineseq () ; fn test_field_accno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . accno) as usize - ptr as usize } , 10usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (accno))) ; } test_field_accno () ; fn test_field_user () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . user) as usize - ptr as usize } , 21usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (user))) ; } test_field_user () ; fn test_field_len () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . len) as usize - ptr as usize } , 29usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (len))) ; } test_field_len () ; fn test_field_gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . gubun) as usize - ptr as usize } , 35usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (gubun))) ; } test_field_gubun () ; fn test_field_compress () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . compress) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (compress))) ; } test_field_compress () ; fn test_field_encrypt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . encrypt) as usize - ptr as usize } , 37usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (encrypt))) ; } test_field_encrypt () ; fn test_field_offset () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offset) as usize - ptr as usize } , 38usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (offset))) ; } test_field_offset () ; fn test_field_trcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . trcode) as usize - ptr as usize } , 41usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (trcode))) ; } test_field_trcode () ; fn test_field_compid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . compid) as usize - ptr as usize } , 49usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (compid))) ; } test_field_compid () ; fn test_field_userid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . userid) as usize - ptr as usize } , 52usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (userid))) ; } test_field_userid () ; fn test_field_media () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . media) as usize - ptr as usize } , 68usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (media))) ; } test_field_media () ; fn test_field_ifid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ifid) as usize - ptr as usize } , 70usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (ifid))) ; } test_field_ifid () ; fn test_field_seq () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . seq) as usize - ptr as usize } , 73usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (seq))) ; } test_field_seq () ; fn test_field_trid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . trid) as usize - ptr as usize } , 82usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (trid))) ; } test_field_trid () ; fn test_field_pubip () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . pubip) as usize - ptr as usize } , 98usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (pubip))) ; } test_field_pubip () ; fn test_field_prvip () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prvip) as usize - ptr as usize } , 110usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (prvip))) ; } test_field_prvip () ; fn test_field_pcbpno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . pcbpno) as usize - ptr as usize } , 122usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (pcbpno))) ; } test_field_pcbpno () ; fn test_field_bpno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bpno) as usize - ptr as usize } , 125usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (bpno))) ; } test_field_bpno () ; fn test_field_termno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . termno) as usize - ptr as usize } , 128usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (termno))) ; } test_field_termno () ; fn test_field_lang () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lang) as usize - ptr as usize } , 136usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (lang))) ; } test_field_lang () ; fn test_field_proctm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . proctm) as usize - ptr as usize } , 137usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (proctm))) ; } test_field_proctm () ; fn test_field_msgcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . msgcode) as usize - ptr as usize } , 146usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (msgcode))) ; } test_field_msgcode () ; fn test_field_outgu () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . outgu) as usize - ptr as usize } , 150usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (outgu))) ; } test_field_outgu () ; fn test_field_compreq () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . compreq) as usize - ptr as usize } , 151usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (compreq))) ; } test_field_compreq () ; fn test_field_funckey () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . funckey) as usize - ptr as usize } , 152usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (funckey))) ; } test_field_funckey () ; fn test_field_reqcnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . reqcnt) as usize - ptr as usize } , 156usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (reqcnt))) ; } test_field_reqcnt () ; fn test_field_filler () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . filler) as usize - ptr as usize } , 160usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (filler))) ; } test_field_filler () ; fn test_field_cont () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cont) as usize - ptr as usize } , 166usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (cont))) ; } test_field_cont () ; fn test_field_contkey () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . contkey) as usize - ptr as usize } , 167usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (contkey))) ; } test_field_contkey () ; fn test_field_varlen () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . varlen) as usize - ptr as usize } , 185usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (varlen))) ; } test_field_varlen () ; fn test_field_varhdlen () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . varhdlen) as usize - ptr as usize } , 187usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (varhdlen))) ; } test_field_varhdlen () ; fn test_field_varmsglen () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . varmsglen) as usize - ptr as usize } , 189usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (varmsglen))) ; } test_field_varmsglen () ; fn test_field_trsrc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . trsrc) as usize - ptr as usize } , 191usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (trsrc))) ; } test_field_trsrc () ; fn test_field_eventid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . eventid) as usize - ptr as usize } , 192usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (eventid))) ; } test_field_eventid () ; fn test_field_ifinfo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ifinfo) as usize - ptr as usize } , 196usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (ifinfo))) ; } test_field_ifinfo () ; fn test_field_filler1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . filler1) as usize - ptr as usize } , 200usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (filler1))) ; } test_field_filler1 () ; fn test_field_ordchegb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordchegb) as usize - ptr as usize } , 241usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (ordchegb))) ; } test_field_ordchegb () ; fn test_field_marketgb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . marketgb) as usize - ptr as usize } , 243usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (marketgb))) ; } test_field_marketgb () ; fn test_field_ordgb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordgb) as usize - ptr as usize } , 245usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (ordgb))) ; } test_field_ordgb () ; fn test_field_orgordno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . orgordno) as usize - ptr as usize } , 247usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (orgordno))) ; } test_field_orgordno () ; fn test_field_accno1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . accno1) as usize - ptr as usize } , 257usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (accno1))) ; } test_field_accno1 () ; fn test_field_accno2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . accno2) as usize - ptr as usize } , 268usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (accno2))) ; } test_field_accno2 () ; fn test_field_passwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . passwd) as usize - ptr as usize } , 277usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (passwd))) ; } test_field_passwd () ; fn test_field_expcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . expcode) as usize - ptr as usize } , 285usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (expcode))) ; } test_field_expcode () ; fn test_field_shtcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shtcode) as usize - ptr as usize } , 297usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (shtcode))) ; } test_field_shtcode () ; fn test_field_hname () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . hname) as usize - ptr as usize } , 306usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (hname))) ; } test_field_hname () ; fn test_field_ordqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordqty) as usize - ptr as usize } , 346usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (ordqty))) ; } test_field_ordqty () ; fn test_field_ordprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordprice) as usize - ptr as usize } , 362usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (ordprice))) ; } test_field_ordprice () ; fn test_field_hogagb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . hogagb) as usize - ptr as usize } , 375usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (hogagb))) ; } test_field_hogagb () ; fn test_field_etfhogagb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . etfhogagb) as usize - ptr as usize } , 376usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (etfhogagb))) ; } test_field_etfhogagb () ; fn test_field_pgmtype () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . pgmtype) as usize - ptr as usize } , 378usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (pgmtype))) ; } test_field_pgmtype () ; fn test_field_gmhogagb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . gmhogagb) as usize - ptr as usize } , 380usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (gmhogagb))) ; } test_field_gmhogagb () ; fn test_field_gmhogayn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . gmhogayn) as usize - ptr as usize } , 381usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (gmhogayn))) ; } test_field_gmhogayn () ; fn test_field_singb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . singb) as usize - ptr as usize } , 382usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (singb))) ; } test_field_singb () ; fn test_field_loandt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . loandt) as usize - ptr as usize } , 385usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (loandt))) ; } test_field_loandt () ; fn test_field_cvrgordtp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cvrgordtp) as usize - ptr as usize } , 393usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (cvrgordtp))) ; } test_field_cvrgordtp () ; fn test_field_strtgcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . strtgcode) as usize - ptr as usize } , 394usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (strtgcode))) ; } test_field_strtgcode () ; fn test_field_groupid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . groupid) as usize - ptr as usize } , 400usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (groupid))) ; } test_field_groupid () ; fn test_field_ordseqno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordseqno) as usize - ptr as usize } , 420usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (ordseqno))) ; } test_field_ordseqno () ; fn test_field_prtno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prtno) as usize - ptr as usize } , 430usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (prtno))) ; } test_field_prtno () ; fn test_field_basketno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . basketno) as usize - ptr as usize } , 440usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (basketno))) ; } test_field_basketno () ; fn test_field_trchno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . trchno) as usize - ptr as usize } , 450usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (trchno))) ; } test_field_trchno () ; fn test_field_itemno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . itemno) as usize - ptr as usize } , 460usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (itemno))) ; } test_field_itemno () ; fn test_field_brwmgmyn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . brwmgmyn) as usize - ptr as usize } , 470usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (brwmgmyn))) ; } test_field_brwmgmyn () ; fn test_field_mbrno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mbrno) as usize - ptr as usize } , 471usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (mbrno))) ; } test_field_mbrno () ; fn test_field_procgb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . procgb) as usize - ptr as usize } , 474usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (procgb))) ; } test_field_procgb () ; fn test_field_admbrchno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . admbrchno) as usize - ptr as usize } , 475usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (admbrchno))) ; } test_field_admbrchno () ; fn test_field_futaccno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . futaccno) as usize - ptr as usize } , 478usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (futaccno))) ; } test_field_futaccno () ; fn test_field_futmarketgb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . futmarketgb) as usize - ptr as usize } , 498usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (futmarketgb))) ; } test_field_futmarketgb () ; fn test_field_tongsingb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tongsingb) as usize - ptr as usize } , 499usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (tongsingb))) ; } test_field_tongsingb () ; fn test_field_lpgb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lpgb) as usize - ptr as usize } , 501usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (lpgb))) ; } test_field_lpgb () ; fn test_field_dummy () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dummy) as usize - ptr as usize } , 502usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (dummy))) ; } test_field_dummy () ; fn test_field_ordno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordno) as usize - ptr as usize } , 522usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (ordno))) ; } test_field_ordno () ; fn test_field_ordtm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordtm) as usize - ptr as usize } , 532usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (ordtm))) ; } test_field_ordtm () ; fn test_field_prntordno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prntordno) as usize - ptr as usize } , 541usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (prntordno))) ; } test_field_prntordno () ; fn test_field_mgempno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mgempno) as usize - ptr as usize } , 551usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (mgempno))) ; } test_field_mgempno () ; fn test_field_orgordundrqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . orgordundrqty) as usize - ptr as usize } , 560usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (orgordundrqty))) ; } test_field_orgordundrqty () ; fn test_field_orgordmdfyqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . orgordmdfyqty) as usize - ptr as usize } , 576usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (orgordmdfyqty))) ; } test_field_orgordmdfyqty () ; fn test_field_ordordcancelqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordordcancelqty) as usize - ptr as usize } , 592usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (ordordcancelqty))) ; } test_field_ordordcancelqty () ; fn test_field_nmcpysndno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . nmcpysndno) as usize - ptr as usize } , 608usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (nmcpysndno))) ; } test_field_nmcpysndno () ; fn test_field_ordamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordamt) as usize - ptr as usize } , 618usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (ordamt))) ; } test_field_ordamt () ; fn test_field_bnstp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bnstp) as usize - ptr as usize } , 634usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (bnstp))) ; } test_field_bnstp () ; fn test_field_spareordno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . spareordno) as usize - ptr as usize } , 635usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (spareordno))) ; } test_field_spareordno () ; fn test_field_cvrgseqno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cvrgseqno) as usize - ptr as usize } , 645usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (cvrgseqno))) ; } test_field_cvrgseqno () ; fn test_field_rsvordno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . rsvordno) as usize - ptr as usize } , 655usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (rsvordno))) ; } test_field_rsvordno () ; fn test_field_mtordseqno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mtordseqno) as usize - ptr as usize } , 665usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (mtordseqno))) ; } test_field_mtordseqno () ; fn test_field_spareordqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . spareordqty) as usize - ptr as usize } , 675usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (spareordqty))) ; } test_field_spareordqty () ; fn test_field_orduserid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . orduserid) as usize - ptr as usize } , 691usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (orduserid))) ; } test_field_orduserid () ; fn test_field_spotordqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . spotordqty) as usize - ptr as usize } , 707usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (spotordqty))) ; } test_field_spotordqty () ; fn test_field_ordruseqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordruseqty) as usize - ptr as usize } , 723usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (ordruseqty))) ; } test_field_ordruseqty () ; fn test_field_mnyordamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mnyordamt) as usize - ptr as usize } , 739usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (mnyordamt))) ; } test_field_mnyordamt () ; fn test_field_ordsubstamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordsubstamt) as usize - ptr as usize } , 755usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (ordsubstamt))) ; } test_field_ordsubstamt () ; fn test_field_ruseordamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ruseordamt) as usize - ptr as usize } , 771usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (ruseordamt))) ; } test_field_ruseordamt () ; fn test_field_ordcmsnamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordcmsnamt) as usize - ptr as usize } , 787usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (ordcmsnamt))) ; } test_field_ordcmsnamt () ; fn test_field_crdtuseamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . crdtuseamt) as usize - ptr as usize } , 803usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (crdtuseamt))) ; } test_field_crdtuseamt () ; fn test_field_secbalqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . secbalqty) as usize - ptr as usize } , 819usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (secbalqty))) ; } test_field_secbalqty () ; fn test_field_spotordableqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . spotordableqty) as usize - ptr as usize } , 835usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (spotordableqty))) ; } test_field_spotordableqty () ; fn test_field_ordableruseqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordableruseqty) as usize - ptr as usize } , 851usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (ordableruseqty))) ; } test_field_ordableruseqty () ; fn test_field_flctqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . flctqty) as usize - ptr as usize } , 867usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (flctqty))) ; } test_field_flctqty () ; fn test_field_secbalqtyd2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . secbalqtyd2) as usize - ptr as usize } , 883usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (secbalqtyd2))) ; } test_field_secbalqtyd2 () ; fn test_field_sellableqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sellableqty) as usize - ptr as usize } , 899usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (sellableqty))) ; } test_field_sellableqty () ; fn test_field_unercsellordqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . unercsellordqty) as usize - ptr as usize } , 915usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (unercsellordqty))) ; } test_field_unercsellordqty () ; fn test_field_avrpchsprc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . avrpchsprc) as usize - ptr as usize } , 931usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (avrpchsprc))) ; } test_field_avrpchsprc () ; fn test_field_pchsamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . pchsamt) as usize - ptr as usize } , 944usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (pchsamt))) ; } test_field_pchsamt () ; fn test_field_deposit () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . deposit) as usize - ptr as usize } , 960usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (deposit))) ; } test_field_deposit () ; fn test_field_substamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . substamt) as usize - ptr as usize } , 976usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (substamt))) ; } test_field_substamt () ; fn test_field_csgnmnymgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . csgnmnymgn) as usize - ptr as usize } , 992usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (csgnmnymgn))) ; } test_field_csgnmnymgn () ; fn test_field_csgnsubstmgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . csgnsubstmgn) as usize - ptr as usize } , 1008usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (csgnsubstmgn))) ; } test_field_csgnsubstmgn () ; fn test_field_crdtpldgruseamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . crdtpldgruseamt) as usize - ptr as usize } , 1024usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (crdtpldgruseamt))) ; } test_field_crdtpldgruseamt () ; fn test_field_ordablemny () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordablemny) as usize - ptr as usize } , 1040usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (ordablemny))) ; } test_field_ordablemny () ; fn test_field_ordablesubstamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordablesubstamt) as usize - ptr as usize } , 1056usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (ordablesubstamt))) ; } test_field_ordablesubstamt () ; fn test_field_ruseableamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC0_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ruseableamt) as usize - ptr as usize } , 1072usize , concat ! ("Offset of field: " , stringify ! (SC0_OutBlock) , "::" , stringify ! (ruseableamt))) ; } test_field_ruseableamt () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct SC1_OutBlock { pub lineseq : [:: std :: os :: raw :: c_char ; 10usize] , pub accno : [:: std :: os :: raw :: c_char ; 11usize] , pub user : [:: std :: os :: raw :: c_char ; 8usize] , pub len : [:: std :: os :: raw :: c_char ; 6usize] , pub gubun : [:: std :: os :: raw :: c_char ; 1usize] , pub compress : [:: std :: os :: raw :: c_char ; 1usize] , pub encrypt : [:: std :: os :: raw :: c_char ; 1usize] , pub offset : [:: std :: os :: raw :: c_char ; 3usize] , pub trcode : [:: std :: os :: raw :: c_char ; 8usize] , pub compid : [:: std :: os :: raw :: c_char ; 3usize] , pub userid : [:: std :: os :: raw :: c_char ; 16usize] , pub media : [:: std :: os :: raw :: c_char ; 2usize] , pub ifid : [:: std :: os :: raw :: c_char ; 3usize] , pub seq : [:: std :: os :: raw :: c_char ; 9usize] , pub trid : [:: std :: os :: raw :: c_char ; 16usize] , pub pubip : [:: std :: os :: raw :: c_char ; 12usize] , pub prvip : [:: std :: os :: raw :: c_char ; 12usize] , pub pcbpno : [:: std :: os :: raw :: c_char ; 3usize] , pub bpno : [:: std :: os :: raw :: c_char ; 3usize] , pub termno : [:: std :: os :: raw :: c_char ; 8usize] , pub lang : [:: std :: os :: raw :: c_char ; 1usize] , pub proctm : [:: std :: os :: raw :: c_char ; 9usize] , pub msgcode : [:: std :: os :: raw :: c_char ; 4usize] , pub outgu : [:: std :: os :: raw :: c_char ; 1usize] , pub compreq : [:: std :: os :: raw :: c_char ; 1usize] , pub funckey : [:: std :: os :: raw :: c_char ; 4usize] , pub reqcnt : [:: std :: os :: raw :: c_char ; 4usize] , pub filler : [:: std :: os :: raw :: c_char ; 6usize] , pub cont : [:: std :: os :: raw :: c_char ; 1usize] , pub contkey : [:: std :: os :: raw :: c_char ; 18usize] , pub varlen : [:: std :: os :: raw :: c_char ; 2usize] , pub varhdlen : [:: std :: os :: raw :: c_char ; 2usize] , pub varmsglen : [:: std :: os :: raw :: c_char ; 2usize] , pub trsrc : [:: std :: os :: raw :: c_char ; 1usize] , pub eventid : [:: std :: os :: raw :: c_char ; 4usize] , pub ifinfo : [:: std :: os :: raw :: c_char ; 4usize] , pub filler1 : [:: std :: os :: raw :: c_char ; 41usize] , pub ordxctptncode : [:: std :: os :: raw :: c_char ; 2usize] , pub ordmktcode : [:: std :: os :: raw :: c_char ; 2usize] , pub ordptncode : [:: std :: os :: raw :: c_char ; 2usize] , pub mgmtbrnno : [:: std :: os :: raw :: c_char ; 3usize] , pub accno1 : [:: std :: os :: raw :: c_char ; 11usize] , pub accno2 : [:: std :: os :: raw :: c_char ; 9usize] , pub acntnm : [:: std :: os :: raw :: c_char ; 40usize] , pub Isuno : [:: std :: os :: raw :: c_char ; 12usize] , pub Isunm : [:: std :: os :: raw :: c_char ; 40usize] , pub ordno : [:: std :: os :: raw :: c_char ; 10usize] , pub orgordno : [:: std :: os :: raw :: c_char ; 10usize] , pub execno : [:: std :: os :: raw :: c_char ; 10usize] , pub ordqty : [:: std :: os :: raw :: c_char ; 16usize] , pub ordprc : [:: std :: os :: raw :: c_char ; 13usize] , pub execqty : [:: std :: os :: raw :: c_char ; 16usize] , pub execprc : [:: std :: os :: raw :: c_char ; 13usize] , pub mdfycnfqty : [:: std :: os :: raw :: c_char ; 16usize] , pub mdfycnfprc : [:: std :: os :: raw :: c_char ; 16usize] , pub canccnfqty : [:: std :: os :: raw :: c_char ; 16usize] , pub rjtqty : [:: std :: os :: raw :: c_char ; 16usize] , pub ordtrxptncode : [:: std :: os :: raw :: c_char ; 4usize] , pub mtiordseqno : [:: std :: os :: raw :: c_char ; 10usize] , pub ordcndi : [:: std :: os :: raw :: c_char ; 1usize] , pub ordprcptncode : [:: std :: os :: raw :: c_char ; 2usize] , pub nsavtrdqty : [:: std :: os :: raw :: c_char ; 16usize] , pub shtnIsuno : [:: std :: os :: raw :: c_char ; 9usize] , pub opdrtnno : [:: std :: os :: raw :: c_char ; 12usize] , pub cvrgordtp : [:: std :: os :: raw :: c_char ; 1usize] , pub unercqty : [:: std :: os :: raw :: c_char ; 16usize] , pub orgordunercqty : [:: std :: os :: raw :: c_char ; 16usize] , pub orgordmdfyqty : [:: std :: os :: raw :: c_char ; 16usize] , pub orgordcancqty : [:: std :: os :: raw :: c_char ; 16usize] , pub ordavrexecprc : [:: std :: os :: raw :: c_char ; 13usize] , pub ordamt : [:: std :: os :: raw :: c_char ; 16usize] , pub stdIsuno : [:: std :: os :: raw :: c_char ; 12usize] , pub bfstdIsuno : [:: std :: os :: raw :: c_char ; 12usize] , pub bnstp : [:: std :: os :: raw :: c_char ; 1usize] , pub ordtrdptncode : [:: std :: os :: raw :: c_char ; 2usize] , pub mgntrncode : [:: std :: os :: raw :: c_char ; 3usize] , pub adduptp : [:: std :: os :: raw :: c_char ; 2usize] , pub commdacode : [:: std :: os :: raw :: c_char ; 2usize] , pub Loandt : [:: std :: os :: raw :: c_char ; 8usize] , pub mbrnmbrno : [:: std :: os :: raw :: c_char ; 3usize] , pub ordacntno : [:: std :: os :: raw :: c_char ; 20usize] , pub agrgbrnno : [:: std :: os :: raw :: c_char ; 3usize] , pub mgempno : [:: std :: os :: raw :: c_char ; 9usize] , pub futsLnkbrnno : [:: std :: os :: raw :: c_char ; 3usize] , pub futsLnkacntno : [:: std :: os :: raw :: c_char ; 20usize] , pub futsmkttp : [:: std :: os :: raw :: c_char ; 1usize] , pub regmktcode : [:: std :: os :: raw :: c_char ; 2usize] , pub mnymgnrat : [:: std :: os :: raw :: c_char ; 7usize] , pub substmgnrat : [:: std :: os :: raw :: c_char ; 9usize] , pub mnyexecamt : [:: std :: os :: raw :: c_char ; 16usize] , pub ubstexecamt : [:: std :: os :: raw :: c_char ; 16usize] , pub cmsnamtexecamt : [:: std :: os :: raw :: c_char ; 16usize] , pub crdtpldgexecamt : [:: std :: os :: raw :: c_char ; 16usize] , pub crdtexecamt : [:: std :: os :: raw :: c_char ; 16usize] , pub prdayruseexecval : [:: std :: os :: raw :: c_char ; 16usize] , pub crdayruseexecval : [:: std :: os :: raw :: c_char ; 16usize] , pub spotexecqty : [:: std :: os :: raw :: c_char ; 16usize] , pub stslexecqty : [:: std :: os :: raw :: c_char ; 16usize] , pub strtgcode : [:: std :: os :: raw :: c_char ; 6usize] , pub grpId : [:: std :: os :: raw :: c_char ; 20usize] , pub ordseqno : [:: std :: os :: raw :: c_char ; 10usize] , pub ptflno : [:: std :: os :: raw :: c_char ; 10usize] , pub bskno : [:: std :: os :: raw :: c_char ; 10usize] , pub trchno : [:: std :: os :: raw :: c_char ; 10usize] , pub itemno : [:: std :: os :: raw :: c_char ; 10usize] , pub orduserId : [:: std :: os :: raw :: c_char ; 16usize] , pub brwmgmtYn : [:: std :: os :: raw :: c_char ; 1usize] , pub frgrunqno : [:: std :: os :: raw :: c_char ; 6usize] , pub trtzxLevytp : [:: std :: os :: raw :: c_char ; 1usize] , pub lptp : [:: std :: os :: raw :: c_char ; 1usize] , pub exectime : [:: std :: os :: raw :: c_char ; 9usize] , pub rcptexectime : [:: std :: os :: raw :: c_char ; 9usize] , pub rmndLoanamt : [:: std :: os :: raw :: c_char ; 16usize] , pub secbalqty : [:: std :: os :: raw :: c_char ; 16usize] , pub spotordableqty : [:: std :: os :: raw :: c_char ; 16usize] , pub ordableruseqty : [:: std :: os :: raw :: c_char ; 16usize] , pub flctqty : [:: std :: os :: raw :: c_char ; 16usize] , pub secbalqtyd2 : [:: std :: os :: raw :: c_char ; 16usize] , pub sellableqty : [:: std :: os :: raw :: c_char ; 16usize] , pub unercsellordqty : [:: std :: os :: raw :: c_char ; 16usize] , pub avrpchsprc : [:: std :: os :: raw :: c_char ; 13usize] , pub pchsant : [:: std :: os :: raw :: c_char ; 16usize] , pub deposit : [:: std :: os :: raw :: c_char ; 16usize] , pub substamt : [:: std :: os :: raw :: c_char ; 16usize] , pub csgnmnymgn : [:: std :: os :: raw :: c_char ; 16usize] , pub csgnsubstmgn : [:: std :: os :: raw :: c_char ; 16usize] , pub crdtpldgruseamt : [:: std :: os :: raw :: c_char ; 16usize] , pub ordablemny : [:: std :: os :: raw :: c_char ; 16usize] , pub ordablesubstamt : [:: std :: os :: raw :: c_char ; 16usize] , pub ruseableamt : [:: std :: os :: raw :: c_char ; 16usize] , } # [test] fn bindgen_test_layout_SC1_OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < SC1_OutBlock > () , 1329usize , concat ! ("Size of: " , stringify ! (SC1_OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < SC1_OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (SC1_OutBlock))) ; fn test_field_lineseq () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lineseq) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (lineseq))) ; } test_field_lineseq () ; fn test_field_accno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . accno) as usize - ptr as usize } , 10usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (accno))) ; } test_field_accno () ; fn test_field_user () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . user) as usize - ptr as usize } , 21usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (user))) ; } test_field_user () ; fn test_field_len () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . len) as usize - ptr as usize } , 29usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (len))) ; } test_field_len () ; fn test_field_gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . gubun) as usize - ptr as usize } , 35usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (gubun))) ; } test_field_gubun () ; fn test_field_compress () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . compress) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (compress))) ; } test_field_compress () ; fn test_field_encrypt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . encrypt) as usize - ptr as usize } , 37usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (encrypt))) ; } test_field_encrypt () ; fn test_field_offset () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offset) as usize - ptr as usize } , 38usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (offset))) ; } test_field_offset () ; fn test_field_trcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . trcode) as usize - ptr as usize } , 41usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (trcode))) ; } test_field_trcode () ; fn test_field_compid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . compid) as usize - ptr as usize } , 49usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (compid))) ; } test_field_compid () ; fn test_field_userid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . userid) as usize - ptr as usize } , 52usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (userid))) ; } test_field_userid () ; fn test_field_media () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . media) as usize - ptr as usize } , 68usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (media))) ; } test_field_media () ; fn test_field_ifid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ifid) as usize - ptr as usize } , 70usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (ifid))) ; } test_field_ifid () ; fn test_field_seq () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . seq) as usize - ptr as usize } , 73usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (seq))) ; } test_field_seq () ; fn test_field_trid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . trid) as usize - ptr as usize } , 82usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (trid))) ; } test_field_trid () ; fn test_field_pubip () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . pubip) as usize - ptr as usize } , 98usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (pubip))) ; } test_field_pubip () ; fn test_field_prvip () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prvip) as usize - ptr as usize } , 110usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (prvip))) ; } test_field_prvip () ; fn test_field_pcbpno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . pcbpno) as usize - ptr as usize } , 122usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (pcbpno))) ; } test_field_pcbpno () ; fn test_field_bpno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bpno) as usize - ptr as usize } , 125usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (bpno))) ; } test_field_bpno () ; fn test_field_termno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . termno) as usize - ptr as usize } , 128usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (termno))) ; } test_field_termno () ; fn test_field_lang () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lang) as usize - ptr as usize } , 136usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (lang))) ; } test_field_lang () ; fn test_field_proctm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . proctm) as usize - ptr as usize } , 137usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (proctm))) ; } test_field_proctm () ; fn test_field_msgcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . msgcode) as usize - ptr as usize } , 146usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (msgcode))) ; } test_field_msgcode () ; fn test_field_outgu () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . outgu) as usize - ptr as usize } , 150usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (outgu))) ; } test_field_outgu () ; fn test_field_compreq () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . compreq) as usize - ptr as usize } , 151usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (compreq))) ; } test_field_compreq () ; fn test_field_funckey () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . funckey) as usize - ptr as usize } , 152usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (funckey))) ; } test_field_funckey () ; fn test_field_reqcnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . reqcnt) as usize - ptr as usize } , 156usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (reqcnt))) ; } test_field_reqcnt () ; fn test_field_filler () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . filler) as usize - ptr as usize } , 160usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (filler))) ; } test_field_filler () ; fn test_field_cont () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cont) as usize - ptr as usize } , 166usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (cont))) ; } test_field_cont () ; fn test_field_contkey () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . contkey) as usize - ptr as usize } , 167usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (contkey))) ; } test_field_contkey () ; fn test_field_varlen () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . varlen) as usize - ptr as usize } , 185usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (varlen))) ; } test_field_varlen () ; fn test_field_varhdlen () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . varhdlen) as usize - ptr as usize } , 187usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (varhdlen))) ; } test_field_varhdlen () ; fn test_field_varmsglen () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . varmsglen) as usize - ptr as usize } , 189usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (varmsglen))) ; } test_field_varmsglen () ; fn test_field_trsrc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . trsrc) as usize - ptr as usize } , 191usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (trsrc))) ; } test_field_trsrc () ; fn test_field_eventid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . eventid) as usize - ptr as usize } , 192usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (eventid))) ; } test_field_eventid () ; fn test_field_ifinfo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ifinfo) as usize - ptr as usize } , 196usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (ifinfo))) ; } test_field_ifinfo () ; fn test_field_filler1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . filler1) as usize - ptr as usize } , 200usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (filler1))) ; } test_field_filler1 () ; fn test_field_ordxctptncode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordxctptncode) as usize - ptr as usize } , 241usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (ordxctptncode))) ; } test_field_ordxctptncode () ; fn test_field_ordmktcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordmktcode) as usize - ptr as usize } , 243usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (ordmktcode))) ; } test_field_ordmktcode () ; fn test_field_ordptncode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordptncode) as usize - ptr as usize } , 245usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (ordptncode))) ; } test_field_ordptncode () ; fn test_field_mgmtbrnno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mgmtbrnno) as usize - ptr as usize } , 247usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (mgmtbrnno))) ; } test_field_mgmtbrnno () ; fn test_field_accno1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . accno1) as usize - ptr as usize } , 250usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (accno1))) ; } test_field_accno1 () ; fn test_field_accno2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . accno2) as usize - ptr as usize } , 261usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (accno2))) ; } test_field_accno2 () ; fn test_field_acntnm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . acntnm) as usize - ptr as usize } , 270usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (acntnm))) ; } test_field_acntnm () ; fn test_field_Isuno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Isuno) as usize - ptr as usize } , 310usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (Isuno))) ; } test_field_Isuno () ; fn test_field_Isunm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Isunm) as usize - ptr as usize } , 322usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (Isunm))) ; } test_field_Isunm () ; fn test_field_ordno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordno) as usize - ptr as usize } , 362usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (ordno))) ; } test_field_ordno () ; fn test_field_orgordno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . orgordno) as usize - ptr as usize } , 372usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (orgordno))) ; } test_field_orgordno () ; fn test_field_execno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . execno) as usize - ptr as usize } , 382usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (execno))) ; } test_field_execno () ; fn test_field_ordqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordqty) as usize - ptr as usize } , 392usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (ordqty))) ; } test_field_ordqty () ; fn test_field_ordprc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordprc) as usize - ptr as usize } , 408usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (ordprc))) ; } test_field_ordprc () ; fn test_field_execqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . execqty) as usize - ptr as usize } , 421usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (execqty))) ; } test_field_execqty () ; fn test_field_execprc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . execprc) as usize - ptr as usize } , 437usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (execprc))) ; } test_field_execprc () ; fn test_field_mdfycnfqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mdfycnfqty) as usize - ptr as usize } , 450usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (mdfycnfqty))) ; } test_field_mdfycnfqty () ; fn test_field_mdfycnfprc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mdfycnfprc) as usize - ptr as usize } , 466usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (mdfycnfprc))) ; } test_field_mdfycnfprc () ; fn test_field_canccnfqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . canccnfqty) as usize - ptr as usize } , 482usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (canccnfqty))) ; } test_field_canccnfqty () ; fn test_field_rjtqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . rjtqty) as usize - ptr as usize } , 498usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (rjtqty))) ; } test_field_rjtqty () ; fn test_field_ordtrxptncode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordtrxptncode) as usize - ptr as usize } , 514usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (ordtrxptncode))) ; } test_field_ordtrxptncode () ; fn test_field_mtiordseqno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mtiordseqno) as usize - ptr as usize } , 518usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (mtiordseqno))) ; } test_field_mtiordseqno () ; fn test_field_ordcndi () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordcndi) as usize - ptr as usize } , 528usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (ordcndi))) ; } test_field_ordcndi () ; fn test_field_ordprcptncode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordprcptncode) as usize - ptr as usize } , 529usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (ordprcptncode))) ; } test_field_ordprcptncode () ; fn test_field_nsavtrdqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . nsavtrdqty) as usize - ptr as usize } , 531usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (nsavtrdqty))) ; } test_field_nsavtrdqty () ; fn test_field_shtnIsuno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shtnIsuno) as usize - ptr as usize } , 547usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (shtnIsuno))) ; } test_field_shtnIsuno () ; fn test_field_opdrtnno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . opdrtnno) as usize - ptr as usize } , 556usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (opdrtnno))) ; } test_field_opdrtnno () ; fn test_field_cvrgordtp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cvrgordtp) as usize - ptr as usize } , 568usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (cvrgordtp))) ; } test_field_cvrgordtp () ; fn test_field_unercqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . unercqty) as usize - ptr as usize } , 569usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (unercqty))) ; } test_field_unercqty () ; fn test_field_orgordunercqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . orgordunercqty) as usize - ptr as usize } , 585usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (orgordunercqty))) ; } test_field_orgordunercqty () ; fn test_field_orgordmdfyqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . orgordmdfyqty) as usize - ptr as usize } , 601usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (orgordmdfyqty))) ; } test_field_orgordmdfyqty () ; fn test_field_orgordcancqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . orgordcancqty) as usize - ptr as usize } , 617usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (orgordcancqty))) ; } test_field_orgordcancqty () ; fn test_field_ordavrexecprc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordavrexecprc) as usize - ptr as usize } , 633usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (ordavrexecprc))) ; } test_field_ordavrexecprc () ; fn test_field_ordamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordamt) as usize - ptr as usize } , 646usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (ordamt))) ; } test_field_ordamt () ; fn test_field_stdIsuno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . stdIsuno) as usize - ptr as usize } , 662usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (stdIsuno))) ; } test_field_stdIsuno () ; fn test_field_bfstdIsuno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bfstdIsuno) as usize - ptr as usize } , 674usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (bfstdIsuno))) ; } test_field_bfstdIsuno () ; fn test_field_bnstp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bnstp) as usize - ptr as usize } , 686usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (bnstp))) ; } test_field_bnstp () ; fn test_field_ordtrdptncode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordtrdptncode) as usize - ptr as usize } , 687usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (ordtrdptncode))) ; } test_field_ordtrdptncode () ; fn test_field_mgntrncode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mgntrncode) as usize - ptr as usize } , 689usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (mgntrncode))) ; } test_field_mgntrncode () ; fn test_field_adduptp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . adduptp) as usize - ptr as usize } , 692usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (adduptp))) ; } test_field_adduptp () ; fn test_field_commdacode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . commdacode) as usize - ptr as usize } , 694usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (commdacode))) ; } test_field_commdacode () ; fn test_field_Loandt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Loandt) as usize - ptr as usize } , 696usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (Loandt))) ; } test_field_Loandt () ; fn test_field_mbrnmbrno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mbrnmbrno) as usize - ptr as usize } , 704usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (mbrnmbrno))) ; } test_field_mbrnmbrno () ; fn test_field_ordacntno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordacntno) as usize - ptr as usize } , 707usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (ordacntno))) ; } test_field_ordacntno () ; fn test_field_agrgbrnno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . agrgbrnno) as usize - ptr as usize } , 727usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (agrgbrnno))) ; } test_field_agrgbrnno () ; fn test_field_mgempno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mgempno) as usize - ptr as usize } , 730usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (mgempno))) ; } test_field_mgempno () ; fn test_field_futsLnkbrnno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . futsLnkbrnno) as usize - ptr as usize } , 739usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (futsLnkbrnno))) ; } test_field_futsLnkbrnno () ; fn test_field_futsLnkacntno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . futsLnkacntno) as usize - ptr as usize } , 742usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (futsLnkacntno))) ; } test_field_futsLnkacntno () ; fn test_field_futsmkttp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . futsmkttp) as usize - ptr as usize } , 762usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (futsmkttp))) ; } test_field_futsmkttp () ; fn test_field_regmktcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . regmktcode) as usize - ptr as usize } , 763usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (regmktcode))) ; } test_field_regmktcode () ; fn test_field_mnymgnrat () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mnymgnrat) as usize - ptr as usize } , 765usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (mnymgnrat))) ; } test_field_mnymgnrat () ; fn test_field_substmgnrat () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . substmgnrat) as usize - ptr as usize } , 772usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (substmgnrat))) ; } test_field_substmgnrat () ; fn test_field_mnyexecamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mnyexecamt) as usize - ptr as usize } , 781usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (mnyexecamt))) ; } test_field_mnyexecamt () ; fn test_field_ubstexecamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ubstexecamt) as usize - ptr as usize } , 797usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (ubstexecamt))) ; } test_field_ubstexecamt () ; fn test_field_cmsnamtexecamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cmsnamtexecamt) as usize - ptr as usize } , 813usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (cmsnamtexecamt))) ; } test_field_cmsnamtexecamt () ; fn test_field_crdtpldgexecamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . crdtpldgexecamt) as usize - ptr as usize } , 829usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (crdtpldgexecamt))) ; } test_field_crdtpldgexecamt () ; fn test_field_crdtexecamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . crdtexecamt) as usize - ptr as usize } , 845usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (crdtexecamt))) ; } test_field_crdtexecamt () ; fn test_field_prdayruseexecval () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prdayruseexecval) as usize - ptr as usize } , 861usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (prdayruseexecval))) ; } test_field_prdayruseexecval () ; fn test_field_crdayruseexecval () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . crdayruseexecval) as usize - ptr as usize } , 877usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (crdayruseexecval))) ; } test_field_crdayruseexecval () ; fn test_field_spotexecqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . spotexecqty) as usize - ptr as usize } , 893usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (spotexecqty))) ; } test_field_spotexecqty () ; fn test_field_stslexecqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . stslexecqty) as usize - ptr as usize } , 909usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (stslexecqty))) ; } test_field_stslexecqty () ; fn test_field_strtgcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . strtgcode) as usize - ptr as usize } , 925usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (strtgcode))) ; } test_field_strtgcode () ; fn test_field_grpId () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . grpId) as usize - ptr as usize } , 931usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (grpId))) ; } test_field_grpId () ; fn test_field_ordseqno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordseqno) as usize - ptr as usize } , 951usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (ordseqno))) ; } test_field_ordseqno () ; fn test_field_ptflno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ptflno) as usize - ptr as usize } , 961usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (ptflno))) ; } test_field_ptflno () ; fn test_field_bskno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bskno) as usize - ptr as usize } , 971usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (bskno))) ; } test_field_bskno () ; fn test_field_trchno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . trchno) as usize - ptr as usize } , 981usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (trchno))) ; } test_field_trchno () ; fn test_field_itemno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . itemno) as usize - ptr as usize } , 991usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (itemno))) ; } test_field_itemno () ; fn test_field_orduserId () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . orduserId) as usize - ptr as usize } , 1001usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (orduserId))) ; } test_field_orduserId () ; fn test_field_brwmgmtYn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . brwmgmtYn) as usize - ptr as usize } , 1017usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (brwmgmtYn))) ; } test_field_brwmgmtYn () ; fn test_field_frgrunqno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . frgrunqno) as usize - ptr as usize } , 1018usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (frgrunqno))) ; } test_field_frgrunqno () ; fn test_field_trtzxLevytp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . trtzxLevytp) as usize - ptr as usize } , 1024usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (trtzxLevytp))) ; } test_field_trtzxLevytp () ; fn test_field_lptp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lptp) as usize - ptr as usize } , 1025usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (lptp))) ; } test_field_lptp () ; fn test_field_exectime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . exectime) as usize - ptr as usize } , 1026usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (exectime))) ; } test_field_exectime () ; fn test_field_rcptexectime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . rcptexectime) as usize - ptr as usize } , 1035usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (rcptexectime))) ; } test_field_rcptexectime () ; fn test_field_rmndLoanamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . rmndLoanamt) as usize - ptr as usize } , 1044usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (rmndLoanamt))) ; } test_field_rmndLoanamt () ; fn test_field_secbalqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . secbalqty) as usize - ptr as usize } , 1060usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (secbalqty))) ; } test_field_secbalqty () ; fn test_field_spotordableqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . spotordableqty) as usize - ptr as usize } , 1076usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (spotordableqty))) ; } test_field_spotordableqty () ; fn test_field_ordableruseqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordableruseqty) as usize - ptr as usize } , 1092usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (ordableruseqty))) ; } test_field_ordableruseqty () ; fn test_field_flctqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . flctqty) as usize - ptr as usize } , 1108usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (flctqty))) ; } test_field_flctqty () ; fn test_field_secbalqtyd2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . secbalqtyd2) as usize - ptr as usize } , 1124usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (secbalqtyd2))) ; } test_field_secbalqtyd2 () ; fn test_field_sellableqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sellableqty) as usize - ptr as usize } , 1140usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (sellableqty))) ; } test_field_sellableqty () ; fn test_field_unercsellordqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . unercsellordqty) as usize - ptr as usize } , 1156usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (unercsellordqty))) ; } test_field_unercsellordqty () ; fn test_field_avrpchsprc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . avrpchsprc) as usize - ptr as usize } , 1172usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (avrpchsprc))) ; } test_field_avrpchsprc () ; fn test_field_pchsant () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . pchsant) as usize - ptr as usize } , 1185usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (pchsant))) ; } test_field_pchsant () ; fn test_field_deposit () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . deposit) as usize - ptr as usize } , 1201usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (deposit))) ; } test_field_deposit () ; fn test_field_substamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . substamt) as usize - ptr as usize } , 1217usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (substamt))) ; } test_field_substamt () ; fn test_field_csgnmnymgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . csgnmnymgn) as usize - ptr as usize } , 1233usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (csgnmnymgn))) ; } test_field_csgnmnymgn () ; fn test_field_csgnsubstmgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . csgnsubstmgn) as usize - ptr as usize } , 1249usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (csgnsubstmgn))) ; } test_field_csgnsubstmgn () ; fn test_field_crdtpldgruseamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . crdtpldgruseamt) as usize - ptr as usize } , 1265usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (crdtpldgruseamt))) ; } test_field_crdtpldgruseamt () ; fn test_field_ordablemny () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordablemny) as usize - ptr as usize } , 1281usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (ordablemny))) ; } test_field_ordablemny () ; fn test_field_ordablesubstamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordablesubstamt) as usize - ptr as usize } , 1297usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (ordablesubstamt))) ; } test_field_ordablesubstamt () ; fn test_field_ruseableamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ruseableamt) as usize - ptr as usize } , 1313usize , concat ! ("Offset of field: " , stringify ! (SC1_OutBlock) , "::" , stringify ! (ruseableamt))) ; } test_field_ruseableamt () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _SC2_OutBlock { pub lineseq : [:: std :: os :: raw :: c_char ; 10usize] , pub accno : [:: std :: os :: raw :: c_char ; 11usize] , pub user : [:: std :: os :: raw :: c_char ; 8usize] , pub len : [:: std :: os :: raw :: c_char ; 6usize] , pub gubun : [:: std :: os :: raw :: c_char ; 1usize] , pub compress : [:: std :: os :: raw :: c_char ; 1usize] , pub encrypt : [:: std :: os :: raw :: c_char ; 1usize] , pub offset : [:: std :: os :: raw :: c_char ; 3usize] , pub trcode : [:: std :: os :: raw :: c_char ; 8usize] , pub compid : [:: std :: os :: raw :: c_char ; 3usize] , pub userid : [:: std :: os :: raw :: c_char ; 16usize] , pub media : [:: std :: os :: raw :: c_char ; 2usize] , pub ifid : [:: std :: os :: raw :: c_char ; 3usize] , pub seq : [:: std :: os :: raw :: c_char ; 9usize] , pub trid : [:: std :: os :: raw :: c_char ; 16usize] , pub pubip : [:: std :: os :: raw :: c_char ; 12usize] , pub prvip : [:: std :: os :: raw :: c_char ; 12usize] , pub pcbpno : [:: std :: os :: raw :: c_char ; 3usize] , pub bpno : [:: std :: os :: raw :: c_char ; 3usize] , pub termno : [:: std :: os :: raw :: c_char ; 8usize] , pub lang : [:: std :: os :: raw :: c_char ; 1usize] , pub proctm : [:: std :: os :: raw :: c_char ; 9usize] , pub msgcode : [:: std :: os :: raw :: c_char ; 4usize] , pub outgu : [:: std :: os :: raw :: c_char ; 1usize] , pub compreq : [:: std :: os :: raw :: c_char ; 1usize] , pub funckey : [:: std :: os :: raw :: c_char ; 4usize] , pub reqcnt : [:: std :: os :: raw :: c_char ; 4usize] , pub filler : [:: std :: os :: raw :: c_char ; 6usize] , pub cont : [:: std :: os :: raw :: c_char ; 1usize] , pub contkey : [:: std :: os :: raw :: c_char ; 18usize] , pub varlen : [:: std :: os :: raw :: c_char ; 2usize] , pub varhdlen : [:: std :: os :: raw :: c_char ; 2usize] , pub varmsglen : [:: std :: os :: raw :: c_char ; 2usize] , pub trsrc : [:: std :: os :: raw :: c_char ; 1usize] , pub eventid : [:: std :: os :: raw :: c_char ; 4usize] , pub ifinfo : [:: std :: os :: raw :: c_char ; 4usize] , pub filler1 : [:: std :: os :: raw :: c_char ; 41usize] , pub ordxctptncode : [:: std :: os :: raw :: c_char ; 2usize] , pub ordmktcode : [:: std :: os :: raw :: c_char ; 2usize] , pub ordptncode : [:: std :: os :: raw :: c_char ; 2usize] , pub mgmtbrnno : [:: std :: os :: raw :: c_char ; 3usize] , pub accno1 : [:: std :: os :: raw :: c_char ; 11usize] , pub accno2 : [:: std :: os :: raw :: c_char ; 9usize] , pub acntnm : [:: std :: os :: raw :: c_char ; 40usize] , pub Isuno : [:: std :: os :: raw :: c_char ; 12usize] , pub Isunm : [:: std :: os :: raw :: c_char ; 40usize] , pub ordno : [:: std :: os :: raw :: c_char ; 10usize] , pub orgordno : [:: std :: os :: raw :: c_char ; 10usize] , pub execno : [:: std :: os :: raw :: c_char ; 10usize] , pub ordqty : [:: std :: os :: raw :: c_char ; 16usize] , pub ordprc : [:: std :: os :: raw :: c_char ; 13usize] , pub execqty : [:: std :: os :: raw :: c_char ; 16usize] , pub execprc : [:: std :: os :: raw :: c_char ; 13usize] , pub mdfycnfqty : [:: std :: os :: raw :: c_char ; 16usize] , pub mdfycnfprc : [:: std :: os :: raw :: c_char ; 16usize] , pub canccnfqty : [:: std :: os :: raw :: c_char ; 16usize] , pub rjtqty : [:: std :: os :: raw :: c_char ; 16usize] , pub ordtrxptncode : [:: std :: os :: raw :: c_char ; 4usize] , pub mtiordseqno : [:: std :: os :: raw :: c_char ; 10usize] , pub ordcndi : [:: std :: os :: raw :: c_char ; 1usize] , pub ordprcptncode : [:: std :: os :: raw :: c_char ; 2usize] , pub nsavtrdqty : [:: std :: os :: raw :: c_char ; 16usize] , pub shtnIsuno : [:: std :: os :: raw :: c_char ; 9usize] , pub opdrtnno : [:: std :: os :: raw :: c_char ; 12usize] , pub cvrgordtp : [:: std :: os :: raw :: c_char ; 1usize] , pub unercqty : [:: std :: os :: raw :: c_char ; 16usize] , pub orgordunercqty : [:: std :: os :: raw :: c_char ; 16usize] , pub orgordmdfyqty : [:: std :: os :: raw :: c_char ; 16usize] , pub orgordcancqty : [:: std :: os :: raw :: c_char ; 16usize] , pub ordavrexecprc : [:: std :: os :: raw :: c_char ; 13usize] , pub ordamt : [:: std :: os :: raw :: c_char ; 16usize] , pub stdIsuno : [:: std :: os :: raw :: c_char ; 12usize] , pub bfstdIsuno : [:: std :: os :: raw :: c_char ; 12usize] , pub bnstp : [:: std :: os :: raw :: c_char ; 1usize] , pub ordtrdptncode : [:: std :: os :: raw :: c_char ; 2usize] , pub mgntrncode : [:: std :: os :: raw :: c_char ; 3usize] , pub adduptp : [:: std :: os :: raw :: c_char ; 2usize] , pub commdacode : [:: std :: os :: raw :: c_char ; 2usize] , pub Loandt : [:: std :: os :: raw :: c_char ; 8usize] , pub mbrnmbrno : [:: std :: os :: raw :: c_char ; 3usize] , pub ordacntno : [:: std :: os :: raw :: c_char ; 20usize] , pub agrgbrnno : [:: std :: os :: raw :: c_char ; 3usize] , pub mgempno : [:: std :: os :: raw :: c_char ; 9usize] , pub futsLnkbrnno : [:: std :: os :: raw :: c_char ; 3usize] , pub futsLnkacntno : [:: std :: os :: raw :: c_char ; 20usize] , pub futsmkttp : [:: std :: os :: raw :: c_char ; 1usize] , pub regmktcode : [:: std :: os :: raw :: c_char ; 2usize] , pub mnymgnrat : [:: std :: os :: raw :: c_char ; 7usize] , pub substmgnrat : [:: std :: os :: raw :: c_char ; 9usize] , pub mnyexecamt : [:: std :: os :: raw :: c_char ; 16usize] , pub ubstexecamt : [:: std :: os :: raw :: c_char ; 16usize] , pub cmsnamtexecamt : [:: std :: os :: raw :: c_char ; 16usize] , pub crdtpldgexecamt : [:: std :: os :: raw :: c_char ; 16usize] , pub crdtexecamt : [:: std :: os :: raw :: c_char ; 16usize] , pub prdayruseexecval : [:: std :: os :: raw :: c_char ; 16usize] , pub crdayruseexecval : [:: std :: os :: raw :: c_char ; 16usize] , pub spotexecqty : [:: std :: os :: raw :: c_char ; 16usize] , pub stslexecqty : [:: std :: os :: raw :: c_char ; 16usize] , pub strtgcode : [:: std :: os :: raw :: c_char ; 6usize] , pub grpId : [:: std :: os :: raw :: c_char ; 20usize] , pub ordseqno : [:: std :: os :: raw :: c_char ; 10usize] , pub ptflno : [:: std :: os :: raw :: c_char ; 10usize] , pub bskno : [:: std :: os :: raw :: c_char ; 10usize] , pub trchno : [:: std :: os :: raw :: c_char ; 10usize] , pub itemno : [:: std :: os :: raw :: c_char ; 10usize] , pub orduserId : [:: std :: os :: raw :: c_char ; 16usize] , pub brwmgmtYn : [:: std :: os :: raw :: c_char ; 1usize] , pub frgrunqno : [:: std :: os :: raw :: c_char ; 6usize] , pub trtzxLevytp : [:: std :: os :: raw :: c_char ; 1usize] , pub lptp : [:: std :: os :: raw :: c_char ; 1usize] , pub exectime : [:: std :: os :: raw :: c_char ; 9usize] , pub rcptexectime : [:: std :: os :: raw :: c_char ; 9usize] , pub rmndLoanamt : [:: std :: os :: raw :: c_char ; 16usize] , pub secbalqty : [:: std :: os :: raw :: c_char ; 16usize] , pub spotordableqty : [:: std :: os :: raw :: c_char ; 16usize] , pub ordableruseqty : [:: std :: os :: raw :: c_char ; 16usize] , pub flctqty : [:: std :: os :: raw :: c_char ; 16usize] , pub secbalqtyd2 : [:: std :: os :: raw :: c_char ; 16usize] , pub sellableqty : [:: std :: os :: raw :: c_char ; 16usize] , pub unercsellordqty : [:: std :: os :: raw :: c_char ; 16usize] , pub avrpchsprc : [:: std :: os :: raw :: c_char ; 13usize] , pub pchsant : [:: std :: os :: raw :: c_char ; 16usize] , pub deposit : [:: std :: os :: raw :: c_char ; 16usize] , pub substamt : [:: std :: os :: raw :: c_char ; 16usize] , pub csgnmnymgn : [:: std :: os :: raw :: c_char ; 16usize] , pub csgnsubstmgn : [:: std :: os :: raw :: c_char ; 16usize] , pub crdtpldgruseamt : [:: std :: os :: raw :: c_char ; 16usize] , pub ordablemny : [:: std :: os :: raw :: c_char ; 16usize] , pub ordablesubstamt : [:: std :: os :: raw :: c_char ; 16usize] , pub ruseableamt : [:: std :: os :: raw :: c_char ; 16usize] , } # [test] fn bindgen_test_layout__SC2_OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < _SC2_OutBlock > () , 1329usize , concat ! ("Size of: " , stringify ! (_SC2_OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < _SC2_OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (_SC2_OutBlock))) ; fn test_field_lineseq () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lineseq) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (lineseq))) ; } test_field_lineseq () ; fn test_field_accno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . accno) as usize - ptr as usize } , 10usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (accno))) ; } test_field_accno () ; fn test_field_user () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . user) as usize - ptr as usize } , 21usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (user))) ; } test_field_user () ; fn test_field_len () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . len) as usize - ptr as usize } , 29usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (len))) ; } test_field_len () ; fn test_field_gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . gubun) as usize - ptr as usize } , 35usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (gubun))) ; } test_field_gubun () ; fn test_field_compress () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . compress) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (compress))) ; } test_field_compress () ; fn test_field_encrypt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . encrypt) as usize - ptr as usize } , 37usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (encrypt))) ; } test_field_encrypt () ; fn test_field_offset () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offset) as usize - ptr as usize } , 38usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (offset))) ; } test_field_offset () ; fn test_field_trcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . trcode) as usize - ptr as usize } , 41usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (trcode))) ; } test_field_trcode () ; fn test_field_compid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . compid) as usize - ptr as usize } , 49usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (compid))) ; } test_field_compid () ; fn test_field_userid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . userid) as usize - ptr as usize } , 52usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (userid))) ; } test_field_userid () ; fn test_field_media () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . media) as usize - ptr as usize } , 68usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (media))) ; } test_field_media () ; fn test_field_ifid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ifid) as usize - ptr as usize } , 70usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (ifid))) ; } test_field_ifid () ; fn test_field_seq () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . seq) as usize - ptr as usize } , 73usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (seq))) ; } test_field_seq () ; fn test_field_trid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . trid) as usize - ptr as usize } , 82usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (trid))) ; } test_field_trid () ; fn test_field_pubip () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . pubip) as usize - ptr as usize } , 98usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (pubip))) ; } test_field_pubip () ; fn test_field_prvip () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prvip) as usize - ptr as usize } , 110usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (prvip))) ; } test_field_prvip () ; fn test_field_pcbpno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . pcbpno) as usize - ptr as usize } , 122usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (pcbpno))) ; } test_field_pcbpno () ; fn test_field_bpno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bpno) as usize - ptr as usize } , 125usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (bpno))) ; } test_field_bpno () ; fn test_field_termno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . termno) as usize - ptr as usize } , 128usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (termno))) ; } test_field_termno () ; fn test_field_lang () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lang) as usize - ptr as usize } , 136usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (lang))) ; } test_field_lang () ; fn test_field_proctm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . proctm) as usize - ptr as usize } , 137usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (proctm))) ; } test_field_proctm () ; fn test_field_msgcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . msgcode) as usize - ptr as usize } , 146usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (msgcode))) ; } test_field_msgcode () ; fn test_field_outgu () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . outgu) as usize - ptr as usize } , 150usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (outgu))) ; } test_field_outgu () ; fn test_field_compreq () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . compreq) as usize - ptr as usize } , 151usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (compreq))) ; } test_field_compreq () ; fn test_field_funckey () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . funckey) as usize - ptr as usize } , 152usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (funckey))) ; } test_field_funckey () ; fn test_field_reqcnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . reqcnt) as usize - ptr as usize } , 156usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (reqcnt))) ; } test_field_reqcnt () ; fn test_field_filler () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . filler) as usize - ptr as usize } , 160usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (filler))) ; } test_field_filler () ; fn test_field_cont () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cont) as usize - ptr as usize } , 166usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (cont))) ; } test_field_cont () ; fn test_field_contkey () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . contkey) as usize - ptr as usize } , 167usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (contkey))) ; } test_field_contkey () ; fn test_field_varlen () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . varlen) as usize - ptr as usize } , 185usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (varlen))) ; } test_field_varlen () ; fn test_field_varhdlen () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . varhdlen) as usize - ptr as usize } , 187usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (varhdlen))) ; } test_field_varhdlen () ; fn test_field_varmsglen () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . varmsglen) as usize - ptr as usize } , 189usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (varmsglen))) ; } test_field_varmsglen () ; fn test_field_trsrc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . trsrc) as usize - ptr as usize } , 191usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (trsrc))) ; } test_field_trsrc () ; fn test_field_eventid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . eventid) as usize - ptr as usize } , 192usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (eventid))) ; } test_field_eventid () ; fn test_field_ifinfo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ifinfo) as usize - ptr as usize } , 196usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (ifinfo))) ; } test_field_ifinfo () ; fn test_field_filler1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . filler1) as usize - ptr as usize } , 200usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (filler1))) ; } test_field_filler1 () ; fn test_field_ordxctptncode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordxctptncode) as usize - ptr as usize } , 241usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (ordxctptncode))) ; } test_field_ordxctptncode () ; fn test_field_ordmktcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordmktcode) as usize - ptr as usize } , 243usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (ordmktcode))) ; } test_field_ordmktcode () ; fn test_field_ordptncode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordptncode) as usize - ptr as usize } , 245usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (ordptncode))) ; } test_field_ordptncode () ; fn test_field_mgmtbrnno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mgmtbrnno) as usize - ptr as usize } , 247usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (mgmtbrnno))) ; } test_field_mgmtbrnno () ; fn test_field_accno1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . accno1) as usize - ptr as usize } , 250usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (accno1))) ; } test_field_accno1 () ; fn test_field_accno2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . accno2) as usize - ptr as usize } , 261usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (accno2))) ; } test_field_accno2 () ; fn test_field_acntnm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . acntnm) as usize - ptr as usize } , 270usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (acntnm))) ; } test_field_acntnm () ; fn test_field_Isuno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Isuno) as usize - ptr as usize } , 310usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (Isuno))) ; } test_field_Isuno () ; fn test_field_Isunm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Isunm) as usize - ptr as usize } , 322usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (Isunm))) ; } test_field_Isunm () ; fn test_field_ordno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordno) as usize - ptr as usize } , 362usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (ordno))) ; } test_field_ordno () ; fn test_field_orgordno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . orgordno) as usize - ptr as usize } , 372usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (orgordno))) ; } test_field_orgordno () ; fn test_field_execno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . execno) as usize - ptr as usize } , 382usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (execno))) ; } test_field_execno () ; fn test_field_ordqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordqty) as usize - ptr as usize } , 392usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (ordqty))) ; } test_field_ordqty () ; fn test_field_ordprc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordprc) as usize - ptr as usize } , 408usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (ordprc))) ; } test_field_ordprc () ; fn test_field_execqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . execqty) as usize - ptr as usize } , 421usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (execqty))) ; } test_field_execqty () ; fn test_field_execprc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . execprc) as usize - ptr as usize } , 437usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (execprc))) ; } test_field_execprc () ; fn test_field_mdfycnfqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mdfycnfqty) as usize - ptr as usize } , 450usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (mdfycnfqty))) ; } test_field_mdfycnfqty () ; fn test_field_mdfycnfprc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mdfycnfprc) as usize - ptr as usize } , 466usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (mdfycnfprc))) ; } test_field_mdfycnfprc () ; fn test_field_canccnfqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . canccnfqty) as usize - ptr as usize } , 482usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (canccnfqty))) ; } test_field_canccnfqty () ; fn test_field_rjtqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . rjtqty) as usize - ptr as usize } , 498usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (rjtqty))) ; } test_field_rjtqty () ; fn test_field_ordtrxptncode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordtrxptncode) as usize - ptr as usize } , 514usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (ordtrxptncode))) ; } test_field_ordtrxptncode () ; fn test_field_mtiordseqno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mtiordseqno) as usize - ptr as usize } , 518usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (mtiordseqno))) ; } test_field_mtiordseqno () ; fn test_field_ordcndi () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordcndi) as usize - ptr as usize } , 528usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (ordcndi))) ; } test_field_ordcndi () ; fn test_field_ordprcptncode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordprcptncode) as usize - ptr as usize } , 529usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (ordprcptncode))) ; } test_field_ordprcptncode () ; fn test_field_nsavtrdqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . nsavtrdqty) as usize - ptr as usize } , 531usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (nsavtrdqty))) ; } test_field_nsavtrdqty () ; fn test_field_shtnIsuno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shtnIsuno) as usize - ptr as usize } , 547usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (shtnIsuno))) ; } test_field_shtnIsuno () ; fn test_field_opdrtnno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . opdrtnno) as usize - ptr as usize } , 556usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (opdrtnno))) ; } test_field_opdrtnno () ; fn test_field_cvrgordtp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cvrgordtp) as usize - ptr as usize } , 568usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (cvrgordtp))) ; } test_field_cvrgordtp () ; fn test_field_unercqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . unercqty) as usize - ptr as usize } , 569usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (unercqty))) ; } test_field_unercqty () ; fn test_field_orgordunercqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . orgordunercqty) as usize - ptr as usize } , 585usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (orgordunercqty))) ; } test_field_orgordunercqty () ; fn test_field_orgordmdfyqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . orgordmdfyqty) as usize - ptr as usize } , 601usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (orgordmdfyqty))) ; } test_field_orgordmdfyqty () ; fn test_field_orgordcancqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . orgordcancqty) as usize - ptr as usize } , 617usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (orgordcancqty))) ; } test_field_orgordcancqty () ; fn test_field_ordavrexecprc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordavrexecprc) as usize - ptr as usize } , 633usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (ordavrexecprc))) ; } test_field_ordavrexecprc () ; fn test_field_ordamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordamt) as usize - ptr as usize } , 646usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (ordamt))) ; } test_field_ordamt () ; fn test_field_stdIsuno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . stdIsuno) as usize - ptr as usize } , 662usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (stdIsuno))) ; } test_field_stdIsuno () ; fn test_field_bfstdIsuno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bfstdIsuno) as usize - ptr as usize } , 674usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (bfstdIsuno))) ; } test_field_bfstdIsuno () ; fn test_field_bnstp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bnstp) as usize - ptr as usize } , 686usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (bnstp))) ; } test_field_bnstp () ; fn test_field_ordtrdptncode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordtrdptncode) as usize - ptr as usize } , 687usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (ordtrdptncode))) ; } test_field_ordtrdptncode () ; fn test_field_mgntrncode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mgntrncode) as usize - ptr as usize } , 689usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (mgntrncode))) ; } test_field_mgntrncode () ; fn test_field_adduptp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . adduptp) as usize - ptr as usize } , 692usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (adduptp))) ; } test_field_adduptp () ; fn test_field_commdacode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . commdacode) as usize - ptr as usize } , 694usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (commdacode))) ; } test_field_commdacode () ; fn test_field_Loandt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Loandt) as usize - ptr as usize } , 696usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (Loandt))) ; } test_field_Loandt () ; fn test_field_mbrnmbrno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mbrnmbrno) as usize - ptr as usize } , 704usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (mbrnmbrno))) ; } test_field_mbrnmbrno () ; fn test_field_ordacntno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordacntno) as usize - ptr as usize } , 707usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (ordacntno))) ; } test_field_ordacntno () ; fn test_field_agrgbrnno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . agrgbrnno) as usize - ptr as usize } , 727usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (agrgbrnno))) ; } test_field_agrgbrnno () ; fn test_field_mgempno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mgempno) as usize - ptr as usize } , 730usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (mgempno))) ; } test_field_mgempno () ; fn test_field_futsLnkbrnno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . futsLnkbrnno) as usize - ptr as usize } , 739usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (futsLnkbrnno))) ; } test_field_futsLnkbrnno () ; fn test_field_futsLnkacntno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . futsLnkacntno) as usize - ptr as usize } , 742usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (futsLnkacntno))) ; } test_field_futsLnkacntno () ; fn test_field_futsmkttp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . futsmkttp) as usize - ptr as usize } , 762usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (futsmkttp))) ; } test_field_futsmkttp () ; fn test_field_regmktcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . regmktcode) as usize - ptr as usize } , 763usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (regmktcode))) ; } test_field_regmktcode () ; fn test_field_mnymgnrat () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mnymgnrat) as usize - ptr as usize } , 765usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (mnymgnrat))) ; } test_field_mnymgnrat () ; fn test_field_substmgnrat () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . substmgnrat) as usize - ptr as usize } , 772usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (substmgnrat))) ; } test_field_substmgnrat () ; fn test_field_mnyexecamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mnyexecamt) as usize - ptr as usize } , 781usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (mnyexecamt))) ; } test_field_mnyexecamt () ; fn test_field_ubstexecamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ubstexecamt) as usize - ptr as usize } , 797usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (ubstexecamt))) ; } test_field_ubstexecamt () ; fn test_field_cmsnamtexecamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cmsnamtexecamt) as usize - ptr as usize } , 813usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (cmsnamtexecamt))) ; } test_field_cmsnamtexecamt () ; fn test_field_crdtpldgexecamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . crdtpldgexecamt) as usize - ptr as usize } , 829usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (crdtpldgexecamt))) ; } test_field_crdtpldgexecamt () ; fn test_field_crdtexecamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . crdtexecamt) as usize - ptr as usize } , 845usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (crdtexecamt))) ; } test_field_crdtexecamt () ; fn test_field_prdayruseexecval () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prdayruseexecval) as usize - ptr as usize } , 861usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (prdayruseexecval))) ; } test_field_prdayruseexecval () ; fn test_field_crdayruseexecval () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . crdayruseexecval) as usize - ptr as usize } , 877usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (crdayruseexecval))) ; } test_field_crdayruseexecval () ; fn test_field_spotexecqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . spotexecqty) as usize - ptr as usize } , 893usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (spotexecqty))) ; } test_field_spotexecqty () ; fn test_field_stslexecqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . stslexecqty) as usize - ptr as usize } , 909usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (stslexecqty))) ; } test_field_stslexecqty () ; fn test_field_strtgcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . strtgcode) as usize - ptr as usize } , 925usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (strtgcode))) ; } test_field_strtgcode () ; fn test_field_grpId () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . grpId) as usize - ptr as usize } , 931usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (grpId))) ; } test_field_grpId () ; fn test_field_ordseqno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordseqno) as usize - ptr as usize } , 951usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (ordseqno))) ; } test_field_ordseqno () ; fn test_field_ptflno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ptflno) as usize - ptr as usize } , 961usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (ptflno))) ; } test_field_ptflno () ; fn test_field_bskno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bskno) as usize - ptr as usize } , 971usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (bskno))) ; } test_field_bskno () ; fn test_field_trchno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . trchno) as usize - ptr as usize } , 981usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (trchno))) ; } test_field_trchno () ; fn test_field_itemno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . itemno) as usize - ptr as usize } , 991usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (itemno))) ; } test_field_itemno () ; fn test_field_orduserId () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . orduserId) as usize - ptr as usize } , 1001usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (orduserId))) ; } test_field_orduserId () ; fn test_field_brwmgmtYn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . brwmgmtYn) as usize - ptr as usize } , 1017usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (brwmgmtYn))) ; } test_field_brwmgmtYn () ; fn test_field_frgrunqno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . frgrunqno) as usize - ptr as usize } , 1018usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (frgrunqno))) ; } test_field_frgrunqno () ; fn test_field_trtzxLevytp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . trtzxLevytp) as usize - ptr as usize } , 1024usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (trtzxLevytp))) ; } test_field_trtzxLevytp () ; fn test_field_lptp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lptp) as usize - ptr as usize } , 1025usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (lptp))) ; } test_field_lptp () ; fn test_field_exectime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . exectime) as usize - ptr as usize } , 1026usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (exectime))) ; } test_field_exectime () ; fn test_field_rcptexectime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . rcptexectime) as usize - ptr as usize } , 1035usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (rcptexectime))) ; } test_field_rcptexectime () ; fn test_field_rmndLoanamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . rmndLoanamt) as usize - ptr as usize } , 1044usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (rmndLoanamt))) ; } test_field_rmndLoanamt () ; fn test_field_secbalqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . secbalqty) as usize - ptr as usize } , 1060usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (secbalqty))) ; } test_field_secbalqty () ; fn test_field_spotordableqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . spotordableqty) as usize - ptr as usize } , 1076usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (spotordableqty))) ; } test_field_spotordableqty () ; fn test_field_ordableruseqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordableruseqty) as usize - ptr as usize } , 1092usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (ordableruseqty))) ; } test_field_ordableruseqty () ; fn test_field_flctqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . flctqty) as usize - ptr as usize } , 1108usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (flctqty))) ; } test_field_flctqty () ; fn test_field_secbalqtyd2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . secbalqtyd2) as usize - ptr as usize } , 1124usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (secbalqtyd2))) ; } test_field_secbalqtyd2 () ; fn test_field_sellableqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sellableqty) as usize - ptr as usize } , 1140usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (sellableqty))) ; } test_field_sellableqty () ; fn test_field_unercsellordqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . unercsellordqty) as usize - ptr as usize } , 1156usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (unercsellordqty))) ; } test_field_unercsellordqty () ; fn test_field_avrpchsprc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . avrpchsprc) as usize - ptr as usize } , 1172usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (avrpchsprc))) ; } test_field_avrpchsprc () ; fn test_field_pchsant () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . pchsant) as usize - ptr as usize } , 1185usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (pchsant))) ; } test_field_pchsant () ; fn test_field_deposit () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . deposit) as usize - ptr as usize } , 1201usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (deposit))) ; } test_field_deposit () ; fn test_field_substamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . substamt) as usize - ptr as usize } , 1217usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (substamt))) ; } test_field_substamt () ; fn test_field_csgnmnymgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . csgnmnymgn) as usize - ptr as usize } , 1233usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (csgnmnymgn))) ; } test_field_csgnmnymgn () ; fn test_field_csgnsubstmgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . csgnsubstmgn) as usize - ptr as usize } , 1249usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (csgnsubstmgn))) ; } test_field_csgnsubstmgn () ; fn test_field_crdtpldgruseamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . crdtpldgruseamt) as usize - ptr as usize } , 1265usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (crdtpldgruseamt))) ; } test_field_crdtpldgruseamt () ; fn test_field_ordablemny () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordablemny) as usize - ptr as usize } , 1281usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (ordablemny))) ; } test_field_ordablemny () ; fn test_field_ordablesubstamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordablesubstamt) as usize - ptr as usize } , 1297usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (ordablesubstamt))) ; } test_field_ordablesubstamt () ; fn test_field_ruseableamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < _SC2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ruseableamt) as usize - ptr as usize } , 1313usize , concat ! ("Offset of field: " , stringify ! (_SC2_OutBlock) , "::" , stringify ! (ruseableamt))) ; } test_field_ruseableamt () ; } pub type SC2_OutBlock = _SC2_OutBlock ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct SC3_OutBlock { pub lineseq : [:: std :: os :: raw :: c_char ; 10usize] , pub accno : [:: std :: os :: raw :: c_char ; 11usize] , pub user : [:: std :: os :: raw :: c_char ; 8usize] , pub len : [:: std :: os :: raw :: c_char ; 6usize] , pub gubun : [:: std :: os :: raw :: c_char ; 1usize] , pub compress : [:: std :: os :: raw :: c_char ; 1usize] , pub encrypt : [:: std :: os :: raw :: c_char ; 1usize] , pub offset : [:: std :: os :: raw :: c_char ; 3usize] , pub trcode : [:: std :: os :: raw :: c_char ; 8usize] , pub compid : [:: std :: os :: raw :: c_char ; 3usize] , pub userid : [:: std :: os :: raw :: c_char ; 16usize] , pub media : [:: std :: os :: raw :: c_char ; 2usize] , pub ifid : [:: std :: os :: raw :: c_char ; 3usize] , pub seq : [:: std :: os :: raw :: c_char ; 9usize] , pub trid : [:: std :: os :: raw :: c_char ; 16usize] , pub pubip : [:: std :: os :: raw :: c_char ; 12usize] , pub prvip : [:: std :: os :: raw :: c_char ; 12usize] , pub pcbpno : [:: std :: os :: raw :: c_char ; 3usize] , pub bpno : [:: std :: os :: raw :: c_char ; 3usize] , pub termno : [:: std :: os :: raw :: c_char ; 8usize] , pub lang : [:: std :: os :: raw :: c_char ; 1usize] , pub proctm : [:: std :: os :: raw :: c_char ; 9usize] , pub msgcode : [:: std :: os :: raw :: c_char ; 4usize] , pub outgu : [:: std :: os :: raw :: c_char ; 1usize] , pub compreq : [:: std :: os :: raw :: c_char ; 1usize] , pub funckey : [:: std :: os :: raw :: c_char ; 4usize] , pub reqcnt : [:: std :: os :: raw :: c_char ; 4usize] , pub filler : [:: std :: os :: raw :: c_char ; 6usize] , pub cont : [:: std :: os :: raw :: c_char ; 1usize] , pub contkey : [:: std :: os :: raw :: c_char ; 18usize] , pub varlen : [:: std :: os :: raw :: c_char ; 2usize] , pub varhdlen : [:: std :: os :: raw :: c_char ; 2usize] , pub varmsglen : [:: std :: os :: raw :: c_char ; 2usize] , pub trsrc : [:: std :: os :: raw :: c_char ; 1usize] , pub eventid : [:: std :: os :: raw :: c_char ; 4usize] , pub ifinfo : [:: std :: os :: raw :: c_char ; 4usize] , pub filler1 : [:: std :: os :: raw :: c_char ; 41usize] , pub ordxctptncode : [:: std :: os :: raw :: c_char ; 2usize] , pub ordmktcode : [:: std :: os :: raw :: c_char ; 2usize] , pub ordptncode : [:: std :: os :: raw :: c_char ; 2usize] , pub mgmtbrnno : [:: std :: os :: raw :: c_char ; 3usize] , pub accno1 : [:: std :: os :: raw :: c_char ; 11usize] , pub accno2 : [:: std :: os :: raw :: c_char ; 9usize] , pub acntnm : [:: std :: os :: raw :: c_char ; 40usize] , pub Isuno : [:: std :: os :: raw :: c_char ; 12usize] , pub Isunm : [:: std :: os :: raw :: c_char ; 40usize] , pub ordno : [:: std :: os :: raw :: c_char ; 10usize] , pub orgordno : [:: std :: os :: raw :: c_char ; 10usize] , pub execno : [:: std :: os :: raw :: c_char ; 10usize] , pub ordqty : [:: std :: os :: raw :: c_char ; 16usize] , pub ordprc : [:: std :: os :: raw :: c_char ; 13usize] , pub execqty : [:: std :: os :: raw :: c_char ; 16usize] , pub execprc : [:: std :: os :: raw :: c_char ; 13usize] , pub mdfycnfqty : [:: std :: os :: raw :: c_char ; 16usize] , pub mdfycnfprc : [:: std :: os :: raw :: c_char ; 16usize] , pub canccnfqty : [:: std :: os :: raw :: c_char ; 16usize] , pub rjtqty : [:: std :: os :: raw :: c_char ; 16usize] , pub ordtrxptncode : [:: std :: os :: raw :: c_char ; 4usize] , pub mtiordseqno : [:: std :: os :: raw :: c_char ; 10usize] , pub ordcndi : [:: std :: os :: raw :: c_char ; 1usize] , pub ordprcptncode : [:: std :: os :: raw :: c_char ; 2usize] , pub nsavtrdqty : [:: std :: os :: raw :: c_char ; 16usize] , pub shtnIsuno : [:: std :: os :: raw :: c_char ; 9usize] , pub opdrtnno : [:: std :: os :: raw :: c_char ; 12usize] , pub cvrgordtp : [:: std :: os :: raw :: c_char ; 1usize] , pub unercqty : [:: std :: os :: raw :: c_char ; 16usize] , pub orgordunercqty : [:: std :: os :: raw :: c_char ; 16usize] , pub orgordmdfyqty : [:: std :: os :: raw :: c_char ; 16usize] , pub orgordcancqty : [:: std :: os :: raw :: c_char ; 16usize] , pub ordavrexecprc : [:: std :: os :: raw :: c_char ; 13usize] , pub ordamt : [:: std :: os :: raw :: c_char ; 16usize] , pub stdIsuno : [:: std :: os :: raw :: c_char ; 12usize] , pub bfstdIsuno : [:: std :: os :: raw :: c_char ; 12usize] , pub bnstp : [:: std :: os :: raw :: c_char ; 1usize] , pub ordtrdptncode : [:: std :: os :: raw :: c_char ; 2usize] , pub mgntrncode : [:: std :: os :: raw :: c_char ; 3usize] , pub adduptp : [:: std :: os :: raw :: c_char ; 2usize] , pub commdacode : [:: std :: os :: raw :: c_char ; 2usize] , pub Loandt : [:: std :: os :: raw :: c_char ; 8usize] , pub mbrnmbrno : [:: std :: os :: raw :: c_char ; 3usize] , pub ordacntno : [:: std :: os :: raw :: c_char ; 20usize] , pub agrgbrnno : [:: std :: os :: raw :: c_char ; 3usize] , pub mgempno : [:: std :: os :: raw :: c_char ; 9usize] , pub futsLnkbrnno : [:: std :: os :: raw :: c_char ; 3usize] , pub futsLnkacntno : [:: std :: os :: raw :: c_char ; 20usize] , pub futsmkttp : [:: std :: os :: raw :: c_char ; 1usize] , pub regmktcode : [:: std :: os :: raw :: c_char ; 2usize] , pub mnymgnrat : [:: std :: os :: raw :: c_char ; 7usize] , pub substmgnrat : [:: std :: os :: raw :: c_char ; 9usize] , pub mnyexecamt : [:: std :: os :: raw :: c_char ; 16usize] , pub ubstexecamt : [:: std :: os :: raw :: c_char ; 16usize] , pub cmsnamtexecamt : [:: std :: os :: raw :: c_char ; 16usize] , pub crdtpldgexecamt : [:: std :: os :: raw :: c_char ; 16usize] , pub crdtexecamt : [:: std :: os :: raw :: c_char ; 16usize] , pub prdayruseexecval : [:: std :: os :: raw :: c_char ; 16usize] , pub crdayruseexecval : [:: std :: os :: raw :: c_char ; 16usize] , pub spotexecqty : [:: std :: os :: raw :: c_char ; 16usize] , pub stslexecqty : [:: std :: os :: raw :: c_char ; 16usize] , pub strtgcode : [:: std :: os :: raw :: c_char ; 6usize] , pub grpId : [:: std :: os :: raw :: c_char ; 20usize] , pub ordseqno : [:: std :: os :: raw :: c_char ; 10usize] , pub ptflno : [:: std :: os :: raw :: c_char ; 10usize] , pub bskno : [:: std :: os :: raw :: c_char ; 10usize] , pub trchno : [:: std :: os :: raw :: c_char ; 10usize] , pub itemno : [:: std :: os :: raw :: c_char ; 10usize] , pub orduserId : [:: std :: os :: raw :: c_char ; 16usize] , pub brwmgmtYn : [:: std :: os :: raw :: c_char ; 1usize] , pub frgrunqno : [:: std :: os :: raw :: c_char ; 6usize] , pub trtzxLevytp : [:: std :: os :: raw :: c_char ; 1usize] , pub lptp : [:: std :: os :: raw :: c_char ; 1usize] , pub exectime : [:: std :: os :: raw :: c_char ; 9usize] , pub rcptexectime : [:: std :: os :: raw :: c_char ; 9usize] , pub dummy_rmndLoanamt : [:: std :: os :: raw :: c_char ; 16usize] , pub dummy_secbalqty : [:: std :: os :: raw :: c_char ; 16usize] , pub dummy_spotordableqty : [:: std :: os :: raw :: c_char ; 16usize] , pub dummy_ordableruseqty : [:: std :: os :: raw :: c_char ; 16usize] , pub flctqty : [:: std :: os :: raw :: c_char ; 16usize] , pub dummy_secbalqtyd2 : [:: std :: os :: raw :: c_char ; 16usize] , pub dummy_sellableqty : [:: std :: os :: raw :: c_char ; 16usize] , pub dummy_unercsellordqty : [:: std :: os :: raw :: c_char ; 16usize] , pub dummy_avrpchsprc : [:: std :: os :: raw :: c_char ; 13usize] , pub dummy_pchsant : [:: std :: os :: raw :: c_char ; 16usize] , pub deposit : [:: std :: os :: raw :: c_char ; 16usize] , pub substamt : [:: std :: os :: raw :: c_char ; 16usize] , pub csgnmnymgn : [:: std :: os :: raw :: c_char ; 16usize] , pub csgnsubstmgn : [:: std :: os :: raw :: c_char ; 16usize] , pub crdtpldgruseamt : [:: std :: os :: raw :: c_char ; 16usize] , pub ordablemny : [:: std :: os :: raw :: c_char ; 16usize] , pub ordablesubstamt : [:: std :: os :: raw :: c_char ; 16usize] , pub ruseableamt : [:: std :: os :: raw :: c_char ; 16usize] , } # [test] fn bindgen_test_layout_SC3_OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < SC3_OutBlock > () , 1329usize , concat ! ("Size of: " , stringify ! (SC3_OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < SC3_OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (SC3_OutBlock))) ; fn test_field_lineseq () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lineseq) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (lineseq))) ; } test_field_lineseq () ; fn test_field_accno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . accno) as usize - ptr as usize } , 10usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (accno))) ; } test_field_accno () ; fn test_field_user () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . user) as usize - ptr as usize } , 21usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (user))) ; } test_field_user () ; fn test_field_len () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . len) as usize - ptr as usize } , 29usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (len))) ; } test_field_len () ; fn test_field_gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . gubun) as usize - ptr as usize } , 35usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (gubun))) ; } test_field_gubun () ; fn test_field_compress () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . compress) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (compress))) ; } test_field_compress () ; fn test_field_encrypt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . encrypt) as usize - ptr as usize } , 37usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (encrypt))) ; } test_field_encrypt () ; fn test_field_offset () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offset) as usize - ptr as usize } , 38usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (offset))) ; } test_field_offset () ; fn test_field_trcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . trcode) as usize - ptr as usize } , 41usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (trcode))) ; } test_field_trcode () ; fn test_field_compid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . compid) as usize - ptr as usize } , 49usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (compid))) ; } test_field_compid () ; fn test_field_userid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . userid) as usize - ptr as usize } , 52usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (userid))) ; } test_field_userid () ; fn test_field_media () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . media) as usize - ptr as usize } , 68usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (media))) ; } test_field_media () ; fn test_field_ifid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ifid) as usize - ptr as usize } , 70usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (ifid))) ; } test_field_ifid () ; fn test_field_seq () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . seq) as usize - ptr as usize } , 73usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (seq))) ; } test_field_seq () ; fn test_field_trid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . trid) as usize - ptr as usize } , 82usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (trid))) ; } test_field_trid () ; fn test_field_pubip () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . pubip) as usize - ptr as usize } , 98usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (pubip))) ; } test_field_pubip () ; fn test_field_prvip () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prvip) as usize - ptr as usize } , 110usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (prvip))) ; } test_field_prvip () ; fn test_field_pcbpno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . pcbpno) as usize - ptr as usize } , 122usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (pcbpno))) ; } test_field_pcbpno () ; fn test_field_bpno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bpno) as usize - ptr as usize } , 125usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (bpno))) ; } test_field_bpno () ; fn test_field_termno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . termno) as usize - ptr as usize } , 128usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (termno))) ; } test_field_termno () ; fn test_field_lang () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lang) as usize - ptr as usize } , 136usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (lang))) ; } test_field_lang () ; fn test_field_proctm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . proctm) as usize - ptr as usize } , 137usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (proctm))) ; } test_field_proctm () ; fn test_field_msgcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . msgcode) as usize - ptr as usize } , 146usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (msgcode))) ; } test_field_msgcode () ; fn test_field_outgu () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . outgu) as usize - ptr as usize } , 150usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (outgu))) ; } test_field_outgu () ; fn test_field_compreq () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . compreq) as usize - ptr as usize } , 151usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (compreq))) ; } test_field_compreq () ; fn test_field_funckey () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . funckey) as usize - ptr as usize } , 152usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (funckey))) ; } test_field_funckey () ; fn test_field_reqcnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . reqcnt) as usize - ptr as usize } , 156usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (reqcnt))) ; } test_field_reqcnt () ; fn test_field_filler () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . filler) as usize - ptr as usize } , 160usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (filler))) ; } test_field_filler () ; fn test_field_cont () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cont) as usize - ptr as usize } , 166usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (cont))) ; } test_field_cont () ; fn test_field_contkey () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . contkey) as usize - ptr as usize } , 167usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (contkey))) ; } test_field_contkey () ; fn test_field_varlen () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . varlen) as usize - ptr as usize } , 185usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (varlen))) ; } test_field_varlen () ; fn test_field_varhdlen () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . varhdlen) as usize - ptr as usize } , 187usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (varhdlen))) ; } test_field_varhdlen () ; fn test_field_varmsglen () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . varmsglen) as usize - ptr as usize } , 189usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (varmsglen))) ; } test_field_varmsglen () ; fn test_field_trsrc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . trsrc) as usize - ptr as usize } , 191usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (trsrc))) ; } test_field_trsrc () ; fn test_field_eventid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . eventid) as usize - ptr as usize } , 192usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (eventid))) ; } test_field_eventid () ; fn test_field_ifinfo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ifinfo) as usize - ptr as usize } , 196usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (ifinfo))) ; } test_field_ifinfo () ; fn test_field_filler1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . filler1) as usize - ptr as usize } , 200usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (filler1))) ; } test_field_filler1 () ; fn test_field_ordxctptncode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordxctptncode) as usize - ptr as usize } , 241usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (ordxctptncode))) ; } test_field_ordxctptncode () ; fn test_field_ordmktcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordmktcode) as usize - ptr as usize } , 243usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (ordmktcode))) ; } test_field_ordmktcode () ; fn test_field_ordptncode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordptncode) as usize - ptr as usize } , 245usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (ordptncode))) ; } test_field_ordptncode () ; fn test_field_mgmtbrnno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mgmtbrnno) as usize - ptr as usize } , 247usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (mgmtbrnno))) ; } test_field_mgmtbrnno () ; fn test_field_accno1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . accno1) as usize - ptr as usize } , 250usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (accno1))) ; } test_field_accno1 () ; fn test_field_accno2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . accno2) as usize - ptr as usize } , 261usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (accno2))) ; } test_field_accno2 () ; fn test_field_acntnm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . acntnm) as usize - ptr as usize } , 270usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (acntnm))) ; } test_field_acntnm () ; fn test_field_Isuno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Isuno) as usize - ptr as usize } , 310usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (Isuno))) ; } test_field_Isuno () ; fn test_field_Isunm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Isunm) as usize - ptr as usize } , 322usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (Isunm))) ; } test_field_Isunm () ; fn test_field_ordno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordno) as usize - ptr as usize } , 362usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (ordno))) ; } test_field_ordno () ; fn test_field_orgordno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . orgordno) as usize - ptr as usize } , 372usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (orgordno))) ; } test_field_orgordno () ; fn test_field_execno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . execno) as usize - ptr as usize } , 382usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (execno))) ; } test_field_execno () ; fn test_field_ordqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordqty) as usize - ptr as usize } , 392usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (ordqty))) ; } test_field_ordqty () ; fn test_field_ordprc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordprc) as usize - ptr as usize } , 408usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (ordprc))) ; } test_field_ordprc () ; fn test_field_execqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . execqty) as usize - ptr as usize } , 421usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (execqty))) ; } test_field_execqty () ; fn test_field_execprc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . execprc) as usize - ptr as usize } , 437usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (execprc))) ; } test_field_execprc () ; fn test_field_mdfycnfqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mdfycnfqty) as usize - ptr as usize } , 450usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (mdfycnfqty))) ; } test_field_mdfycnfqty () ; fn test_field_mdfycnfprc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mdfycnfprc) as usize - ptr as usize } , 466usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (mdfycnfprc))) ; } test_field_mdfycnfprc () ; fn test_field_canccnfqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . canccnfqty) as usize - ptr as usize } , 482usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (canccnfqty))) ; } test_field_canccnfqty () ; fn test_field_rjtqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . rjtqty) as usize - ptr as usize } , 498usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (rjtqty))) ; } test_field_rjtqty () ; fn test_field_ordtrxptncode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordtrxptncode) as usize - ptr as usize } , 514usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (ordtrxptncode))) ; } test_field_ordtrxptncode () ; fn test_field_mtiordseqno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mtiordseqno) as usize - ptr as usize } , 518usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (mtiordseqno))) ; } test_field_mtiordseqno () ; fn test_field_ordcndi () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordcndi) as usize - ptr as usize } , 528usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (ordcndi))) ; } test_field_ordcndi () ; fn test_field_ordprcptncode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordprcptncode) as usize - ptr as usize } , 529usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (ordprcptncode))) ; } test_field_ordprcptncode () ; fn test_field_nsavtrdqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . nsavtrdqty) as usize - ptr as usize } , 531usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (nsavtrdqty))) ; } test_field_nsavtrdqty () ; fn test_field_shtnIsuno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shtnIsuno) as usize - ptr as usize } , 547usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (shtnIsuno))) ; } test_field_shtnIsuno () ; fn test_field_opdrtnno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . opdrtnno) as usize - ptr as usize } , 556usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (opdrtnno))) ; } test_field_opdrtnno () ; fn test_field_cvrgordtp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cvrgordtp) as usize - ptr as usize } , 568usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (cvrgordtp))) ; } test_field_cvrgordtp () ; fn test_field_unercqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . unercqty) as usize - ptr as usize } , 569usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (unercqty))) ; } test_field_unercqty () ; fn test_field_orgordunercqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . orgordunercqty) as usize - ptr as usize } , 585usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (orgordunercqty))) ; } test_field_orgordunercqty () ; fn test_field_orgordmdfyqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . orgordmdfyqty) as usize - ptr as usize } , 601usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (orgordmdfyqty))) ; } test_field_orgordmdfyqty () ; fn test_field_orgordcancqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . orgordcancqty) as usize - ptr as usize } , 617usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (orgordcancqty))) ; } test_field_orgordcancqty () ; fn test_field_ordavrexecprc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordavrexecprc) as usize - ptr as usize } , 633usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (ordavrexecprc))) ; } test_field_ordavrexecprc () ; fn test_field_ordamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordamt) as usize - ptr as usize } , 646usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (ordamt))) ; } test_field_ordamt () ; fn test_field_stdIsuno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . stdIsuno) as usize - ptr as usize } , 662usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (stdIsuno))) ; } test_field_stdIsuno () ; fn test_field_bfstdIsuno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bfstdIsuno) as usize - ptr as usize } , 674usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (bfstdIsuno))) ; } test_field_bfstdIsuno () ; fn test_field_bnstp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bnstp) as usize - ptr as usize } , 686usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (bnstp))) ; } test_field_bnstp () ; fn test_field_ordtrdptncode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordtrdptncode) as usize - ptr as usize } , 687usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (ordtrdptncode))) ; } test_field_ordtrdptncode () ; fn test_field_mgntrncode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mgntrncode) as usize - ptr as usize } , 689usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (mgntrncode))) ; } test_field_mgntrncode () ; fn test_field_adduptp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . adduptp) as usize - ptr as usize } , 692usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (adduptp))) ; } test_field_adduptp () ; fn test_field_commdacode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . commdacode) as usize - ptr as usize } , 694usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (commdacode))) ; } test_field_commdacode () ; fn test_field_Loandt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Loandt) as usize - ptr as usize } , 696usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (Loandt))) ; } test_field_Loandt () ; fn test_field_mbrnmbrno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mbrnmbrno) as usize - ptr as usize } , 704usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (mbrnmbrno))) ; } test_field_mbrnmbrno () ; fn test_field_ordacntno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordacntno) as usize - ptr as usize } , 707usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (ordacntno))) ; } test_field_ordacntno () ; fn test_field_agrgbrnno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . agrgbrnno) as usize - ptr as usize } , 727usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (agrgbrnno))) ; } test_field_agrgbrnno () ; fn test_field_mgempno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mgempno) as usize - ptr as usize } , 730usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (mgempno))) ; } test_field_mgempno () ; fn test_field_futsLnkbrnno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . futsLnkbrnno) as usize - ptr as usize } , 739usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (futsLnkbrnno))) ; } test_field_futsLnkbrnno () ; fn test_field_futsLnkacntno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . futsLnkacntno) as usize - ptr as usize } , 742usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (futsLnkacntno))) ; } test_field_futsLnkacntno () ; fn test_field_futsmkttp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . futsmkttp) as usize - ptr as usize } , 762usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (futsmkttp))) ; } test_field_futsmkttp () ; fn test_field_regmktcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . regmktcode) as usize - ptr as usize } , 763usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (regmktcode))) ; } test_field_regmktcode () ; fn test_field_mnymgnrat () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mnymgnrat) as usize - ptr as usize } , 765usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (mnymgnrat))) ; } test_field_mnymgnrat () ; fn test_field_substmgnrat () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . substmgnrat) as usize - ptr as usize } , 772usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (substmgnrat))) ; } test_field_substmgnrat () ; fn test_field_mnyexecamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mnyexecamt) as usize - ptr as usize } , 781usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (mnyexecamt))) ; } test_field_mnyexecamt () ; fn test_field_ubstexecamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ubstexecamt) as usize - ptr as usize } , 797usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (ubstexecamt))) ; } test_field_ubstexecamt () ; fn test_field_cmsnamtexecamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cmsnamtexecamt) as usize - ptr as usize } , 813usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (cmsnamtexecamt))) ; } test_field_cmsnamtexecamt () ; fn test_field_crdtpldgexecamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . crdtpldgexecamt) as usize - ptr as usize } , 829usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (crdtpldgexecamt))) ; } test_field_crdtpldgexecamt () ; fn test_field_crdtexecamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . crdtexecamt) as usize - ptr as usize } , 845usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (crdtexecamt))) ; } test_field_crdtexecamt () ; fn test_field_prdayruseexecval () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prdayruseexecval) as usize - ptr as usize } , 861usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (prdayruseexecval))) ; } test_field_prdayruseexecval () ; fn test_field_crdayruseexecval () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . crdayruseexecval) as usize - ptr as usize } , 877usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (crdayruseexecval))) ; } test_field_crdayruseexecval () ; fn test_field_spotexecqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . spotexecqty) as usize - ptr as usize } , 893usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (spotexecqty))) ; } test_field_spotexecqty () ; fn test_field_stslexecqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . stslexecqty) as usize - ptr as usize } , 909usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (stslexecqty))) ; } test_field_stslexecqty () ; fn test_field_strtgcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . strtgcode) as usize - ptr as usize } , 925usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (strtgcode))) ; } test_field_strtgcode () ; fn test_field_grpId () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . grpId) as usize - ptr as usize } , 931usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (grpId))) ; } test_field_grpId () ; fn test_field_ordseqno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordseqno) as usize - ptr as usize } , 951usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (ordseqno))) ; } test_field_ordseqno () ; fn test_field_ptflno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ptflno) as usize - ptr as usize } , 961usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (ptflno))) ; } test_field_ptflno () ; fn test_field_bskno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bskno) as usize - ptr as usize } , 971usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (bskno))) ; } test_field_bskno () ; fn test_field_trchno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . trchno) as usize - ptr as usize } , 981usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (trchno))) ; } test_field_trchno () ; fn test_field_itemno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . itemno) as usize - ptr as usize } , 991usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (itemno))) ; } test_field_itemno () ; fn test_field_orduserId () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . orduserId) as usize - ptr as usize } , 1001usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (orduserId))) ; } test_field_orduserId () ; fn test_field_brwmgmtYn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . brwmgmtYn) as usize - ptr as usize } , 1017usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (brwmgmtYn))) ; } test_field_brwmgmtYn () ; fn test_field_frgrunqno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . frgrunqno) as usize - ptr as usize } , 1018usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (frgrunqno))) ; } test_field_frgrunqno () ; fn test_field_trtzxLevytp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . trtzxLevytp) as usize - ptr as usize } , 1024usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (trtzxLevytp))) ; } test_field_trtzxLevytp () ; fn test_field_lptp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lptp) as usize - ptr as usize } , 1025usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (lptp))) ; } test_field_lptp () ; fn test_field_exectime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . exectime) as usize - ptr as usize } , 1026usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (exectime))) ; } test_field_exectime () ; fn test_field_rcptexectime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . rcptexectime) as usize - ptr as usize } , 1035usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (rcptexectime))) ; } test_field_rcptexectime () ; fn test_field_dummy_rmndLoanamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dummy_rmndLoanamt) as usize - ptr as usize } , 1044usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (dummy_rmndLoanamt))) ; } test_field_dummy_rmndLoanamt () ; fn test_field_dummy_secbalqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dummy_secbalqty) as usize - ptr as usize } , 1060usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (dummy_secbalqty))) ; } test_field_dummy_secbalqty () ; fn test_field_dummy_spotordableqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dummy_spotordableqty) as usize - ptr as usize } , 1076usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (dummy_spotordableqty))) ; } test_field_dummy_spotordableqty () ; fn test_field_dummy_ordableruseqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dummy_ordableruseqty) as usize - ptr as usize } , 1092usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (dummy_ordableruseqty))) ; } test_field_dummy_ordableruseqty () ; fn test_field_flctqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . flctqty) as usize - ptr as usize } , 1108usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (flctqty))) ; } test_field_flctqty () ; fn test_field_dummy_secbalqtyd2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dummy_secbalqtyd2) as usize - ptr as usize } , 1124usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (dummy_secbalqtyd2))) ; } test_field_dummy_secbalqtyd2 () ; fn test_field_dummy_sellableqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dummy_sellableqty) as usize - ptr as usize } , 1140usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (dummy_sellableqty))) ; } test_field_dummy_sellableqty () ; fn test_field_dummy_unercsellordqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dummy_unercsellordqty) as usize - ptr as usize } , 1156usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (dummy_unercsellordqty))) ; } test_field_dummy_unercsellordqty () ; fn test_field_dummy_avrpchsprc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dummy_avrpchsprc) as usize - ptr as usize } , 1172usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (dummy_avrpchsprc))) ; } test_field_dummy_avrpchsprc () ; fn test_field_dummy_pchsant () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dummy_pchsant) as usize - ptr as usize } , 1185usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (dummy_pchsant))) ; } test_field_dummy_pchsant () ; fn test_field_deposit () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . deposit) as usize - ptr as usize } , 1201usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (deposit))) ; } test_field_deposit () ; fn test_field_substamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . substamt) as usize - ptr as usize } , 1217usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (substamt))) ; } test_field_substamt () ; fn test_field_csgnmnymgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . csgnmnymgn) as usize - ptr as usize } , 1233usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (csgnmnymgn))) ; } test_field_csgnmnymgn () ; fn test_field_csgnsubstmgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . csgnsubstmgn) as usize - ptr as usize } , 1249usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (csgnsubstmgn))) ; } test_field_csgnsubstmgn () ; fn test_field_crdtpldgruseamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . crdtpldgruseamt) as usize - ptr as usize } , 1265usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (crdtpldgruseamt))) ; } test_field_crdtpldgruseamt () ; fn test_field_ordablemny () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordablemny) as usize - ptr as usize } , 1281usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (ordablemny))) ; } test_field_ordablemny () ; fn test_field_ordablesubstamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordablesubstamt) as usize - ptr as usize } , 1297usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (ordablesubstamt))) ; } test_field_ordablesubstamt () ; fn test_field_ruseableamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ruseableamt) as usize - ptr as usize } , 1313usize , concat ! ("Offset of field: " , stringify ! (SC3_OutBlock) , "::" , stringify ! (ruseableamt))) ; } test_field_ruseableamt () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct SC4_OutBlock { pub lineseq : [:: std :: os :: raw :: c_char ; 10usize] , pub accno : [:: std :: os :: raw :: c_char ; 11usize] , pub user : [:: std :: os :: raw :: c_char ; 8usize] , pub len : [:: std :: os :: raw :: c_char ; 6usize] , pub gubun : [:: std :: os :: raw :: c_char ; 1usize] , pub compress : [:: std :: os :: raw :: c_char ; 1usize] , pub encrypt : [:: std :: os :: raw :: c_char ; 1usize] , pub offset : [:: std :: os :: raw :: c_char ; 3usize] , pub trcode : [:: std :: os :: raw :: c_char ; 8usize] , pub compid : [:: std :: os :: raw :: c_char ; 3usize] , pub userid : [:: std :: os :: raw :: c_char ; 16usize] , pub media : [:: std :: os :: raw :: c_char ; 2usize] , pub ifid : [:: std :: os :: raw :: c_char ; 3usize] , pub seq : [:: std :: os :: raw :: c_char ; 9usize] , pub trid : [:: std :: os :: raw :: c_char ; 16usize] , pub pubip : [:: std :: os :: raw :: c_char ; 12usize] , pub prvip : [:: std :: os :: raw :: c_char ; 12usize] , pub pcbpno : [:: std :: os :: raw :: c_char ; 3usize] , pub bpno : [:: std :: os :: raw :: c_char ; 3usize] , pub termno : [:: std :: os :: raw :: c_char ; 8usize] , pub lang : [:: std :: os :: raw :: c_char ; 1usize] , pub proctm : [:: std :: os :: raw :: c_char ; 9usize] , pub msgcode : [:: std :: os :: raw :: c_char ; 4usize] , pub outgu : [:: std :: os :: raw :: c_char ; 1usize] , pub compreq : [:: std :: os :: raw :: c_char ; 1usize] , pub funckey : [:: std :: os :: raw :: c_char ; 4usize] , pub reqcnt : [:: std :: os :: raw :: c_char ; 4usize] , pub filler : [:: std :: os :: raw :: c_char ; 6usize] , pub cont : [:: std :: os :: raw :: c_char ; 1usize] , pub contkey : [:: std :: os :: raw :: c_char ; 18usize] , pub varlen : [:: std :: os :: raw :: c_char ; 2usize] , pub varhdlen : [:: std :: os :: raw :: c_char ; 2usize] , pub varmsglen : [:: std :: os :: raw :: c_char ; 2usize] , pub trsrc : [:: std :: os :: raw :: c_char ; 1usize] , pub eventid : [:: std :: os :: raw :: c_char ; 4usize] , pub ifinfo : [:: std :: os :: raw :: c_char ; 4usize] , pub filler1 : [:: std :: os :: raw :: c_char ; 41usize] , pub ordxctptncode : [:: std :: os :: raw :: c_char ; 2usize] , pub ordmktcode : [:: std :: os :: raw :: c_char ; 2usize] , pub ordptncode : [:: std :: os :: raw :: c_char ; 2usize] , pub mgmtbrnno : [:: std :: os :: raw :: c_char ; 3usize] , pub accno1 : [:: std :: os :: raw :: c_char ; 11usize] , pub accno2 : [:: std :: os :: raw :: c_char ; 9usize] , pub acntnm : [:: std :: os :: raw :: c_char ; 40usize] , pub Isuno : [:: std :: os :: raw :: c_char ; 12usize] , pub Isunm : [:: std :: os :: raw :: c_char ; 40usize] , pub ordno : [:: std :: os :: raw :: c_char ; 10usize] , pub orgordno : [:: std :: os :: raw :: c_char ; 10usize] , pub execno : [:: std :: os :: raw :: c_char ; 10usize] , pub ordqty : [:: std :: os :: raw :: c_char ; 16usize] , pub ordprc : [:: std :: os :: raw :: c_char ; 13usize] , pub execqty : [:: std :: os :: raw :: c_char ; 16usize] , pub execprc : [:: std :: os :: raw :: c_char ; 13usize] , pub mdfycnfqty : [:: std :: os :: raw :: c_char ; 16usize] , pub mdfycnfprc : [:: std :: os :: raw :: c_char ; 16usize] , pub canccnfqty : [:: std :: os :: raw :: c_char ; 16usize] , pub rjtqty : [:: std :: os :: raw :: c_char ; 16usize] , pub ordtrxptncode : [:: std :: os :: raw :: c_char ; 4usize] , pub mtiordseqno : [:: std :: os :: raw :: c_char ; 10usize] , pub ordcndi : [:: std :: os :: raw :: c_char ; 1usize] , pub ordprcptncode : [:: std :: os :: raw :: c_char ; 2usize] , pub nsavtrdqty : [:: std :: os :: raw :: c_char ; 16usize] , pub shtnIsuno : [:: std :: os :: raw :: c_char ; 9usize] , pub opdrtnno : [:: std :: os :: raw :: c_char ; 12usize] , pub cvrgordtp : [:: std :: os :: raw :: c_char ; 1usize] , pub unercqty : [:: std :: os :: raw :: c_char ; 16usize] , pub orgordunercqty : [:: std :: os :: raw :: c_char ; 16usize] , pub orgordmdfyqty : [:: std :: os :: raw :: c_char ; 16usize] , pub orgordcancqty : [:: std :: os :: raw :: c_char ; 16usize] , pub ordavrexecprc : [:: std :: os :: raw :: c_char ; 13usize] , pub ordamt : [:: std :: os :: raw :: c_char ; 16usize] , pub stdIsuno : [:: std :: os :: raw :: c_char ; 12usize] , pub bfstdIsuno : [:: std :: os :: raw :: c_char ; 12usize] , pub bnstp : [:: std :: os :: raw :: c_char ; 1usize] , pub ordtrdptncode : [:: std :: os :: raw :: c_char ; 2usize] , pub mgntrncode : [:: std :: os :: raw :: c_char ; 3usize] , pub adduptp : [:: std :: os :: raw :: c_char ; 2usize] , pub commdacode : [:: std :: os :: raw :: c_char ; 2usize] , pub Loandt : [:: std :: os :: raw :: c_char ; 8usize] , pub mbrnmbrno : [:: std :: os :: raw :: c_char ; 3usize] , pub ordacntno : [:: std :: os :: raw :: c_char ; 20usize] , pub agrgbrnno : [:: std :: os :: raw :: c_char ; 3usize] , pub mgempno : [:: std :: os :: raw :: c_char ; 9usize] , pub futsLnkbrnno : [:: std :: os :: raw :: c_char ; 3usize] , pub futsLnkacntno : [:: std :: os :: raw :: c_char ; 20usize] , pub futsmkttp : [:: std :: os :: raw :: c_char ; 1usize] , pub regmktcode : [:: std :: os :: raw :: c_char ; 2usize] , pub mnymgnrat : [:: std :: os :: raw :: c_char ; 7usize] , pub substmgnrat : [:: std :: os :: raw :: c_char ; 9usize] , pub mnyexecamt : [:: std :: os :: raw :: c_char ; 16usize] , pub ubstexecamt : [:: std :: os :: raw :: c_char ; 16usize] , pub cmsnamtexecamt : [:: std :: os :: raw :: c_char ; 16usize] , pub crdtpldgexecamt : [:: std :: os :: raw :: c_char ; 16usize] , pub crdtexecamt : [:: std :: os :: raw :: c_char ; 16usize] , pub prdayruseexecval : [:: std :: os :: raw :: c_char ; 16usize] , pub crdayruseexecval : [:: std :: os :: raw :: c_char ; 16usize] , pub spotexecqty : [:: std :: os :: raw :: c_char ; 16usize] , pub stslexecqty : [:: std :: os :: raw :: c_char ; 16usize] , pub strtgcode : [:: std :: os :: raw :: c_char ; 6usize] , pub grpId : [:: std :: os :: raw :: c_char ; 20usize] , pub ordseqno : [:: std :: os :: raw :: c_char ; 10usize] , pub ptflno : [:: std :: os :: raw :: c_char ; 10usize] , pub bskno : [:: std :: os :: raw :: c_char ; 10usize] , pub trchno : [:: std :: os :: raw :: c_char ; 10usize] , pub itemno : [:: std :: os :: raw :: c_char ; 10usize] , pub orduserId : [:: std :: os :: raw :: c_char ; 16usize] , pub brwmgmtYn : [:: std :: os :: raw :: c_char ; 1usize] , pub frgrunqno : [:: std :: os :: raw :: c_char ; 6usize] , pub trtzxLevytp : [:: std :: os :: raw :: c_char ; 1usize] , pub lptp : [:: std :: os :: raw :: c_char ; 1usize] , pub exectime : [:: std :: os :: raw :: c_char ; 9usize] , pub rcptexectime : [:: std :: os :: raw :: c_char ; 9usize] , pub dummy_rmndLoanamt : [:: std :: os :: raw :: c_char ; 16usize] , pub dummy_secbalqty : [:: std :: os :: raw :: c_char ; 16usize] , pub dummy_spotordableqty : [:: std :: os :: raw :: c_char ; 16usize] , pub dummy_ordableruseqty : [:: std :: os :: raw :: c_char ; 16usize] , pub flctqty : [:: std :: os :: raw :: c_char ; 16usize] , pub dummy_secbalqtyd2 : [:: std :: os :: raw :: c_char ; 16usize] , pub dummy_sellableqty : [:: std :: os :: raw :: c_char ; 16usize] , pub dummy_unercsellordqty : [:: std :: os :: raw :: c_char ; 16usize] , pub dummy_avrpchsprc : [:: std :: os :: raw :: c_char ; 13usize] , pub dummy_pchsant : [:: std :: os :: raw :: c_char ; 16usize] , pub deposit : [:: std :: os :: raw :: c_char ; 16usize] , pub substamt : [:: std :: os :: raw :: c_char ; 16usize] , pub csgnmnymgn : [:: std :: os :: raw :: c_char ; 16usize] , pub csgnsubstmgn : [:: std :: os :: raw :: c_char ; 16usize] , pub crdtpldgruseamt : [:: std :: os :: raw :: c_char ; 16usize] , pub ordablemny : [:: std :: os :: raw :: c_char ; 16usize] , pub ordablesubstamt : [:: std :: os :: raw :: c_char ; 16usize] , pub ruseableamt : [:: std :: os :: raw :: c_char ; 16usize] , } # [test] fn bindgen_test_layout_SC4_OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < SC4_OutBlock > () , 1329usize , concat ! ("Size of: " , stringify ! (SC4_OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < SC4_OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (SC4_OutBlock))) ; fn test_field_lineseq () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lineseq) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (lineseq))) ; } test_field_lineseq () ; fn test_field_accno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . accno) as usize - ptr as usize } , 10usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (accno))) ; } test_field_accno () ; fn test_field_user () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . user) as usize - ptr as usize } , 21usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (user))) ; } test_field_user () ; fn test_field_len () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . len) as usize - ptr as usize } , 29usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (len))) ; } test_field_len () ; fn test_field_gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . gubun) as usize - ptr as usize } , 35usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (gubun))) ; } test_field_gubun () ; fn test_field_compress () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . compress) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (compress))) ; } test_field_compress () ; fn test_field_encrypt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . encrypt) as usize - ptr as usize } , 37usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (encrypt))) ; } test_field_encrypt () ; fn test_field_offset () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offset) as usize - ptr as usize } , 38usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (offset))) ; } test_field_offset () ; fn test_field_trcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . trcode) as usize - ptr as usize } , 41usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (trcode))) ; } test_field_trcode () ; fn test_field_compid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . compid) as usize - ptr as usize } , 49usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (compid))) ; } test_field_compid () ; fn test_field_userid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . userid) as usize - ptr as usize } , 52usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (userid))) ; } test_field_userid () ; fn test_field_media () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . media) as usize - ptr as usize } , 68usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (media))) ; } test_field_media () ; fn test_field_ifid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ifid) as usize - ptr as usize } , 70usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (ifid))) ; } test_field_ifid () ; fn test_field_seq () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . seq) as usize - ptr as usize } , 73usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (seq))) ; } test_field_seq () ; fn test_field_trid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . trid) as usize - ptr as usize } , 82usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (trid))) ; } test_field_trid () ; fn test_field_pubip () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . pubip) as usize - ptr as usize } , 98usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (pubip))) ; } test_field_pubip () ; fn test_field_prvip () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prvip) as usize - ptr as usize } , 110usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (prvip))) ; } test_field_prvip () ; fn test_field_pcbpno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . pcbpno) as usize - ptr as usize } , 122usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (pcbpno))) ; } test_field_pcbpno () ; fn test_field_bpno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bpno) as usize - ptr as usize } , 125usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (bpno))) ; } test_field_bpno () ; fn test_field_termno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . termno) as usize - ptr as usize } , 128usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (termno))) ; } test_field_termno () ; fn test_field_lang () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lang) as usize - ptr as usize } , 136usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (lang))) ; } test_field_lang () ; fn test_field_proctm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . proctm) as usize - ptr as usize } , 137usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (proctm))) ; } test_field_proctm () ; fn test_field_msgcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . msgcode) as usize - ptr as usize } , 146usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (msgcode))) ; } test_field_msgcode () ; fn test_field_outgu () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . outgu) as usize - ptr as usize } , 150usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (outgu))) ; } test_field_outgu () ; fn test_field_compreq () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . compreq) as usize - ptr as usize } , 151usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (compreq))) ; } test_field_compreq () ; fn test_field_funckey () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . funckey) as usize - ptr as usize } , 152usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (funckey))) ; } test_field_funckey () ; fn test_field_reqcnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . reqcnt) as usize - ptr as usize } , 156usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (reqcnt))) ; } test_field_reqcnt () ; fn test_field_filler () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . filler) as usize - ptr as usize } , 160usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (filler))) ; } test_field_filler () ; fn test_field_cont () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cont) as usize - ptr as usize } , 166usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (cont))) ; } test_field_cont () ; fn test_field_contkey () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . contkey) as usize - ptr as usize } , 167usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (contkey))) ; } test_field_contkey () ; fn test_field_varlen () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . varlen) as usize - ptr as usize } , 185usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (varlen))) ; } test_field_varlen () ; fn test_field_varhdlen () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . varhdlen) as usize - ptr as usize } , 187usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (varhdlen))) ; } test_field_varhdlen () ; fn test_field_varmsglen () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . varmsglen) as usize - ptr as usize } , 189usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (varmsglen))) ; } test_field_varmsglen () ; fn test_field_trsrc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . trsrc) as usize - ptr as usize } , 191usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (trsrc))) ; } test_field_trsrc () ; fn test_field_eventid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . eventid) as usize - ptr as usize } , 192usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (eventid))) ; } test_field_eventid () ; fn test_field_ifinfo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ifinfo) as usize - ptr as usize } , 196usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (ifinfo))) ; } test_field_ifinfo () ; fn test_field_filler1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . filler1) as usize - ptr as usize } , 200usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (filler1))) ; } test_field_filler1 () ; fn test_field_ordxctptncode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordxctptncode) as usize - ptr as usize } , 241usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (ordxctptncode))) ; } test_field_ordxctptncode () ; fn test_field_ordmktcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordmktcode) as usize - ptr as usize } , 243usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (ordmktcode))) ; } test_field_ordmktcode () ; fn test_field_ordptncode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordptncode) as usize - ptr as usize } , 245usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (ordptncode))) ; } test_field_ordptncode () ; fn test_field_mgmtbrnno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mgmtbrnno) as usize - ptr as usize } , 247usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (mgmtbrnno))) ; } test_field_mgmtbrnno () ; fn test_field_accno1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . accno1) as usize - ptr as usize } , 250usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (accno1))) ; } test_field_accno1 () ; fn test_field_accno2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . accno2) as usize - ptr as usize } , 261usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (accno2))) ; } test_field_accno2 () ; fn test_field_acntnm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . acntnm) as usize - ptr as usize } , 270usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (acntnm))) ; } test_field_acntnm () ; fn test_field_Isuno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Isuno) as usize - ptr as usize } , 310usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (Isuno))) ; } test_field_Isuno () ; fn test_field_Isunm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Isunm) as usize - ptr as usize } , 322usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (Isunm))) ; } test_field_Isunm () ; fn test_field_ordno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordno) as usize - ptr as usize } , 362usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (ordno))) ; } test_field_ordno () ; fn test_field_orgordno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . orgordno) as usize - ptr as usize } , 372usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (orgordno))) ; } test_field_orgordno () ; fn test_field_execno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . execno) as usize - ptr as usize } , 382usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (execno))) ; } test_field_execno () ; fn test_field_ordqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordqty) as usize - ptr as usize } , 392usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (ordqty))) ; } test_field_ordqty () ; fn test_field_ordprc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordprc) as usize - ptr as usize } , 408usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (ordprc))) ; } test_field_ordprc () ; fn test_field_execqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . execqty) as usize - ptr as usize } , 421usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (execqty))) ; } test_field_execqty () ; fn test_field_execprc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . execprc) as usize - ptr as usize } , 437usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (execprc))) ; } test_field_execprc () ; fn test_field_mdfycnfqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mdfycnfqty) as usize - ptr as usize } , 450usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (mdfycnfqty))) ; } test_field_mdfycnfqty () ; fn test_field_mdfycnfprc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mdfycnfprc) as usize - ptr as usize } , 466usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (mdfycnfprc))) ; } test_field_mdfycnfprc () ; fn test_field_canccnfqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . canccnfqty) as usize - ptr as usize } , 482usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (canccnfqty))) ; } test_field_canccnfqty () ; fn test_field_rjtqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . rjtqty) as usize - ptr as usize } , 498usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (rjtqty))) ; } test_field_rjtqty () ; fn test_field_ordtrxptncode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordtrxptncode) as usize - ptr as usize } , 514usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (ordtrxptncode))) ; } test_field_ordtrxptncode () ; fn test_field_mtiordseqno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mtiordseqno) as usize - ptr as usize } , 518usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (mtiordseqno))) ; } test_field_mtiordseqno () ; fn test_field_ordcndi () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordcndi) as usize - ptr as usize } , 528usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (ordcndi))) ; } test_field_ordcndi () ; fn test_field_ordprcptncode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordprcptncode) as usize - ptr as usize } , 529usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (ordprcptncode))) ; } test_field_ordprcptncode () ; fn test_field_nsavtrdqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . nsavtrdqty) as usize - ptr as usize } , 531usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (nsavtrdqty))) ; } test_field_nsavtrdqty () ; fn test_field_shtnIsuno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shtnIsuno) as usize - ptr as usize } , 547usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (shtnIsuno))) ; } test_field_shtnIsuno () ; fn test_field_opdrtnno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . opdrtnno) as usize - ptr as usize } , 556usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (opdrtnno))) ; } test_field_opdrtnno () ; fn test_field_cvrgordtp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cvrgordtp) as usize - ptr as usize } , 568usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (cvrgordtp))) ; } test_field_cvrgordtp () ; fn test_field_unercqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . unercqty) as usize - ptr as usize } , 569usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (unercqty))) ; } test_field_unercqty () ; fn test_field_orgordunercqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . orgordunercqty) as usize - ptr as usize } , 585usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (orgordunercqty))) ; } test_field_orgordunercqty () ; fn test_field_orgordmdfyqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . orgordmdfyqty) as usize - ptr as usize } , 601usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (orgordmdfyqty))) ; } test_field_orgordmdfyqty () ; fn test_field_orgordcancqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . orgordcancqty) as usize - ptr as usize } , 617usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (orgordcancqty))) ; } test_field_orgordcancqty () ; fn test_field_ordavrexecprc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordavrexecprc) as usize - ptr as usize } , 633usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (ordavrexecprc))) ; } test_field_ordavrexecprc () ; fn test_field_ordamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordamt) as usize - ptr as usize } , 646usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (ordamt))) ; } test_field_ordamt () ; fn test_field_stdIsuno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . stdIsuno) as usize - ptr as usize } , 662usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (stdIsuno))) ; } test_field_stdIsuno () ; fn test_field_bfstdIsuno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bfstdIsuno) as usize - ptr as usize } , 674usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (bfstdIsuno))) ; } test_field_bfstdIsuno () ; fn test_field_bnstp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bnstp) as usize - ptr as usize } , 686usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (bnstp))) ; } test_field_bnstp () ; fn test_field_ordtrdptncode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordtrdptncode) as usize - ptr as usize } , 687usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (ordtrdptncode))) ; } test_field_ordtrdptncode () ; fn test_field_mgntrncode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mgntrncode) as usize - ptr as usize } , 689usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (mgntrncode))) ; } test_field_mgntrncode () ; fn test_field_adduptp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . adduptp) as usize - ptr as usize } , 692usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (adduptp))) ; } test_field_adduptp () ; fn test_field_commdacode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . commdacode) as usize - ptr as usize } , 694usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (commdacode))) ; } test_field_commdacode () ; fn test_field_Loandt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Loandt) as usize - ptr as usize } , 696usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (Loandt))) ; } test_field_Loandt () ; fn test_field_mbrnmbrno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mbrnmbrno) as usize - ptr as usize } , 704usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (mbrnmbrno))) ; } test_field_mbrnmbrno () ; fn test_field_ordacntno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordacntno) as usize - ptr as usize } , 707usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (ordacntno))) ; } test_field_ordacntno () ; fn test_field_agrgbrnno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . agrgbrnno) as usize - ptr as usize } , 727usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (agrgbrnno))) ; } test_field_agrgbrnno () ; fn test_field_mgempno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mgempno) as usize - ptr as usize } , 730usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (mgempno))) ; } test_field_mgempno () ; fn test_field_futsLnkbrnno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . futsLnkbrnno) as usize - ptr as usize } , 739usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (futsLnkbrnno))) ; } test_field_futsLnkbrnno () ; fn test_field_futsLnkacntno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . futsLnkacntno) as usize - ptr as usize } , 742usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (futsLnkacntno))) ; } test_field_futsLnkacntno () ; fn test_field_futsmkttp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . futsmkttp) as usize - ptr as usize } , 762usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (futsmkttp))) ; } test_field_futsmkttp () ; fn test_field_regmktcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . regmktcode) as usize - ptr as usize } , 763usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (regmktcode))) ; } test_field_regmktcode () ; fn test_field_mnymgnrat () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mnymgnrat) as usize - ptr as usize } , 765usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (mnymgnrat))) ; } test_field_mnymgnrat () ; fn test_field_substmgnrat () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . substmgnrat) as usize - ptr as usize } , 772usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (substmgnrat))) ; } test_field_substmgnrat () ; fn test_field_mnyexecamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mnyexecamt) as usize - ptr as usize } , 781usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (mnyexecamt))) ; } test_field_mnyexecamt () ; fn test_field_ubstexecamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ubstexecamt) as usize - ptr as usize } , 797usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (ubstexecamt))) ; } test_field_ubstexecamt () ; fn test_field_cmsnamtexecamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cmsnamtexecamt) as usize - ptr as usize } , 813usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (cmsnamtexecamt))) ; } test_field_cmsnamtexecamt () ; fn test_field_crdtpldgexecamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . crdtpldgexecamt) as usize - ptr as usize } , 829usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (crdtpldgexecamt))) ; } test_field_crdtpldgexecamt () ; fn test_field_crdtexecamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . crdtexecamt) as usize - ptr as usize } , 845usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (crdtexecamt))) ; } test_field_crdtexecamt () ; fn test_field_prdayruseexecval () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prdayruseexecval) as usize - ptr as usize } , 861usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (prdayruseexecval))) ; } test_field_prdayruseexecval () ; fn test_field_crdayruseexecval () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . crdayruseexecval) as usize - ptr as usize } , 877usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (crdayruseexecval))) ; } test_field_crdayruseexecval () ; fn test_field_spotexecqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . spotexecqty) as usize - ptr as usize } , 893usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (spotexecqty))) ; } test_field_spotexecqty () ; fn test_field_stslexecqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . stslexecqty) as usize - ptr as usize } , 909usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (stslexecqty))) ; } test_field_stslexecqty () ; fn test_field_strtgcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . strtgcode) as usize - ptr as usize } , 925usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (strtgcode))) ; } test_field_strtgcode () ; fn test_field_grpId () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . grpId) as usize - ptr as usize } , 931usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (grpId))) ; } test_field_grpId () ; fn test_field_ordseqno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordseqno) as usize - ptr as usize } , 951usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (ordseqno))) ; } test_field_ordseqno () ; fn test_field_ptflno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ptflno) as usize - ptr as usize } , 961usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (ptflno))) ; } test_field_ptflno () ; fn test_field_bskno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bskno) as usize - ptr as usize } , 971usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (bskno))) ; } test_field_bskno () ; fn test_field_trchno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . trchno) as usize - ptr as usize } , 981usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (trchno))) ; } test_field_trchno () ; fn test_field_itemno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . itemno) as usize - ptr as usize } , 991usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (itemno))) ; } test_field_itemno () ; fn test_field_orduserId () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . orduserId) as usize - ptr as usize } , 1001usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (orduserId))) ; } test_field_orduserId () ; fn test_field_brwmgmtYn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . brwmgmtYn) as usize - ptr as usize } , 1017usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (brwmgmtYn))) ; } test_field_brwmgmtYn () ; fn test_field_frgrunqno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . frgrunqno) as usize - ptr as usize } , 1018usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (frgrunqno))) ; } test_field_frgrunqno () ; fn test_field_trtzxLevytp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . trtzxLevytp) as usize - ptr as usize } , 1024usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (trtzxLevytp))) ; } test_field_trtzxLevytp () ; fn test_field_lptp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lptp) as usize - ptr as usize } , 1025usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (lptp))) ; } test_field_lptp () ; fn test_field_exectime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . exectime) as usize - ptr as usize } , 1026usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (exectime))) ; } test_field_exectime () ; fn test_field_rcptexectime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . rcptexectime) as usize - ptr as usize } , 1035usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (rcptexectime))) ; } test_field_rcptexectime () ; fn test_field_dummy_rmndLoanamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dummy_rmndLoanamt) as usize - ptr as usize } , 1044usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (dummy_rmndLoanamt))) ; } test_field_dummy_rmndLoanamt () ; fn test_field_dummy_secbalqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dummy_secbalqty) as usize - ptr as usize } , 1060usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (dummy_secbalqty))) ; } test_field_dummy_secbalqty () ; fn test_field_dummy_spotordableqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dummy_spotordableqty) as usize - ptr as usize } , 1076usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (dummy_spotordableqty))) ; } test_field_dummy_spotordableqty () ; fn test_field_dummy_ordableruseqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dummy_ordableruseqty) as usize - ptr as usize } , 1092usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (dummy_ordableruseqty))) ; } test_field_dummy_ordableruseqty () ; fn test_field_flctqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . flctqty) as usize - ptr as usize } , 1108usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (flctqty))) ; } test_field_flctqty () ; fn test_field_dummy_secbalqtyd2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dummy_secbalqtyd2) as usize - ptr as usize } , 1124usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (dummy_secbalqtyd2))) ; } test_field_dummy_secbalqtyd2 () ; fn test_field_dummy_sellableqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dummy_sellableqty) as usize - ptr as usize } , 1140usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (dummy_sellableqty))) ; } test_field_dummy_sellableqty () ; fn test_field_dummy_unercsellordqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dummy_unercsellordqty) as usize - ptr as usize } , 1156usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (dummy_unercsellordqty))) ; } test_field_dummy_unercsellordqty () ; fn test_field_dummy_avrpchsprc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dummy_avrpchsprc) as usize - ptr as usize } , 1172usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (dummy_avrpchsprc))) ; } test_field_dummy_avrpchsprc () ; fn test_field_dummy_pchsant () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dummy_pchsant) as usize - ptr as usize } , 1185usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (dummy_pchsant))) ; } test_field_dummy_pchsant () ; fn test_field_deposit () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . deposit) as usize - ptr as usize } , 1201usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (deposit))) ; } test_field_deposit () ; fn test_field_substamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . substamt) as usize - ptr as usize } , 1217usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (substamt))) ; } test_field_substamt () ; fn test_field_csgnmnymgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . csgnmnymgn) as usize - ptr as usize } , 1233usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (csgnmnymgn))) ; } test_field_csgnmnymgn () ; fn test_field_csgnsubstmgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . csgnsubstmgn) as usize - ptr as usize } , 1249usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (csgnsubstmgn))) ; } test_field_csgnsubstmgn () ; fn test_field_crdtpldgruseamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . crdtpldgruseamt) as usize - ptr as usize } , 1265usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (crdtpldgruseamt))) ; } test_field_crdtpldgruseamt () ; fn test_field_ordablemny () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordablemny) as usize - ptr as usize } , 1281usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (ordablemny))) ; } test_field_ordablemny () ; fn test_field_ordablesubstamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordablesubstamt) as usize - ptr as usize } , 1297usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (ordablesubstamt))) ; } test_field_ordablesubstamt () ; fn test_field_ruseableamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < SC4_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ruseableamt) as usize - ptr as usize } , 1313usize , concat ! ("Offset of field: " , stringify ! (SC4_OutBlock) , "::" , stringify ! (ruseableamt))) ; } test_field_ruseableamt () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CFOAQ00600InBlock1 { pub RecCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub AcntNo : [:: std :: os :: raw :: c_char ; 20usize] , pub InptPwd : [:: std :: os :: raw :: c_char ; 8usize] , pub QrySrtDt : [:: std :: os :: raw :: c_char ; 8usize] , pub QryEndDt : [:: std :: os :: raw :: c_char ; 8usize] , pub FnoClssCode : [:: std :: os :: raw :: c_char ; 2usize] , pub PrdgrpCode : [:: std :: os :: raw :: c_char ; 2usize] , pub PrdtExecTpCode : [:: std :: os :: raw :: c_char ; 1usize] , pub StnlnSeqTp : [:: std :: os :: raw :: c_char ; 1usize] , pub CommdaCode : [:: std :: os :: raw :: c_char ; 2usize] , } # [test] fn bindgen_test_layout_CFOAQ00600InBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < CFOAQ00600InBlock1 > () , 57usize , concat ! ("Size of: " , stringify ! (CFOAQ00600InBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < CFOAQ00600InBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (CFOAQ00600InBlock1))) ; fn test_field_RecCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RecCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600InBlock1) , "::" , stringify ! (RecCnt))) ; } test_field_RecCnt () ; fn test_field_AcntNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNo) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600InBlock1) , "::" , stringify ! (AcntNo))) ; } test_field_AcntNo () ; fn test_field_InptPwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . InptPwd) as usize - ptr as usize } , 25usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600InBlock1) , "::" , stringify ! (InptPwd))) ; } test_field_InptPwd () ; fn test_field_QrySrtDt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . QrySrtDt) as usize - ptr as usize } , 33usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600InBlock1) , "::" , stringify ! (QrySrtDt))) ; } test_field_QrySrtDt () ; fn test_field_QryEndDt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . QryEndDt) as usize - ptr as usize } , 41usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600InBlock1) , "::" , stringify ! (QryEndDt))) ; } test_field_QryEndDt () ; fn test_field_FnoClssCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FnoClssCode) as usize - ptr as usize } , 49usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600InBlock1) , "::" , stringify ! (FnoClssCode))) ; } test_field_FnoClssCode () ; fn test_field_PrdgrpCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrdgrpCode) as usize - ptr as usize } , 51usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600InBlock1) , "::" , stringify ! (PrdgrpCode))) ; } test_field_PrdgrpCode () ; fn test_field_PrdtExecTpCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrdtExecTpCode) as usize - ptr as usize } , 53usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600InBlock1) , "::" , stringify ! (PrdtExecTpCode))) ; } test_field_PrdtExecTpCode () ; fn test_field_StnlnSeqTp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . StnlnSeqTp) as usize - ptr as usize } , 54usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600InBlock1) , "::" , stringify ! (StnlnSeqTp))) ; } test_field_StnlnSeqTp () ; fn test_field_CommdaCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CommdaCode) as usize - ptr as usize } , 55usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600InBlock1) , "::" , stringify ! (CommdaCode))) ; } test_field_CommdaCode () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CFOAQ00600OutBlock1 { pub RecCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub AcntNo : [:: std :: os :: raw :: c_char ; 20usize] , pub InptPwd : [:: std :: os :: raw :: c_char ; 8usize] , pub QrySrtDt : [:: std :: os :: raw :: c_char ; 8usize] , pub QryEndDt : [:: std :: os :: raw :: c_char ; 8usize] , pub FnoClssCode : [:: std :: os :: raw :: c_char ; 2usize] , pub PrdgrpCode : [:: std :: os :: raw :: c_char ; 2usize] , pub PrdtExecTpCode : [:: std :: os :: raw :: c_char ; 1usize] , pub StnlnSeqTp : [:: std :: os :: raw :: c_char ; 1usize] , pub CommdaCode : [:: std :: os :: raw :: c_char ; 2usize] , } # [test] fn bindgen_test_layout_CFOAQ00600OutBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < CFOAQ00600OutBlock1 > () , 57usize , concat ! ("Size of: " , stringify ! (CFOAQ00600OutBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < CFOAQ00600OutBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (CFOAQ00600OutBlock1))) ; fn test_field_RecCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RecCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock1) , "::" , stringify ! (RecCnt))) ; } test_field_RecCnt () ; fn test_field_AcntNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNo) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock1) , "::" , stringify ! (AcntNo))) ; } test_field_AcntNo () ; fn test_field_InptPwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . InptPwd) as usize - ptr as usize } , 25usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock1) , "::" , stringify ! (InptPwd))) ; } test_field_InptPwd () ; fn test_field_QrySrtDt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . QrySrtDt) as usize - ptr as usize } , 33usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock1) , "::" , stringify ! (QrySrtDt))) ; } test_field_QrySrtDt () ; fn test_field_QryEndDt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . QryEndDt) as usize - ptr as usize } , 41usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock1) , "::" , stringify ! (QryEndDt))) ; } test_field_QryEndDt () ; fn test_field_FnoClssCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FnoClssCode) as usize - ptr as usize } , 49usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock1) , "::" , stringify ! (FnoClssCode))) ; } test_field_FnoClssCode () ; fn test_field_PrdgrpCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrdgrpCode) as usize - ptr as usize } , 51usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock1) , "::" , stringify ! (PrdgrpCode))) ; } test_field_PrdgrpCode () ; fn test_field_PrdtExecTpCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrdtExecTpCode) as usize - ptr as usize } , 53usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock1) , "::" , stringify ! (PrdtExecTpCode))) ; } test_field_PrdtExecTpCode () ; fn test_field_StnlnSeqTp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . StnlnSeqTp) as usize - ptr as usize } , 54usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock1) , "::" , stringify ! (StnlnSeqTp))) ; } test_field_StnlnSeqTp () ; fn test_field_CommdaCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CommdaCode) as usize - ptr as usize } , 55usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock1) , "::" , stringify ! (CommdaCode))) ; } test_field_CommdaCode () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CFOAQ00600OutBlock2 { pub RecCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub AcntNm : [:: std :: os :: raw :: c_char ; 40usize] , pub FutsOrdQty : [:: std :: os :: raw :: c_char ; 16usize] , pub FutsExecQty : [:: std :: os :: raw :: c_char ; 16usize] , pub OptOrdQty : [:: std :: os :: raw :: c_char ; 16usize] , pub OptExecQty : [:: std :: os :: raw :: c_char ; 16usize] , } # [test] fn bindgen_test_layout_CFOAQ00600OutBlock2 () { assert_eq ! (:: std :: mem :: size_of :: < CFOAQ00600OutBlock2 > () , 109usize , concat ! ("Size of: " , stringify ! (CFOAQ00600OutBlock2))) ; assert_eq ! (:: std :: mem :: align_of :: < CFOAQ00600OutBlock2 > () , 1usize , concat ! ("Alignment of " , stringify ! (CFOAQ00600OutBlock2))) ; fn test_field_RecCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RecCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock2) , "::" , stringify ! (RecCnt))) ; } test_field_RecCnt () ; fn test_field_AcntNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNm) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock2) , "::" , stringify ! (AcntNm))) ; } test_field_AcntNm () ; fn test_field_FutsOrdQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FutsOrdQty) as usize - ptr as usize } , 45usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock2) , "::" , stringify ! (FutsOrdQty))) ; } test_field_FutsOrdQty () ; fn test_field_FutsExecQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FutsExecQty) as usize - ptr as usize } , 61usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock2) , "::" , stringify ! (FutsExecQty))) ; } test_field_FutsExecQty () ; fn test_field_OptOrdQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OptOrdQty) as usize - ptr as usize } , 77usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock2) , "::" , stringify ! (OptOrdQty))) ; } test_field_OptOrdQty () ; fn test_field_OptExecQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OptExecQty) as usize - ptr as usize } , 93usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock2) , "::" , stringify ! (OptExecQty))) ; } test_field_OptExecQty () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CFOAQ00600OutBlock3 { pub OrdDt : [:: std :: os :: raw :: c_char ; 8usize] , pub OrdNo : [:: std :: os :: raw :: c_char ; 10usize] , pub OrgOrdNo : [:: std :: os :: raw :: c_char ; 10usize] , pub OrdTime : [:: std :: os :: raw :: c_char ; 9usize] , pub FnoIsuNo : [:: std :: os :: raw :: c_char ; 12usize] , pub IsuNm : [:: std :: os :: raw :: c_char ; 40usize] , pub BnsTpNm : [:: std :: os :: raw :: c_char ; 10usize] , pub MrcTpNm : [:: std :: os :: raw :: c_char ; 10usize] , pub FnoOrdprcPtnCode : [:: std :: os :: raw :: c_char ; 2usize] , pub FnoOrdprcPtnNm : [:: std :: os :: raw :: c_char ; 40usize] , pub OrdPrc : [:: std :: os :: raw :: c_char ; 13usize] , pub OrdQty : [:: std :: os :: raw :: c_char ; 16usize] , pub OrdTpNm : [:: std :: os :: raw :: c_char ; 10usize] , pub ExecTpNm : [:: std :: os :: raw :: c_char ; 10usize] , pub ExecPrc : [:: std :: os :: raw :: c_char ; 13usize] , pub ExecQty : [:: std :: os :: raw :: c_char ; 16usize] , pub CtrctTime : [:: std :: os :: raw :: c_char ; 9usize] , pub CtrctNo : [:: std :: os :: raw :: c_char ; 10usize] , pub ExecNo : [:: std :: os :: raw :: c_char ; 10usize] , pub BnsplAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub UnercQty : [:: std :: os :: raw :: c_char ; 16usize] , pub UserId : [:: std :: os :: raw :: c_char ; 16usize] , pub CommdaCode : [:: std :: os :: raw :: c_char ; 2usize] , pub CommdaCodeNm : [:: std :: os :: raw :: c_char ; 40usize] , } # [test] fn bindgen_test_layout_CFOAQ00600OutBlock3 () { assert_eq ! (:: std :: mem :: size_of :: < CFOAQ00600OutBlock3 > () , 348usize , concat ! ("Size of: " , stringify ! (CFOAQ00600OutBlock3))) ; assert_eq ! (:: std :: mem :: align_of :: < CFOAQ00600OutBlock3 > () , 1usize , concat ! ("Alignment of " , stringify ! (CFOAQ00600OutBlock3))) ; fn test_field_OrdDt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdDt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock3) , "::" , stringify ! (OrdDt))) ; } test_field_OrdDt () ; fn test_field_OrdNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdNo) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock3) , "::" , stringify ! (OrdNo))) ; } test_field_OrdNo () ; fn test_field_OrgOrdNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrgOrdNo) as usize - ptr as usize } , 18usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock3) , "::" , stringify ! (OrgOrdNo))) ; } test_field_OrgOrdNo () ; fn test_field_OrdTime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdTime) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock3) , "::" , stringify ! (OrdTime))) ; } test_field_OrdTime () ; fn test_field_FnoIsuNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FnoIsuNo) as usize - ptr as usize } , 37usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock3) , "::" , stringify ! (FnoIsuNo))) ; } test_field_FnoIsuNo () ; fn test_field_IsuNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . IsuNm) as usize - ptr as usize } , 49usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock3) , "::" , stringify ! (IsuNm))) ; } test_field_IsuNm () ; fn test_field_BnsTpNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BnsTpNm) as usize - ptr as usize } , 89usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock3) , "::" , stringify ! (BnsTpNm))) ; } test_field_BnsTpNm () ; fn test_field_MrcTpNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MrcTpNm) as usize - ptr as usize } , 99usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock3) , "::" , stringify ! (MrcTpNm))) ; } test_field_MrcTpNm () ; fn test_field_FnoOrdprcPtnCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FnoOrdprcPtnCode) as usize - ptr as usize } , 109usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock3) , "::" , stringify ! (FnoOrdprcPtnCode))) ; } test_field_FnoOrdprcPtnCode () ; fn test_field_FnoOrdprcPtnNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FnoOrdprcPtnNm) as usize - ptr as usize } , 111usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock3) , "::" , stringify ! (FnoOrdprcPtnNm))) ; } test_field_FnoOrdprcPtnNm () ; fn test_field_OrdPrc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdPrc) as usize - ptr as usize } , 151usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock3) , "::" , stringify ! (OrdPrc))) ; } test_field_OrdPrc () ; fn test_field_OrdQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdQty) as usize - ptr as usize } , 164usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock3) , "::" , stringify ! (OrdQty))) ; } test_field_OrdQty () ; fn test_field_OrdTpNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdTpNm) as usize - ptr as usize } , 180usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock3) , "::" , stringify ! (OrdTpNm))) ; } test_field_OrdTpNm () ; fn test_field_ExecTpNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ExecTpNm) as usize - ptr as usize } , 190usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock3) , "::" , stringify ! (ExecTpNm))) ; } test_field_ExecTpNm () ; fn test_field_ExecPrc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ExecPrc) as usize - ptr as usize } , 200usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock3) , "::" , stringify ! (ExecPrc))) ; } test_field_ExecPrc () ; fn test_field_ExecQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ExecQty) as usize - ptr as usize } , 213usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock3) , "::" , stringify ! (ExecQty))) ; } test_field_ExecQty () ; fn test_field_CtrctTime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CtrctTime) as usize - ptr as usize } , 229usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock3) , "::" , stringify ! (CtrctTime))) ; } test_field_CtrctTime () ; fn test_field_CtrctNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CtrctNo) as usize - ptr as usize } , 238usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock3) , "::" , stringify ! (CtrctNo))) ; } test_field_CtrctNo () ; fn test_field_ExecNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ExecNo) as usize - ptr as usize } , 248usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock3) , "::" , stringify ! (ExecNo))) ; } test_field_ExecNo () ; fn test_field_BnsplAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BnsplAmt) as usize - ptr as usize } , 258usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock3) , "::" , stringify ! (BnsplAmt))) ; } test_field_BnsplAmt () ; fn test_field_UnercQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . UnercQty) as usize - ptr as usize } , 274usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock3) , "::" , stringify ! (UnercQty))) ; } test_field_UnercQty () ; fn test_field_UserId () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . UserId) as usize - ptr as usize } , 290usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock3) , "::" , stringify ! (UserId))) ; } test_field_UserId () ; fn test_field_CommdaCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CommdaCode) as usize - ptr as usize } , 306usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock3) , "::" , stringify ! (CommdaCode))) ; } test_field_CommdaCode () ; fn test_field_CommdaCodeNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAQ00600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CommdaCodeNm) as usize - ptr as usize } , 308usize , concat ! ("Offset of field: " , stringify ! (CFOAQ00600OutBlock3) , "::" , stringify ! (CommdaCodeNm))) ; } test_field_CommdaCodeNm () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CFOAT00100InBlock1 { pub AcntNo : [:: std :: os :: raw :: c_char ; 20usize] , pub Pwd : [:: std :: os :: raw :: c_char ; 8usize] , pub FnoIsuNo : [:: std :: os :: raw :: c_char ; 12usize] , pub BnsTpCode : [:: std :: os :: raw :: c_char ; 1usize] , pub FnoOrdprcPtnCode : [:: std :: os :: raw :: c_char ; 2usize] , pub OrdPrc : [:: std :: os :: raw :: c_char ; 15usize] , pub OrdQty : [:: std :: os :: raw :: c_char ; 16usize] , } # [test] fn bindgen_test_layout_CFOAT00100InBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < CFOAT00100InBlock1 > () , 74usize , concat ! ("Size of: " , stringify ! (CFOAT00100InBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < CFOAT00100InBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (CFOAT00100InBlock1))) ; fn test_field_AcntNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNo) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100InBlock1) , "::" , stringify ! (AcntNo))) ; } test_field_AcntNo () ; fn test_field_Pwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Pwd) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100InBlock1) , "::" , stringify ! (Pwd))) ; } test_field_Pwd () ; fn test_field_FnoIsuNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FnoIsuNo) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100InBlock1) , "::" , stringify ! (FnoIsuNo))) ; } test_field_FnoIsuNo () ; fn test_field_BnsTpCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BnsTpCode) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100InBlock1) , "::" , stringify ! (BnsTpCode))) ; } test_field_BnsTpCode () ; fn test_field_FnoOrdprcPtnCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FnoOrdprcPtnCode) as usize - ptr as usize } , 41usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100InBlock1) , "::" , stringify ! (FnoOrdprcPtnCode))) ; } test_field_FnoOrdprcPtnCode () ; fn test_field_OrdPrc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdPrc) as usize - ptr as usize } , 43usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100InBlock1) , "::" , stringify ! (OrdPrc))) ; } test_field_OrdPrc () ; fn test_field_OrdQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdQty) as usize - ptr as usize } , 58usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100InBlock1) , "::" , stringify ! (OrdQty))) ; } test_field_OrdQty () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CFOAT00100OutBlock1 { pub RecCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub OrdMktCode : [:: std :: os :: raw :: c_char ; 2usize] , pub AcntNo : [:: std :: os :: raw :: c_char ; 20usize] , pub Pwd : [:: std :: os :: raw :: c_char ; 8usize] , pub FnoIsuNo : [:: std :: os :: raw :: c_char ; 12usize] , pub BnsTpCode : [:: std :: os :: raw :: c_char ; 1usize] , pub FnoOrdPtnCode : [:: std :: os :: raw :: c_char ; 2usize] , pub FnoOrdprcPtnCode : [:: std :: os :: raw :: c_char ; 2usize] , pub FnoTrdPtnCode : [:: std :: os :: raw :: c_char ; 2usize] , pub OrdPrc : [:: std :: os :: raw :: c_char ; 15usize] , pub OrdQty : [:: std :: os :: raw :: c_char ; 16usize] , pub CommdaCode : [:: std :: os :: raw :: c_char ; 2usize] , pub DscusBnsCmpltTime : [:: std :: os :: raw :: c_char ; 9usize] , pub GrpId : [:: std :: os :: raw :: c_char ; 20usize] , pub OrdSeqno : [:: std :: os :: raw :: c_char ; 10usize] , pub PtflNo : [:: std :: os :: raw :: c_char ; 10usize] , pub BskNo : [:: std :: os :: raw :: c_char ; 10usize] , pub TrchNo : [:: std :: os :: raw :: c_char ; 10usize] , pub ItemNo : [:: std :: os :: raw :: c_char ; 16usize] , pub OpDrtnNo : [:: std :: os :: raw :: c_char ; 12usize] , pub MgempNo : [:: std :: os :: raw :: c_char ; 9usize] , pub FundId : [:: std :: os :: raw :: c_char ; 12usize] , pub FundOrdNo : [:: std :: os :: raw :: c_char ; 10usize] , } # [test] fn bindgen_test_layout_CFOAT00100OutBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < CFOAT00100OutBlock1 > () , 215usize , concat ! ("Size of: " , stringify ! (CFOAT00100OutBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < CFOAT00100OutBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (CFOAT00100OutBlock1))) ; fn test_field_RecCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RecCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock1) , "::" , stringify ! (RecCnt))) ; } test_field_RecCnt () ; fn test_field_OrdMktCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdMktCode) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock1) , "::" , stringify ! (OrdMktCode))) ; } test_field_OrdMktCode () ; fn test_field_AcntNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNo) as usize - ptr as usize } , 7usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock1) , "::" , stringify ! (AcntNo))) ; } test_field_AcntNo () ; fn test_field_Pwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Pwd) as usize - ptr as usize } , 27usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock1) , "::" , stringify ! (Pwd))) ; } test_field_Pwd () ; fn test_field_FnoIsuNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FnoIsuNo) as usize - ptr as usize } , 35usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock1) , "::" , stringify ! (FnoIsuNo))) ; } test_field_FnoIsuNo () ; fn test_field_BnsTpCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BnsTpCode) as usize - ptr as usize } , 47usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock1) , "::" , stringify ! (BnsTpCode))) ; } test_field_BnsTpCode () ; fn test_field_FnoOrdPtnCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FnoOrdPtnCode) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock1) , "::" , stringify ! (FnoOrdPtnCode))) ; } test_field_FnoOrdPtnCode () ; fn test_field_FnoOrdprcPtnCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FnoOrdprcPtnCode) as usize - ptr as usize } , 50usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock1) , "::" , stringify ! (FnoOrdprcPtnCode))) ; } test_field_FnoOrdprcPtnCode () ; fn test_field_FnoTrdPtnCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FnoTrdPtnCode) as usize - ptr as usize } , 52usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock1) , "::" , stringify ! (FnoTrdPtnCode))) ; } test_field_FnoTrdPtnCode () ; fn test_field_OrdPrc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdPrc) as usize - ptr as usize } , 54usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock1) , "::" , stringify ! (OrdPrc))) ; } test_field_OrdPrc () ; fn test_field_OrdQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdQty) as usize - ptr as usize } , 69usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock1) , "::" , stringify ! (OrdQty))) ; } test_field_OrdQty () ; fn test_field_CommdaCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CommdaCode) as usize - ptr as usize } , 85usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock1) , "::" , stringify ! (CommdaCode))) ; } test_field_CommdaCode () ; fn test_field_DscusBnsCmpltTime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . DscusBnsCmpltTime) as usize - ptr as usize } , 87usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock1) , "::" , stringify ! (DscusBnsCmpltTime))) ; } test_field_DscusBnsCmpltTime () ; fn test_field_GrpId () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . GrpId) as usize - ptr as usize } , 96usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock1) , "::" , stringify ! (GrpId))) ; } test_field_GrpId () ; fn test_field_OrdSeqno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdSeqno) as usize - ptr as usize } , 116usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock1) , "::" , stringify ! (OrdSeqno))) ; } test_field_OrdSeqno () ; fn test_field_PtflNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PtflNo) as usize - ptr as usize } , 126usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock1) , "::" , stringify ! (PtflNo))) ; } test_field_PtflNo () ; fn test_field_BskNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BskNo) as usize - ptr as usize } , 136usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock1) , "::" , stringify ! (BskNo))) ; } test_field_BskNo () ; fn test_field_TrchNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . TrchNo) as usize - ptr as usize } , 146usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock1) , "::" , stringify ! (TrchNo))) ; } test_field_TrchNo () ; fn test_field_ItemNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ItemNo) as usize - ptr as usize } , 156usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock1) , "::" , stringify ! (ItemNo))) ; } test_field_ItemNo () ; fn test_field_OpDrtnNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OpDrtnNo) as usize - ptr as usize } , 172usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock1) , "::" , stringify ! (OpDrtnNo))) ; } test_field_OpDrtnNo () ; fn test_field_MgempNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MgempNo) as usize - ptr as usize } , 184usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock1) , "::" , stringify ! (MgempNo))) ; } test_field_MgempNo () ; fn test_field_FundId () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FundId) as usize - ptr as usize } , 193usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock1) , "::" , stringify ! (FundId))) ; } test_field_FundId () ; fn test_field_FundOrdNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FundOrdNo) as usize - ptr as usize } , 205usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock1) , "::" , stringify ! (FundOrdNo))) ; } test_field_FundOrdNo () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CFOAT00100OutBlock2 { pub RecCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub OrdNo : [:: std :: os :: raw :: c_char ; 10usize] , pub BrnNm : [:: std :: os :: raw :: c_char ; 40usize] , pub AcntNm : [:: std :: os :: raw :: c_char ; 40usize] , pub IsuNm : [:: std :: os :: raw :: c_char ; 50usize] , pub OrdAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub MnyOrdAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub OrdMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub MnyOrdMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub OrdAbleQty : [:: std :: os :: raw :: c_char ; 16usize] , } # [test] fn bindgen_test_layout_CFOAT00100OutBlock2 () { assert_eq ! (:: std :: mem :: size_of :: < CFOAT00100OutBlock2 > () , 225usize , concat ! ("Size of: " , stringify ! (CFOAT00100OutBlock2))) ; assert_eq ! (:: std :: mem :: align_of :: < CFOAT00100OutBlock2 > () , 1usize , concat ! ("Alignment of " , stringify ! (CFOAT00100OutBlock2))) ; fn test_field_RecCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RecCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock2) , "::" , stringify ! (RecCnt))) ; } test_field_RecCnt () ; fn test_field_OrdNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdNo) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock2) , "::" , stringify ! (OrdNo))) ; } test_field_OrdNo () ; fn test_field_BrnNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BrnNm) as usize - ptr as usize } , 15usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock2) , "::" , stringify ! (BrnNm))) ; } test_field_BrnNm () ; fn test_field_AcntNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNm) as usize - ptr as usize } , 55usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock2) , "::" , stringify ! (AcntNm))) ; } test_field_AcntNm () ; fn test_field_IsuNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . IsuNm) as usize - ptr as usize } , 95usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock2) , "::" , stringify ! (IsuNm))) ; } test_field_IsuNm () ; fn test_field_OrdAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdAbleAmt) as usize - ptr as usize } , 145usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock2) , "::" , stringify ! (OrdAbleAmt))) ; } test_field_OrdAbleAmt () ; fn test_field_MnyOrdAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MnyOrdAbleAmt) as usize - ptr as usize } , 161usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock2) , "::" , stringify ! (MnyOrdAbleAmt))) ; } test_field_MnyOrdAbleAmt () ; fn test_field_OrdMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdMgn) as usize - ptr as usize } , 177usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock2) , "::" , stringify ! (OrdMgn))) ; } test_field_OrdMgn () ; fn test_field_MnyOrdMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MnyOrdMgn) as usize - ptr as usize } , 193usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock2) , "::" , stringify ! (MnyOrdMgn))) ; } test_field_MnyOrdMgn () ; fn test_field_OrdAbleQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdAbleQty) as usize - ptr as usize } , 209usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock2) , "::" , stringify ! (OrdAbleQty))) ; } test_field_OrdAbleQty () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CFOAT00100OutBlock { pub outBlock1 : CFOAT00100OutBlock1 , pub outBlock2 : CFOAT00100OutBlock2 , } # [test] fn bindgen_test_layout_CFOAT00100OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < CFOAT00100OutBlock > () , 440usize , concat ! ("Size of: " , stringify ! (CFOAT00100OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < CFOAT00100OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (CFOAT00100OutBlock))) ; fn test_field_outBlock1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . outBlock1) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock) , "::" , stringify ! (outBlock1))) ; } test_field_outBlock1 () ; fn test_field_outBlock2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00100OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . outBlock2) as usize - ptr as usize } , 215usize , concat ! ("Offset of field: " , stringify ! (CFOAT00100OutBlock) , "::" , stringify ! (outBlock2))) ; } test_field_outBlock2 () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CFOAT00200InBlock1 { pub AcntNo : [:: std :: os :: raw :: c_char ; 20usize] , pub Pwd : [:: std :: os :: raw :: c_char ; 8usize] , pub FnoIsuNo : [:: std :: os :: raw :: c_char ; 12usize] , pub OrgOrdNo : [:: std :: os :: raw :: c_char ; 10usize] , pub FnoOrdprcPtnCode : [:: std :: os :: raw :: c_char ; 2usize] , pub OrdPrc : [:: std :: os :: raw :: c_char ; 15usize] , pub MdfyQty : [:: std :: os :: raw :: c_char ; 16usize] , } # [test] fn bindgen_test_layout_CFOAT00200InBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < CFOAT00200InBlock1 > () , 83usize , concat ! ("Size of: " , stringify ! (CFOAT00200InBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < CFOAT00200InBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (CFOAT00200InBlock1))) ; fn test_field_AcntNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNo) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200InBlock1) , "::" , stringify ! (AcntNo))) ; } test_field_AcntNo () ; fn test_field_Pwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Pwd) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200InBlock1) , "::" , stringify ! (Pwd))) ; } test_field_Pwd () ; fn test_field_FnoIsuNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FnoIsuNo) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200InBlock1) , "::" , stringify ! (FnoIsuNo))) ; } test_field_FnoIsuNo () ; fn test_field_OrgOrdNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrgOrdNo) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200InBlock1) , "::" , stringify ! (OrgOrdNo))) ; } test_field_OrgOrdNo () ; fn test_field_FnoOrdprcPtnCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FnoOrdprcPtnCode) as usize - ptr as usize } , 50usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200InBlock1) , "::" , stringify ! (FnoOrdprcPtnCode))) ; } test_field_FnoOrdprcPtnCode () ; fn test_field_OrdPrc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdPrc) as usize - ptr as usize } , 52usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200InBlock1) , "::" , stringify ! (OrdPrc))) ; } test_field_OrdPrc () ; fn test_field_MdfyQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MdfyQty) as usize - ptr as usize } , 67usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200InBlock1) , "::" , stringify ! (MdfyQty))) ; } test_field_MdfyQty () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CFOAT00200OutBlock1 { pub RecCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub OrdMktCode : [:: std :: os :: raw :: c_char ; 2usize] , pub AcntNo : [:: std :: os :: raw :: c_char ; 20usize] , pub Pwd : [:: std :: os :: raw :: c_char ; 8usize] , pub FnoIsuNo : [:: std :: os :: raw :: c_char ; 12usize] , pub FnoOrdPtnCode : [:: std :: os :: raw :: c_char ; 2usize] , pub OrgOrdNo : [:: std :: os :: raw :: c_char ; 10usize] , pub FnoOrdprcPtnCode : [:: std :: os :: raw :: c_char ; 2usize] , pub OrdPrc : [:: std :: os :: raw :: c_char ; 15usize] , pub MdfyQty : [:: std :: os :: raw :: c_char ; 16usize] , pub CommdaCode : [:: std :: os :: raw :: c_char ; 2usize] , pub DscusBnsCmpltTime : [:: std :: os :: raw :: c_char ; 9usize] , pub GrpId : [:: std :: os :: raw :: c_char ; 20usize] , pub OrdSeqno : [:: std :: os :: raw :: c_char ; 10usize] , pub PtflNo : [:: std :: os :: raw :: c_char ; 10usize] , pub BskNo : [:: std :: os :: raw :: c_char ; 10usize] , pub TrchNo : [:: std :: os :: raw :: c_char ; 10usize] , pub ItemNo : [:: std :: os :: raw :: c_char ; 10usize] , pub MgempNo : [:: std :: os :: raw :: c_char ; 9usize] , pub FundId : [:: std :: os :: raw :: c_char ; 12usize] , pub FundOrgOrdNo : [:: std :: os :: raw :: c_char ; 10usize] , pub FundOrdNo : [:: std :: os :: raw :: c_char ; 10usize] , } # [test] fn bindgen_test_layout_CFOAT00200OutBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < CFOAT00200OutBlock1 > () , 214usize , concat ! ("Size of: " , stringify ! (CFOAT00200OutBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < CFOAT00200OutBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (CFOAT00200OutBlock1))) ; fn test_field_RecCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RecCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock1) , "::" , stringify ! (RecCnt))) ; } test_field_RecCnt () ; fn test_field_OrdMktCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdMktCode) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock1) , "::" , stringify ! (OrdMktCode))) ; } test_field_OrdMktCode () ; fn test_field_AcntNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNo) as usize - ptr as usize } , 7usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock1) , "::" , stringify ! (AcntNo))) ; } test_field_AcntNo () ; fn test_field_Pwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Pwd) as usize - ptr as usize } , 27usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock1) , "::" , stringify ! (Pwd))) ; } test_field_Pwd () ; fn test_field_FnoIsuNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FnoIsuNo) as usize - ptr as usize } , 35usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock1) , "::" , stringify ! (FnoIsuNo))) ; } test_field_FnoIsuNo () ; fn test_field_FnoOrdPtnCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FnoOrdPtnCode) as usize - ptr as usize } , 47usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock1) , "::" , stringify ! (FnoOrdPtnCode))) ; } test_field_FnoOrdPtnCode () ; fn test_field_OrgOrdNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrgOrdNo) as usize - ptr as usize } , 49usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock1) , "::" , stringify ! (OrgOrdNo))) ; } test_field_OrgOrdNo () ; fn test_field_FnoOrdprcPtnCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FnoOrdprcPtnCode) as usize - ptr as usize } , 59usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock1) , "::" , stringify ! (FnoOrdprcPtnCode))) ; } test_field_FnoOrdprcPtnCode () ; fn test_field_OrdPrc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdPrc) as usize - ptr as usize } , 61usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock1) , "::" , stringify ! (OrdPrc))) ; } test_field_OrdPrc () ; fn test_field_MdfyQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MdfyQty) as usize - ptr as usize } , 76usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock1) , "::" , stringify ! (MdfyQty))) ; } test_field_MdfyQty () ; fn test_field_CommdaCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CommdaCode) as usize - ptr as usize } , 92usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock1) , "::" , stringify ! (CommdaCode))) ; } test_field_CommdaCode () ; fn test_field_DscusBnsCmpltTime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . DscusBnsCmpltTime) as usize - ptr as usize } , 94usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock1) , "::" , stringify ! (DscusBnsCmpltTime))) ; } test_field_DscusBnsCmpltTime () ; fn test_field_GrpId () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . GrpId) as usize - ptr as usize } , 103usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock1) , "::" , stringify ! (GrpId))) ; } test_field_GrpId () ; fn test_field_OrdSeqno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdSeqno) as usize - ptr as usize } , 123usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock1) , "::" , stringify ! (OrdSeqno))) ; } test_field_OrdSeqno () ; fn test_field_PtflNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PtflNo) as usize - ptr as usize } , 133usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock1) , "::" , stringify ! (PtflNo))) ; } test_field_PtflNo () ; fn test_field_BskNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BskNo) as usize - ptr as usize } , 143usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock1) , "::" , stringify ! (BskNo))) ; } test_field_BskNo () ; fn test_field_TrchNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . TrchNo) as usize - ptr as usize } , 153usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock1) , "::" , stringify ! (TrchNo))) ; } test_field_TrchNo () ; fn test_field_ItemNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ItemNo) as usize - ptr as usize } , 163usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock1) , "::" , stringify ! (ItemNo))) ; } test_field_ItemNo () ; fn test_field_MgempNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MgempNo) as usize - ptr as usize } , 173usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock1) , "::" , stringify ! (MgempNo))) ; } test_field_MgempNo () ; fn test_field_FundId () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FundId) as usize - ptr as usize } , 182usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock1) , "::" , stringify ! (FundId))) ; } test_field_FundId () ; fn test_field_FundOrgOrdNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FundOrgOrdNo) as usize - ptr as usize } , 194usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock1) , "::" , stringify ! (FundOrgOrdNo))) ; } test_field_FundOrgOrdNo () ; fn test_field_FundOrdNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FundOrdNo) as usize - ptr as usize } , 204usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock1) , "::" , stringify ! (FundOrdNo))) ; } test_field_FundOrdNo () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CFOAT00200OutBlock2 { pub RecCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub OrdNo : [:: std :: os :: raw :: c_char ; 10usize] , pub BrnNm : [:: std :: os :: raw :: c_char ; 40usize] , pub AcntNm : [:: std :: os :: raw :: c_char ; 40usize] , pub IsuNm : [:: std :: os :: raw :: c_char ; 50usize] , pub OrdAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub MnyOrdAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub OrdMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub MnyOrdMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub OrdAbleQty : [:: std :: os :: raw :: c_char ; 16usize] , } # [test] fn bindgen_test_layout_CFOAT00200OutBlock2 () { assert_eq ! (:: std :: mem :: size_of :: < CFOAT00200OutBlock2 > () , 225usize , concat ! ("Size of: " , stringify ! (CFOAT00200OutBlock2))) ; assert_eq ! (:: std :: mem :: align_of :: < CFOAT00200OutBlock2 > () , 1usize , concat ! ("Alignment of " , stringify ! (CFOAT00200OutBlock2))) ; fn test_field_RecCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RecCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock2) , "::" , stringify ! (RecCnt))) ; } test_field_RecCnt () ; fn test_field_OrdNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdNo) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock2) , "::" , stringify ! (OrdNo))) ; } test_field_OrdNo () ; fn test_field_BrnNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BrnNm) as usize - ptr as usize } , 15usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock2) , "::" , stringify ! (BrnNm))) ; } test_field_BrnNm () ; fn test_field_AcntNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNm) as usize - ptr as usize } , 55usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock2) , "::" , stringify ! (AcntNm))) ; } test_field_AcntNm () ; fn test_field_IsuNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . IsuNm) as usize - ptr as usize } , 95usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock2) , "::" , stringify ! (IsuNm))) ; } test_field_IsuNm () ; fn test_field_OrdAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdAbleAmt) as usize - ptr as usize } , 145usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock2) , "::" , stringify ! (OrdAbleAmt))) ; } test_field_OrdAbleAmt () ; fn test_field_MnyOrdAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MnyOrdAbleAmt) as usize - ptr as usize } , 161usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock2) , "::" , stringify ! (MnyOrdAbleAmt))) ; } test_field_MnyOrdAbleAmt () ; fn test_field_OrdMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdMgn) as usize - ptr as usize } , 177usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock2) , "::" , stringify ! (OrdMgn))) ; } test_field_OrdMgn () ; fn test_field_MnyOrdMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MnyOrdMgn) as usize - ptr as usize } , 193usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock2) , "::" , stringify ! (MnyOrdMgn))) ; } test_field_MnyOrdMgn () ; fn test_field_OrdAbleQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdAbleQty) as usize - ptr as usize } , 209usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock2) , "::" , stringify ! (OrdAbleQty))) ; } test_field_OrdAbleQty () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CFOAT00200OutBlock { pub outBlock1 : CFOAT00200OutBlock1 , pub outBlock2 : CFOAT00200OutBlock2 , } # [test] fn bindgen_test_layout_CFOAT00200OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < CFOAT00200OutBlock > () , 439usize , concat ! ("Size of: " , stringify ! (CFOAT00200OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < CFOAT00200OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (CFOAT00200OutBlock))) ; fn test_field_outBlock1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . outBlock1) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock) , "::" , stringify ! (outBlock1))) ; } test_field_outBlock1 () ; fn test_field_outBlock2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00200OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . outBlock2) as usize - ptr as usize } , 214usize , concat ! ("Offset of field: " , stringify ! (CFOAT00200OutBlock) , "::" , stringify ! (outBlock2))) ; } test_field_outBlock2 () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CFOAT00300InBlock1 { pub AcntNo : [:: std :: os :: raw :: c_char ; 20usize] , pub Pwd : [:: std :: os :: raw :: c_char ; 8usize] , pub FnoIsuNo : [:: std :: os :: raw :: c_char ; 12usize] , pub OrgOrdNo : [:: std :: os :: raw :: c_char ; 10usize] , pub CancQty : [:: std :: os :: raw :: c_char ; 16usize] , } # [test] fn bindgen_test_layout_CFOAT00300InBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < CFOAT00300InBlock1 > () , 66usize , concat ! ("Size of: " , stringify ! (CFOAT00300InBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < CFOAT00300InBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (CFOAT00300InBlock1))) ; fn test_field_AcntNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNo) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300InBlock1) , "::" , stringify ! (AcntNo))) ; } test_field_AcntNo () ; fn test_field_Pwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Pwd) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300InBlock1) , "::" , stringify ! (Pwd))) ; } test_field_Pwd () ; fn test_field_FnoIsuNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FnoIsuNo) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300InBlock1) , "::" , stringify ! (FnoIsuNo))) ; } test_field_FnoIsuNo () ; fn test_field_OrgOrdNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrgOrdNo) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300InBlock1) , "::" , stringify ! (OrgOrdNo))) ; } test_field_OrgOrdNo () ; fn test_field_CancQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CancQty) as usize - ptr as usize } , 50usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300InBlock1) , "::" , stringify ! (CancQty))) ; } test_field_CancQty () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CFOAT00300OutBlock1 { pub RecCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub OrdMktCode : [:: std :: os :: raw :: c_char ; 2usize] , pub AcntNo : [:: std :: os :: raw :: c_char ; 20usize] , pub Pwd : [:: std :: os :: raw :: c_char ; 8usize] , pub FnoIsuNo : [:: std :: os :: raw :: c_char ; 12usize] , pub FnoOrdPtnCode : [:: std :: os :: raw :: c_char ; 2usize] , pub OrgOrdNo : [:: std :: os :: raw :: c_char ; 10usize] , pub CancQty : [:: std :: os :: raw :: c_char ; 16usize] , pub CommdaCode : [:: std :: os :: raw :: c_char ; 2usize] , pub DscusBnsCmpltTime : [:: std :: os :: raw :: c_char ; 9usize] , pub GrpId : [:: std :: os :: raw :: c_char ; 20usize] , pub OrdSeqno : [:: std :: os :: raw :: c_char ; 10usize] , pub PtflNo : [:: std :: os :: raw :: c_char ; 10usize] , pub BskNo : [:: std :: os :: raw :: c_char ; 10usize] , pub TrchNo : [:: std :: os :: raw :: c_char ; 10usize] , pub ItemNo : [:: std :: os :: raw :: c_char ; 10usize] , pub MgempNo : [:: std :: os :: raw :: c_char ; 9usize] , pub FundId : [:: std :: os :: raw :: c_char ; 12usize] , pub FundOrgOrdNo : [:: std :: os :: raw :: c_char ; 10usize] , pub FundOrdNo : [:: std :: os :: raw :: c_char ; 10usize] , } # [test] fn bindgen_test_layout_CFOAT00300OutBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < CFOAT00300OutBlock1 > () , 197usize , concat ! ("Size of: " , stringify ! (CFOAT00300OutBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < CFOAT00300OutBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (CFOAT00300OutBlock1))) ; fn test_field_RecCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RecCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock1) , "::" , stringify ! (RecCnt))) ; } test_field_RecCnt () ; fn test_field_OrdMktCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdMktCode) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock1) , "::" , stringify ! (OrdMktCode))) ; } test_field_OrdMktCode () ; fn test_field_AcntNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNo) as usize - ptr as usize } , 7usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock1) , "::" , stringify ! (AcntNo))) ; } test_field_AcntNo () ; fn test_field_Pwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Pwd) as usize - ptr as usize } , 27usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock1) , "::" , stringify ! (Pwd))) ; } test_field_Pwd () ; fn test_field_FnoIsuNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FnoIsuNo) as usize - ptr as usize } , 35usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock1) , "::" , stringify ! (FnoIsuNo))) ; } test_field_FnoIsuNo () ; fn test_field_FnoOrdPtnCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FnoOrdPtnCode) as usize - ptr as usize } , 47usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock1) , "::" , stringify ! (FnoOrdPtnCode))) ; } test_field_FnoOrdPtnCode () ; fn test_field_OrgOrdNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrgOrdNo) as usize - ptr as usize } , 49usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock1) , "::" , stringify ! (OrgOrdNo))) ; } test_field_OrgOrdNo () ; fn test_field_CancQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CancQty) as usize - ptr as usize } , 59usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock1) , "::" , stringify ! (CancQty))) ; } test_field_CancQty () ; fn test_field_CommdaCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CommdaCode) as usize - ptr as usize } , 75usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock1) , "::" , stringify ! (CommdaCode))) ; } test_field_CommdaCode () ; fn test_field_DscusBnsCmpltTime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . DscusBnsCmpltTime) as usize - ptr as usize } , 77usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock1) , "::" , stringify ! (DscusBnsCmpltTime))) ; } test_field_DscusBnsCmpltTime () ; fn test_field_GrpId () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . GrpId) as usize - ptr as usize } , 86usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock1) , "::" , stringify ! (GrpId))) ; } test_field_GrpId () ; fn test_field_OrdSeqno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdSeqno) as usize - ptr as usize } , 106usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock1) , "::" , stringify ! (OrdSeqno))) ; } test_field_OrdSeqno () ; fn test_field_PtflNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PtflNo) as usize - ptr as usize } , 116usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock1) , "::" , stringify ! (PtflNo))) ; } test_field_PtflNo () ; fn test_field_BskNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BskNo) as usize - ptr as usize } , 126usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock1) , "::" , stringify ! (BskNo))) ; } test_field_BskNo () ; fn test_field_TrchNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . TrchNo) as usize - ptr as usize } , 136usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock1) , "::" , stringify ! (TrchNo))) ; } test_field_TrchNo () ; fn test_field_ItemNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ItemNo) as usize - ptr as usize } , 146usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock1) , "::" , stringify ! (ItemNo))) ; } test_field_ItemNo () ; fn test_field_MgempNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MgempNo) as usize - ptr as usize } , 156usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock1) , "::" , stringify ! (MgempNo))) ; } test_field_MgempNo () ; fn test_field_FundId () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FundId) as usize - ptr as usize } , 165usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock1) , "::" , stringify ! (FundId))) ; } test_field_FundId () ; fn test_field_FundOrgOrdNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FundOrgOrdNo) as usize - ptr as usize } , 177usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock1) , "::" , stringify ! (FundOrgOrdNo))) ; } test_field_FundOrgOrdNo () ; fn test_field_FundOrdNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FundOrdNo) as usize - ptr as usize } , 187usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock1) , "::" , stringify ! (FundOrdNo))) ; } test_field_FundOrdNo () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CFOAT00300OutBlock2 { pub RecCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub OrdNo : [:: std :: os :: raw :: c_char ; 10usize] , pub BrnNm : [:: std :: os :: raw :: c_char ; 40usize] , pub AcntNm : [:: std :: os :: raw :: c_char ; 40usize] , pub IsuNm : [:: std :: os :: raw :: c_char ; 50usize] , pub OrdAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub MnyOrdAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub OrdMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub MnyOrdMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub OrdAbleQty : [:: std :: os :: raw :: c_char ; 16usize] , } # [test] fn bindgen_test_layout_CFOAT00300OutBlock2 () { assert_eq ! (:: std :: mem :: size_of :: < CFOAT00300OutBlock2 > () , 225usize , concat ! ("Size of: " , stringify ! (CFOAT00300OutBlock2))) ; assert_eq ! (:: std :: mem :: align_of :: < CFOAT00300OutBlock2 > () , 1usize , concat ! ("Alignment of " , stringify ! (CFOAT00300OutBlock2))) ; fn test_field_RecCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RecCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock2) , "::" , stringify ! (RecCnt))) ; } test_field_RecCnt () ; fn test_field_OrdNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdNo) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock2) , "::" , stringify ! (OrdNo))) ; } test_field_OrdNo () ; fn test_field_BrnNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BrnNm) as usize - ptr as usize } , 15usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock2) , "::" , stringify ! (BrnNm))) ; } test_field_BrnNm () ; fn test_field_AcntNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNm) as usize - ptr as usize } , 55usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock2) , "::" , stringify ! (AcntNm))) ; } test_field_AcntNm () ; fn test_field_IsuNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . IsuNm) as usize - ptr as usize } , 95usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock2) , "::" , stringify ! (IsuNm))) ; } test_field_IsuNm () ; fn test_field_OrdAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdAbleAmt) as usize - ptr as usize } , 145usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock2) , "::" , stringify ! (OrdAbleAmt))) ; } test_field_OrdAbleAmt () ; fn test_field_MnyOrdAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MnyOrdAbleAmt) as usize - ptr as usize } , 161usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock2) , "::" , stringify ! (MnyOrdAbleAmt))) ; } test_field_MnyOrdAbleAmt () ; fn test_field_OrdMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdMgn) as usize - ptr as usize } , 177usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock2) , "::" , stringify ! (OrdMgn))) ; } test_field_OrdMgn () ; fn test_field_MnyOrdMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MnyOrdMgn) as usize - ptr as usize } , 193usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock2) , "::" , stringify ! (MnyOrdMgn))) ; } test_field_MnyOrdMgn () ; fn test_field_OrdAbleQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdAbleQty) as usize - ptr as usize } , 209usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock2) , "::" , stringify ! (OrdAbleQty))) ; } test_field_OrdAbleQty () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CFOAT00300OutBlock { pub outBlock1 : CFOAT00300OutBlock1 , pub outBlock2 : CFOAT00300OutBlock2 , } # [test] fn bindgen_test_layout_CFOAT00300OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < CFOAT00300OutBlock > () , 422usize , concat ! ("Size of: " , stringify ! (CFOAT00300OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < CFOAT00300OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (CFOAT00300OutBlock))) ; fn test_field_outBlock1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . outBlock1) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock) , "::" , stringify ! (outBlock1))) ; } test_field_outBlock1 () ; fn test_field_outBlock2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOAT00300OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . outBlock2) as usize - ptr as usize } , 197usize , concat ! ("Offset of field: " , stringify ! (CFOAT00300OutBlock) , "::" , stringify ! (outBlock2))) ; } test_field_outBlock2 () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CFOBQ10500InBlock1 { pub RecCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub AcntNo : [:: std :: os :: raw :: c_char ; 20usize] , pub Pwd : [:: std :: os :: raw :: c_char ; 8usize] , } # [test] fn bindgen_test_layout_CFOBQ10500InBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < CFOBQ10500InBlock1 > () , 33usize , concat ! ("Size of: " , stringify ! (CFOBQ10500InBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < CFOBQ10500InBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (CFOBQ10500InBlock1))) ; fn test_field_RecCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RecCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500InBlock1) , "::" , stringify ! (RecCnt))) ; } test_field_RecCnt () ; fn test_field_AcntNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNo) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500InBlock1) , "::" , stringify ! (AcntNo))) ; } test_field_AcntNo () ; fn test_field_Pwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Pwd) as usize - ptr as usize } , 25usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500InBlock1) , "::" , stringify ! (Pwd))) ; } test_field_Pwd () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CFOBQ10500OutBlock1 { pub RecCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub AcntNo : [:: std :: os :: raw :: c_char ; 20usize] , pub Pwd : [:: std :: os :: raw :: c_char ; 8usize] , } # [test] fn bindgen_test_layout_CFOBQ10500OutBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < CFOBQ10500OutBlock1 > () , 33usize , concat ! ("Size of: " , stringify ! (CFOBQ10500OutBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < CFOBQ10500OutBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (CFOBQ10500OutBlock1))) ; fn test_field_RecCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RecCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock1) , "::" , stringify ! (RecCnt))) ; } test_field_RecCnt () ; fn test_field_AcntNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNo) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock1) , "::" , stringify ! (AcntNo))) ; } test_field_AcntNo () ; fn test_field_Pwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Pwd) as usize - ptr as usize } , 25usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock1) , "::" , stringify ! (Pwd))) ; } test_field_Pwd () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CFOBQ10500OutBlock2 { pub RecCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub AcntNm : [:: std :: os :: raw :: c_char ; 40usize] , pub DpsamtTotamt : [:: std :: os :: raw :: c_char ; 16usize] , pub Dps : [:: std :: os :: raw :: c_char ; 16usize] , pub SubstAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub FilupDpsamtTotamt : [:: std :: os :: raw :: c_char ; 16usize] , pub FilupDps : [:: std :: os :: raw :: c_char ; 16usize] , pub FutsPnlAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub WthdwAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub PsnOutAbleCurAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub PsnOutAbleSubstAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub Mgn : [:: std :: os :: raw :: c_char ; 16usize] , pub MnyMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub OrdAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub MnyOrdAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub AddMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub MnyAddMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub AmtPrdayChckInAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub FnoPrdaySubstSellAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub FnoCrdaySubstSellAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub FnoPrdayFdamt : [:: std :: os :: raw :: c_char ; 16usize] , pub FnoCrdayFdamt : [:: std :: os :: raw :: c_char ; 16usize] , pub FcurrSubstAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub FnoAcntAfmgnNm : [:: std :: os :: raw :: c_char ; 20usize] , } # [test] fn bindgen_test_layout_CFOBQ10500OutBlock2 () { assert_eq ! (:: std :: mem :: size_of :: < CFOBQ10500OutBlock2 > () , 401usize , concat ! ("Size of: " , stringify ! (CFOBQ10500OutBlock2))) ; assert_eq ! (:: std :: mem :: align_of :: < CFOBQ10500OutBlock2 > () , 1usize , concat ! ("Alignment of " , stringify ! (CFOBQ10500OutBlock2))) ; fn test_field_RecCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RecCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock2) , "::" , stringify ! (RecCnt))) ; } test_field_RecCnt () ; fn test_field_AcntNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNm) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock2) , "::" , stringify ! (AcntNm))) ; } test_field_AcntNm () ; fn test_field_DpsamtTotamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . DpsamtTotamt) as usize - ptr as usize } , 45usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock2) , "::" , stringify ! (DpsamtTotamt))) ; } test_field_DpsamtTotamt () ; fn test_field_Dps () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Dps) as usize - ptr as usize } , 61usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock2) , "::" , stringify ! (Dps))) ; } test_field_Dps () ; fn test_field_SubstAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . SubstAmt) as usize - ptr as usize } , 77usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock2) , "::" , stringify ! (SubstAmt))) ; } test_field_SubstAmt () ; fn test_field_FilupDpsamtTotamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FilupDpsamtTotamt) as usize - ptr as usize } , 93usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock2) , "::" , stringify ! (FilupDpsamtTotamt))) ; } test_field_FilupDpsamtTotamt () ; fn test_field_FilupDps () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FilupDps) as usize - ptr as usize } , 109usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock2) , "::" , stringify ! (FilupDps))) ; } test_field_FilupDps () ; fn test_field_FutsPnlAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FutsPnlAmt) as usize - ptr as usize } , 125usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock2) , "::" , stringify ! (FutsPnlAmt))) ; } test_field_FutsPnlAmt () ; fn test_field_WthdwAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . WthdwAbleAmt) as usize - ptr as usize } , 141usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock2) , "::" , stringify ! (WthdwAbleAmt))) ; } test_field_WthdwAbleAmt () ; fn test_field_PsnOutAbleCurAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PsnOutAbleCurAmt) as usize - ptr as usize } , 157usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock2) , "::" , stringify ! (PsnOutAbleCurAmt))) ; } test_field_PsnOutAbleCurAmt () ; fn test_field_PsnOutAbleSubstAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PsnOutAbleSubstAmt) as usize - ptr as usize } , 173usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock2) , "::" , stringify ! (PsnOutAbleSubstAmt))) ; } test_field_PsnOutAbleSubstAmt () ; fn test_field_Mgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Mgn) as usize - ptr as usize } , 189usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock2) , "::" , stringify ! (Mgn))) ; } test_field_Mgn () ; fn test_field_MnyMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MnyMgn) as usize - ptr as usize } , 205usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock2) , "::" , stringify ! (MnyMgn))) ; } test_field_MnyMgn () ; fn test_field_OrdAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdAbleAmt) as usize - ptr as usize } , 221usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock2) , "::" , stringify ! (OrdAbleAmt))) ; } test_field_OrdAbleAmt () ; fn test_field_MnyOrdAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MnyOrdAbleAmt) as usize - ptr as usize } , 237usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock2) , "::" , stringify ! (MnyOrdAbleAmt))) ; } test_field_MnyOrdAbleAmt () ; fn test_field_AddMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AddMgn) as usize - ptr as usize } , 253usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock2) , "::" , stringify ! (AddMgn))) ; } test_field_AddMgn () ; fn test_field_MnyAddMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MnyAddMgn) as usize - ptr as usize } , 269usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock2) , "::" , stringify ! (MnyAddMgn))) ; } test_field_MnyAddMgn () ; fn test_field_AmtPrdayChckInAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AmtPrdayChckInAmt) as usize - ptr as usize } , 285usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock2) , "::" , stringify ! (AmtPrdayChckInAmt))) ; } test_field_AmtPrdayChckInAmt () ; fn test_field_FnoPrdaySubstSellAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FnoPrdaySubstSellAmt) as usize - ptr as usize } , 301usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock2) , "::" , stringify ! (FnoPrdaySubstSellAmt))) ; } test_field_FnoPrdaySubstSellAmt () ; fn test_field_FnoCrdaySubstSellAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FnoCrdaySubstSellAmt) as usize - ptr as usize } , 317usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock2) , "::" , stringify ! (FnoCrdaySubstSellAmt))) ; } test_field_FnoCrdaySubstSellAmt () ; fn test_field_FnoPrdayFdamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FnoPrdayFdamt) as usize - ptr as usize } , 333usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock2) , "::" , stringify ! (FnoPrdayFdamt))) ; } test_field_FnoPrdayFdamt () ; fn test_field_FnoCrdayFdamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FnoCrdayFdamt) as usize - ptr as usize } , 349usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock2) , "::" , stringify ! (FnoCrdayFdamt))) ; } test_field_FnoCrdayFdamt () ; fn test_field_FcurrSubstAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FcurrSubstAmt) as usize - ptr as usize } , 365usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock2) , "::" , stringify ! (FcurrSubstAmt))) ; } test_field_FcurrSubstAmt () ; fn test_field_FnoAcntAfmgnNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FnoAcntAfmgnNm) as usize - ptr as usize } , 381usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock2) , "::" , stringify ! (FnoAcntAfmgnNm))) ; } test_field_FnoAcntAfmgnNm () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CFOBQ10500OutBlock3 { pub PdGrpCodeNm : [:: std :: os :: raw :: c_char ; 20usize] , pub NetRiskMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub PrcMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub SprdMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub PrcFlctMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub MinMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub OrdMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub OptNetBuyAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub CsgnMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub MaintMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub FutsBuyExecAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub FutsSellExecAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub OptBuyExecAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub OptSellExecAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub FutsPnlAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub TotRiskCsgnMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub UndCsgnMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub MgnRdctAmt : [:: std :: os :: raw :: c_char ; 16usize] , } # [test] fn bindgen_test_layout_CFOBQ10500OutBlock3 () { assert_eq ! (:: std :: mem :: size_of :: < CFOBQ10500OutBlock3 > () , 292usize , concat ! ("Size of: " , stringify ! (CFOBQ10500OutBlock3))) ; assert_eq ! (:: std :: mem :: align_of :: < CFOBQ10500OutBlock3 > () , 1usize , concat ! ("Alignment of " , stringify ! (CFOBQ10500OutBlock3))) ; fn test_field_PdGrpCodeNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PdGrpCodeNm) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock3) , "::" , stringify ! (PdGrpCodeNm))) ; } test_field_PdGrpCodeNm () ; fn test_field_NetRiskMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . NetRiskMgn) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock3) , "::" , stringify ! (NetRiskMgn))) ; } test_field_NetRiskMgn () ; fn test_field_PrcMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrcMgn) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock3) , "::" , stringify ! (PrcMgn))) ; } test_field_PrcMgn () ; fn test_field_SprdMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . SprdMgn) as usize - ptr as usize } , 52usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock3) , "::" , stringify ! (SprdMgn))) ; } test_field_SprdMgn () ; fn test_field_PrcFlctMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrcFlctMgn) as usize - ptr as usize } , 68usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock3) , "::" , stringify ! (PrcFlctMgn))) ; } test_field_PrcFlctMgn () ; fn test_field_MinMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MinMgn) as usize - ptr as usize } , 84usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock3) , "::" , stringify ! (MinMgn))) ; } test_field_MinMgn () ; fn test_field_OrdMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdMgn) as usize - ptr as usize } , 100usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock3) , "::" , stringify ! (OrdMgn))) ; } test_field_OrdMgn () ; fn test_field_OptNetBuyAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OptNetBuyAmt) as usize - ptr as usize } , 116usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock3) , "::" , stringify ! (OptNetBuyAmt))) ; } test_field_OptNetBuyAmt () ; fn test_field_CsgnMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CsgnMgn) as usize - ptr as usize } , 132usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock3) , "::" , stringify ! (CsgnMgn))) ; } test_field_CsgnMgn () ; fn test_field_MaintMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MaintMgn) as usize - ptr as usize } , 148usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock3) , "::" , stringify ! (MaintMgn))) ; } test_field_MaintMgn () ; fn test_field_FutsBuyExecAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FutsBuyExecAmt) as usize - ptr as usize } , 164usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock3) , "::" , stringify ! (FutsBuyExecAmt))) ; } test_field_FutsBuyExecAmt () ; fn test_field_FutsSellExecAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FutsSellExecAmt) as usize - ptr as usize } , 180usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock3) , "::" , stringify ! (FutsSellExecAmt))) ; } test_field_FutsSellExecAmt () ; fn test_field_OptBuyExecAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OptBuyExecAmt) as usize - ptr as usize } , 196usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock3) , "::" , stringify ! (OptBuyExecAmt))) ; } test_field_OptBuyExecAmt () ; fn test_field_OptSellExecAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OptSellExecAmt) as usize - ptr as usize } , 212usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock3) , "::" , stringify ! (OptSellExecAmt))) ; } test_field_OptSellExecAmt () ; fn test_field_FutsPnlAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FutsPnlAmt) as usize - ptr as usize } , 228usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock3) , "::" , stringify ! (FutsPnlAmt))) ; } test_field_FutsPnlAmt () ; fn test_field_TotRiskCsgnMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . TotRiskCsgnMgn) as usize - ptr as usize } , 244usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock3) , "::" , stringify ! (TotRiskCsgnMgn))) ; } test_field_TotRiskCsgnMgn () ; fn test_field_UndCsgnMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . UndCsgnMgn) as usize - ptr as usize } , 260usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock3) , "::" , stringify ! (UndCsgnMgn))) ; } test_field_UndCsgnMgn () ; fn test_field_MgnRdctAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOBQ10500OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MgnRdctAmt) as usize - ptr as usize } , 276usize , concat ! ("Offset of field: " , stringify ! (CFOBQ10500OutBlock3) , "::" , stringify ! (MgnRdctAmt))) ; } test_field_MgnRdctAmt () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CFOFQ02400InBlock1 { pub RecCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub AcntNo : [:: std :: os :: raw :: c_char ; 20usize] , pub Pwd : [:: std :: os :: raw :: c_char ; 8usize] , pub RegMktCode : [:: std :: os :: raw :: c_char ; 2usize] , pub BuyDt : [:: std :: os :: raw :: c_char ; 8usize] , } # [test] fn bindgen_test_layout_CFOFQ02400InBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < CFOFQ02400InBlock1 > () , 43usize , concat ! ("Size of: " , stringify ! (CFOFQ02400InBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < CFOFQ02400InBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (CFOFQ02400InBlock1))) ; fn test_field_RecCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RecCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400InBlock1) , "::" , stringify ! (RecCnt))) ; } test_field_RecCnt () ; fn test_field_AcntNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNo) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400InBlock1) , "::" , stringify ! (AcntNo))) ; } test_field_AcntNo () ; fn test_field_Pwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Pwd) as usize - ptr as usize } , 25usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400InBlock1) , "::" , stringify ! (Pwd))) ; } test_field_Pwd () ; fn test_field_RegMktCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RegMktCode) as usize - ptr as usize } , 33usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400InBlock1) , "::" , stringify ! (RegMktCode))) ; } test_field_RegMktCode () ; fn test_field_BuyDt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BuyDt) as usize - ptr as usize } , 35usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400InBlock1) , "::" , stringify ! (BuyDt))) ; } test_field_BuyDt () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CFOFQ02400OutBlock1 { pub RecCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub AcntNo : [:: std :: os :: raw :: c_char ; 20usize] , pub Pwd : [:: std :: os :: raw :: c_char ; 8usize] , pub RegMktCode : [:: std :: os :: raw :: c_char ; 2usize] , pub BuyDt : [:: std :: os :: raw :: c_char ; 8usize] , } # [test] fn bindgen_test_layout_CFOFQ02400OutBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < CFOFQ02400OutBlock1 > () , 43usize , concat ! ("Size of: " , stringify ! (CFOFQ02400OutBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < CFOFQ02400OutBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (CFOFQ02400OutBlock1))) ; fn test_field_RecCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RecCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock1) , "::" , stringify ! (RecCnt))) ; } test_field_RecCnt () ; fn test_field_AcntNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNo) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock1) , "::" , stringify ! (AcntNo))) ; } test_field_AcntNo () ; fn test_field_Pwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Pwd) as usize - ptr as usize } , 25usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock1) , "::" , stringify ! (Pwd))) ; } test_field_Pwd () ; fn test_field_RegMktCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RegMktCode) as usize - ptr as usize } , 33usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock1) , "::" , stringify ! (RegMktCode))) ; } test_field_RegMktCode () ; fn test_field_BuyDt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BuyDt) as usize - ptr as usize } , 35usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock1) , "::" , stringify ! (BuyDt))) ; } test_field_BuyDt () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CFOFQ02400OutBlock2 { pub RecCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub AcntNm : [:: std :: os :: raw :: c_char ; 40usize] , pub FutsCtrctQty : [:: std :: os :: raw :: c_char ; 16usize] , pub OptCtrctQty : [:: std :: os :: raw :: c_char ; 16usize] , pub CtrctQty : [:: std :: os :: raw :: c_char ; 16usize] , pub FutsCtrctAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub FutsBuyctrAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub FutsSlctrAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub CalloptCtrctAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub CallBuyAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub CallSellAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub PutoptCtrctAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub PutBuyAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub PutSellAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub AllCtrctAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub BuyctrAsmAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub SlctrAsmAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub FutsPnlSum : [:: std :: os :: raw :: c_char ; 16usize] , pub OptPnlSum : [:: std :: os :: raw :: c_char ; 16usize] , pub AllPnlSum : [:: std :: os :: raw :: c_char ; 16usize] , } # [test] fn bindgen_test_layout_CFOFQ02400OutBlock2 () { assert_eq ! (:: std :: mem :: size_of :: < CFOFQ02400OutBlock2 > () , 333usize , concat ! ("Size of: " , stringify ! (CFOFQ02400OutBlock2))) ; assert_eq ! (:: std :: mem :: align_of :: < CFOFQ02400OutBlock2 > () , 1usize , concat ! ("Alignment of " , stringify ! (CFOFQ02400OutBlock2))) ; fn test_field_RecCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RecCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock2) , "::" , stringify ! (RecCnt))) ; } test_field_RecCnt () ; fn test_field_AcntNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNm) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock2) , "::" , stringify ! (AcntNm))) ; } test_field_AcntNm () ; fn test_field_FutsCtrctQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FutsCtrctQty) as usize - ptr as usize } , 45usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock2) , "::" , stringify ! (FutsCtrctQty))) ; } test_field_FutsCtrctQty () ; fn test_field_OptCtrctQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OptCtrctQty) as usize - ptr as usize } , 61usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock2) , "::" , stringify ! (OptCtrctQty))) ; } test_field_OptCtrctQty () ; fn test_field_CtrctQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CtrctQty) as usize - ptr as usize } , 77usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock2) , "::" , stringify ! (CtrctQty))) ; } test_field_CtrctQty () ; fn test_field_FutsCtrctAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FutsCtrctAmt) as usize - ptr as usize } , 93usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock2) , "::" , stringify ! (FutsCtrctAmt))) ; } test_field_FutsCtrctAmt () ; fn test_field_FutsBuyctrAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FutsBuyctrAmt) as usize - ptr as usize } , 109usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock2) , "::" , stringify ! (FutsBuyctrAmt))) ; } test_field_FutsBuyctrAmt () ; fn test_field_FutsSlctrAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FutsSlctrAmt) as usize - ptr as usize } , 125usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock2) , "::" , stringify ! (FutsSlctrAmt))) ; } test_field_FutsSlctrAmt () ; fn test_field_CalloptCtrctAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CalloptCtrctAmt) as usize - ptr as usize } , 141usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock2) , "::" , stringify ! (CalloptCtrctAmt))) ; } test_field_CalloptCtrctAmt () ; fn test_field_CallBuyAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CallBuyAmt) as usize - ptr as usize } , 157usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock2) , "::" , stringify ! (CallBuyAmt))) ; } test_field_CallBuyAmt () ; fn test_field_CallSellAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CallSellAmt) as usize - ptr as usize } , 173usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock2) , "::" , stringify ! (CallSellAmt))) ; } test_field_CallSellAmt () ; fn test_field_PutoptCtrctAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PutoptCtrctAmt) as usize - ptr as usize } , 189usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock2) , "::" , stringify ! (PutoptCtrctAmt))) ; } test_field_PutoptCtrctAmt () ; fn test_field_PutBuyAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PutBuyAmt) as usize - ptr as usize } , 205usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock2) , "::" , stringify ! (PutBuyAmt))) ; } test_field_PutBuyAmt () ; fn test_field_PutSellAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PutSellAmt) as usize - ptr as usize } , 221usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock2) , "::" , stringify ! (PutSellAmt))) ; } test_field_PutSellAmt () ; fn test_field_AllCtrctAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AllCtrctAmt) as usize - ptr as usize } , 237usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock2) , "::" , stringify ! (AllCtrctAmt))) ; } test_field_AllCtrctAmt () ; fn test_field_BuyctrAsmAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BuyctrAsmAmt) as usize - ptr as usize } , 253usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock2) , "::" , stringify ! (BuyctrAsmAmt))) ; } test_field_BuyctrAsmAmt () ; fn test_field_SlctrAsmAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . SlctrAsmAmt) as usize - ptr as usize } , 269usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock2) , "::" , stringify ! (SlctrAsmAmt))) ; } test_field_SlctrAsmAmt () ; fn test_field_FutsPnlSum () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FutsPnlSum) as usize - ptr as usize } , 285usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock2) , "::" , stringify ! (FutsPnlSum))) ; } test_field_FutsPnlSum () ; fn test_field_OptPnlSum () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OptPnlSum) as usize - ptr as usize } , 301usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock2) , "::" , stringify ! (OptPnlSum))) ; } test_field_OptPnlSum () ; fn test_field_AllPnlSum () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AllPnlSum) as usize - ptr as usize } , 317usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock2) , "::" , stringify ! (AllPnlSum))) ; } test_field_AllPnlSum () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CFOFQ02400OutBlock3 { pub FnoClssCode : [:: std :: os :: raw :: c_char ; 1usize] , pub FutsSellQty : [:: std :: os :: raw :: c_char ; 16usize] , pub FutsSellPnl : [:: std :: os :: raw :: c_char ; 16usize] , pub FutsBuyQty : [:: std :: os :: raw :: c_char ; 16usize] , pub FutsBuyPnl : [:: std :: os :: raw :: c_char ; 16usize] , pub CallSellQty : [:: std :: os :: raw :: c_char ; 16usize] , pub CallSellPnl : [:: std :: os :: raw :: c_char ; 16usize] , pub CallBuyQty : [:: std :: os :: raw :: c_char ; 16usize] , pub CallBuyPnl : [:: std :: os :: raw :: c_char ; 16usize] , pub PutSellQty : [:: std :: os :: raw :: c_char ; 16usize] , pub PutSellPnl : [:: std :: os :: raw :: c_char ; 16usize] , pub PutBuyQty : [:: std :: os :: raw :: c_char ; 16usize] , pub PutBuyPnl : [:: std :: os :: raw :: c_char ; 16usize] , } # [test] fn bindgen_test_layout_CFOFQ02400OutBlock3 () { assert_eq ! (:: std :: mem :: size_of :: < CFOFQ02400OutBlock3 > () , 193usize , concat ! ("Size of: " , stringify ! (CFOFQ02400OutBlock3))) ; assert_eq ! (:: std :: mem :: align_of :: < CFOFQ02400OutBlock3 > () , 1usize , concat ! ("Alignment of " , stringify ! (CFOFQ02400OutBlock3))) ; fn test_field_FnoClssCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FnoClssCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock3) , "::" , stringify ! (FnoClssCode))) ; } test_field_FnoClssCode () ; fn test_field_FutsSellQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FutsSellQty) as usize - ptr as usize } , 1usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock3) , "::" , stringify ! (FutsSellQty))) ; } test_field_FutsSellQty () ; fn test_field_FutsSellPnl () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FutsSellPnl) as usize - ptr as usize } , 17usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock3) , "::" , stringify ! (FutsSellPnl))) ; } test_field_FutsSellPnl () ; fn test_field_FutsBuyQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FutsBuyQty) as usize - ptr as usize } , 33usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock3) , "::" , stringify ! (FutsBuyQty))) ; } test_field_FutsBuyQty () ; fn test_field_FutsBuyPnl () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FutsBuyPnl) as usize - ptr as usize } , 49usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock3) , "::" , stringify ! (FutsBuyPnl))) ; } test_field_FutsBuyPnl () ; fn test_field_CallSellQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CallSellQty) as usize - ptr as usize } , 65usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock3) , "::" , stringify ! (CallSellQty))) ; } test_field_CallSellQty () ; fn test_field_CallSellPnl () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CallSellPnl) as usize - ptr as usize } , 81usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock3) , "::" , stringify ! (CallSellPnl))) ; } test_field_CallSellPnl () ; fn test_field_CallBuyQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CallBuyQty) as usize - ptr as usize } , 97usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock3) , "::" , stringify ! (CallBuyQty))) ; } test_field_CallBuyQty () ; fn test_field_CallBuyPnl () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CallBuyPnl) as usize - ptr as usize } , 113usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock3) , "::" , stringify ! (CallBuyPnl))) ; } test_field_CallBuyPnl () ; fn test_field_PutSellQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PutSellQty) as usize - ptr as usize } , 129usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock3) , "::" , stringify ! (PutSellQty))) ; } test_field_PutSellQty () ; fn test_field_PutSellPnl () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PutSellPnl) as usize - ptr as usize } , 145usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock3) , "::" , stringify ! (PutSellPnl))) ; } test_field_PutSellPnl () ; fn test_field_PutBuyQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PutBuyQty) as usize - ptr as usize } , 161usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock3) , "::" , stringify ! (PutBuyQty))) ; } test_field_PutBuyQty () ; fn test_field_PutBuyPnl () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PutBuyPnl) as usize - ptr as usize } , 177usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock3) , "::" , stringify ! (PutBuyPnl))) ; } test_field_PutBuyPnl () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CFOFQ02400OutBlock4 { pub IsuNo : [:: std :: os :: raw :: c_char ; 12usize] , pub IsuNm : [:: std :: os :: raw :: c_char ; 40usize] , pub BnsTpCode : [:: std :: os :: raw :: c_char ; 1usize] , pub BnsTpNm : [:: std :: os :: raw :: c_char ; 10usize] , pub BalQty : [:: std :: os :: raw :: c_char ; 16usize] , pub FnoAvrPrc : [:: std :: os :: raw :: c_char ; 19usize] , pub BgnAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub ThdayLqdtQty : [:: std :: os :: raw :: c_char ; 16usize] , pub Curprc : [:: std :: os :: raw :: c_char ; 13usize] , pub EvalAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub EvalPnlAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub EvalErnrat : [:: std :: os :: raw :: c_char ; 12usize] , } # [test] fn bindgen_test_layout_CFOFQ02400OutBlock4 () { assert_eq ! (:: std :: mem :: size_of :: < CFOFQ02400OutBlock4 > () , 187usize , concat ! ("Size of: " , stringify ! (CFOFQ02400OutBlock4))) ; assert_eq ! (:: std :: mem :: align_of :: < CFOFQ02400OutBlock4 > () , 1usize , concat ! ("Alignment of " , stringify ! (CFOFQ02400OutBlock4))) ; fn test_field_IsuNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock4 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . IsuNo) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock4) , "::" , stringify ! (IsuNo))) ; } test_field_IsuNo () ; fn test_field_IsuNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock4 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . IsuNm) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock4) , "::" , stringify ! (IsuNm))) ; } test_field_IsuNm () ; fn test_field_BnsTpCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock4 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BnsTpCode) as usize - ptr as usize } , 52usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock4) , "::" , stringify ! (BnsTpCode))) ; } test_field_BnsTpCode () ; fn test_field_BnsTpNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock4 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BnsTpNm) as usize - ptr as usize } , 53usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock4) , "::" , stringify ! (BnsTpNm))) ; } test_field_BnsTpNm () ; fn test_field_BalQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock4 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BalQty) as usize - ptr as usize } , 63usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock4) , "::" , stringify ! (BalQty))) ; } test_field_BalQty () ; fn test_field_FnoAvrPrc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock4 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FnoAvrPrc) as usize - ptr as usize } , 79usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock4) , "::" , stringify ! (FnoAvrPrc))) ; } test_field_FnoAvrPrc () ; fn test_field_BgnAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock4 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BgnAmt) as usize - ptr as usize } , 98usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock4) , "::" , stringify ! (BgnAmt))) ; } test_field_BgnAmt () ; fn test_field_ThdayLqdtQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock4 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ThdayLqdtQty) as usize - ptr as usize } , 114usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock4) , "::" , stringify ! (ThdayLqdtQty))) ; } test_field_ThdayLqdtQty () ; fn test_field_Curprc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock4 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Curprc) as usize - ptr as usize } , 130usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock4) , "::" , stringify ! (Curprc))) ; } test_field_Curprc () ; fn test_field_EvalAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock4 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . EvalAmt) as usize - ptr as usize } , 143usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock4) , "::" , stringify ! (EvalAmt))) ; } test_field_EvalAmt () ; fn test_field_EvalPnlAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock4 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . EvalPnlAmt) as usize - ptr as usize } , 159usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock4) , "::" , stringify ! (EvalPnlAmt))) ; } test_field_EvalPnlAmt () ; fn test_field_EvalErnrat () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CFOFQ02400OutBlock4 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . EvalErnrat) as usize - ptr as usize } , 175usize , concat ! ("Offset of field: " , stringify ! (CFOFQ02400OutBlock4) , "::" , stringify ! (EvalErnrat))) ; } test_field_EvalErnrat () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CSPAQ12200InBlock1 { pub RecCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub MgmtBrnNo : [:: std :: os :: raw :: c_char ; 3usize] , pub AcntNo : [:: std :: os :: raw :: c_char ; 20usize] , pub Pwd : [:: std :: os :: raw :: c_char ; 8usize] , pub BalCreTp : [:: std :: os :: raw :: c_char ; 1usize] , } # [test] fn bindgen_test_layout_CSPAQ12200InBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < CSPAQ12200InBlock1 > () , 37usize , concat ! ("Size of: " , stringify ! (CSPAQ12200InBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < CSPAQ12200InBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (CSPAQ12200InBlock1))) ; fn test_field_RecCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RecCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200InBlock1) , "::" , stringify ! (RecCnt))) ; } test_field_RecCnt () ; fn test_field_MgmtBrnNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MgmtBrnNo) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200InBlock1) , "::" , stringify ! (MgmtBrnNo))) ; } test_field_MgmtBrnNo () ; fn test_field_AcntNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNo) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200InBlock1) , "::" , stringify ! (AcntNo))) ; } test_field_AcntNo () ; fn test_field_Pwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Pwd) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200InBlock1) , "::" , stringify ! (Pwd))) ; } test_field_Pwd () ; fn test_field_BalCreTp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BalCreTp) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200InBlock1) , "::" , stringify ! (BalCreTp))) ; } test_field_BalCreTp () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CSPAQ12200OutBlock1 { pub RecCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub MgmtBrnNo : [:: std :: os :: raw :: c_char ; 3usize] , pub AcntNo : [:: std :: os :: raw :: c_char ; 20usize] , pub Pwd : [:: std :: os :: raw :: c_char ; 8usize] , pub BalCreTp : [:: std :: os :: raw :: c_char ; 1usize] , } # [test] fn bindgen_test_layout_CSPAQ12200OutBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < CSPAQ12200OutBlock1 > () , 37usize , concat ! ("Size of: " , stringify ! (CSPAQ12200OutBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < CSPAQ12200OutBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (CSPAQ12200OutBlock1))) ; fn test_field_RecCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RecCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock1) , "::" , stringify ! (RecCnt))) ; } test_field_RecCnt () ; fn test_field_MgmtBrnNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MgmtBrnNo) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock1) , "::" , stringify ! (MgmtBrnNo))) ; } test_field_MgmtBrnNo () ; fn test_field_AcntNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNo) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock1) , "::" , stringify ! (AcntNo))) ; } test_field_AcntNo () ; fn test_field_Pwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Pwd) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock1) , "::" , stringify ! (Pwd))) ; } test_field_Pwd () ; fn test_field_BalCreTp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BalCreTp) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock1) , "::" , stringify ! (BalCreTp))) ; } test_field_BalCreTp () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CSPAQ12200OutBlock2 { pub RecCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub BrnNm : [:: std :: os :: raw :: c_char ; 40usize] , pub AcntNm : [:: std :: os :: raw :: c_char ; 40usize] , pub MnyOrdAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub MnyoutAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub SeOrdAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub KdqOrdAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub BalEvalAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub RcvblAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub DpsastTotamt : [:: std :: os :: raw :: c_char ; 16usize] , pub PnlRat : [:: std :: os :: raw :: c_char ; 18usize] , pub InvstOrgAmt : [:: std :: os :: raw :: c_char ; 20usize] , pub InvstPlAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdtPldgOrdAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub Dps : [:: std :: os :: raw :: c_char ; 16usize] , pub SubstAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub D1Dps : [:: std :: os :: raw :: c_char ; 16usize] , pub D2Dps : [:: std :: os :: raw :: c_char ; 16usize] , pub MnyrclAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub MgnMny : [:: std :: os :: raw :: c_char ; 16usize] , pub MgnSubst : [:: std :: os :: raw :: c_char ; 16usize] , pub ChckAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub SubstOrdAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub MgnRat100pctOrdAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub MgnRat35ordAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub MgnRat50ordAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub PrdaySellAdjstAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub PrdayBuyAdjstAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdaySellAdjstAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdayBuyAdjstAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub D1ovdRepayRqrdAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub D2ovdRepayRqrdAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub D1PrsmptWthdwAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub D2PrsmptWthdwAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub DpspdgLoanAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub Imreq : [:: std :: os :: raw :: c_char ; 16usize] , pub MloanAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub ChgAfPldgRat : [:: std :: os :: raw :: c_char ; 9usize] , pub OrgPldgAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub SubPldgAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub RqrdPldgAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub OrgPdlckAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub PdlckAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub AddPldgMny : [:: std :: os :: raw :: c_char ; 16usize] , pub D1OrdAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdtIntdltAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub EtclndAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub NtdayPrsmptCvrgAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub OrgPldgSumAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdtOrdAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub SubPldgSumAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdtPldgAmtMny : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdtPldgSubstAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub AddCrdtPldgMny : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdtPldgRuseAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub AddCrdtPldgSubst : [:: std :: os :: raw :: c_char ; 16usize] , pub CslLoanAmtdt1 : [:: std :: os :: raw :: c_char ; 16usize] , pub DpslRestrcAmt : [:: std :: os :: raw :: c_char ; 16usize] , } # [test] fn bindgen_test_layout_CSPAQ12200OutBlock2 () { assert_eq ! (:: std :: mem :: size_of :: < CSPAQ12200OutBlock2 > () , 964usize , concat ! ("Size of: " , stringify ! (CSPAQ12200OutBlock2))) ; assert_eq ! (:: std :: mem :: align_of :: < CSPAQ12200OutBlock2 > () , 1usize , concat ! ("Alignment of " , stringify ! (CSPAQ12200OutBlock2))) ; fn test_field_RecCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RecCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (RecCnt))) ; } test_field_RecCnt () ; fn test_field_BrnNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BrnNm) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (BrnNm))) ; } test_field_BrnNm () ; fn test_field_AcntNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNm) as usize - ptr as usize } , 45usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (AcntNm))) ; } test_field_AcntNm () ; fn test_field_MnyOrdAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MnyOrdAbleAmt) as usize - ptr as usize } , 85usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (MnyOrdAbleAmt))) ; } test_field_MnyOrdAbleAmt () ; fn test_field_MnyoutAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MnyoutAbleAmt) as usize - ptr as usize } , 101usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (MnyoutAbleAmt))) ; } test_field_MnyoutAbleAmt () ; fn test_field_SeOrdAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . SeOrdAbleAmt) as usize - ptr as usize } , 117usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (SeOrdAbleAmt))) ; } test_field_SeOrdAbleAmt () ; fn test_field_KdqOrdAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . KdqOrdAbleAmt) as usize - ptr as usize } , 133usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (KdqOrdAbleAmt))) ; } test_field_KdqOrdAbleAmt () ; fn test_field_BalEvalAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BalEvalAmt) as usize - ptr as usize } , 149usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (BalEvalAmt))) ; } test_field_BalEvalAmt () ; fn test_field_RcvblAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RcvblAmt) as usize - ptr as usize } , 165usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (RcvblAmt))) ; } test_field_RcvblAmt () ; fn test_field_DpsastTotamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . DpsastTotamt) as usize - ptr as usize } , 181usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (DpsastTotamt))) ; } test_field_DpsastTotamt () ; fn test_field_PnlRat () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PnlRat) as usize - ptr as usize } , 197usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (PnlRat))) ; } test_field_PnlRat () ; fn test_field_InvstOrgAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . InvstOrgAmt) as usize - ptr as usize } , 215usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (InvstOrgAmt))) ; } test_field_InvstOrgAmt () ; fn test_field_InvstPlAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . InvstPlAmt) as usize - ptr as usize } , 235usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (InvstPlAmt))) ; } test_field_InvstPlAmt () ; fn test_field_CrdtPldgOrdAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdtPldgOrdAmt) as usize - ptr as usize } , 251usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (CrdtPldgOrdAmt))) ; } test_field_CrdtPldgOrdAmt () ; fn test_field_Dps () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Dps) as usize - ptr as usize } , 267usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (Dps))) ; } test_field_Dps () ; fn test_field_SubstAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . SubstAmt) as usize - ptr as usize } , 283usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (SubstAmt))) ; } test_field_SubstAmt () ; fn test_field_D1Dps () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . D1Dps) as usize - ptr as usize } , 299usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (D1Dps))) ; } test_field_D1Dps () ; fn test_field_D2Dps () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . D2Dps) as usize - ptr as usize } , 315usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (D2Dps))) ; } test_field_D2Dps () ; fn test_field_MnyrclAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MnyrclAmt) as usize - ptr as usize } , 331usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (MnyrclAmt))) ; } test_field_MnyrclAmt () ; fn test_field_MgnMny () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MgnMny) as usize - ptr as usize } , 347usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (MgnMny))) ; } test_field_MgnMny () ; fn test_field_MgnSubst () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MgnSubst) as usize - ptr as usize } , 363usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (MgnSubst))) ; } test_field_MgnSubst () ; fn test_field_ChckAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ChckAmt) as usize - ptr as usize } , 379usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (ChckAmt))) ; } test_field_ChckAmt () ; fn test_field_SubstOrdAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . SubstOrdAbleAmt) as usize - ptr as usize } , 395usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (SubstOrdAbleAmt))) ; } test_field_SubstOrdAbleAmt () ; fn test_field_MgnRat100pctOrdAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MgnRat100pctOrdAbleAmt) as usize - ptr as usize } , 411usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (MgnRat100pctOrdAbleAmt))) ; } test_field_MgnRat100pctOrdAbleAmt () ; fn test_field_MgnRat35ordAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MgnRat35ordAbleAmt) as usize - ptr as usize } , 427usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (MgnRat35ordAbleAmt))) ; } test_field_MgnRat35ordAbleAmt () ; fn test_field_MgnRat50ordAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MgnRat50ordAbleAmt) as usize - ptr as usize } , 443usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (MgnRat50ordAbleAmt))) ; } test_field_MgnRat50ordAbleAmt () ; fn test_field_PrdaySellAdjstAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrdaySellAdjstAmt) as usize - ptr as usize } , 459usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (PrdaySellAdjstAmt))) ; } test_field_PrdaySellAdjstAmt () ; fn test_field_PrdayBuyAdjstAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrdayBuyAdjstAmt) as usize - ptr as usize } , 475usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (PrdayBuyAdjstAmt))) ; } test_field_PrdayBuyAdjstAmt () ; fn test_field_CrdaySellAdjstAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdaySellAdjstAmt) as usize - ptr as usize } , 491usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (CrdaySellAdjstAmt))) ; } test_field_CrdaySellAdjstAmt () ; fn test_field_CrdayBuyAdjstAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdayBuyAdjstAmt) as usize - ptr as usize } , 507usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (CrdayBuyAdjstAmt))) ; } test_field_CrdayBuyAdjstAmt () ; fn test_field_D1ovdRepayRqrdAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . D1ovdRepayRqrdAmt) as usize - ptr as usize } , 523usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (D1ovdRepayRqrdAmt))) ; } test_field_D1ovdRepayRqrdAmt () ; fn test_field_D2ovdRepayRqrdAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . D2ovdRepayRqrdAmt) as usize - ptr as usize } , 539usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (D2ovdRepayRqrdAmt))) ; } test_field_D2ovdRepayRqrdAmt () ; fn test_field_D1PrsmptWthdwAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . D1PrsmptWthdwAbleAmt) as usize - ptr as usize } , 555usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (D1PrsmptWthdwAbleAmt))) ; } test_field_D1PrsmptWthdwAbleAmt () ; fn test_field_D2PrsmptWthdwAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . D2PrsmptWthdwAbleAmt) as usize - ptr as usize } , 571usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (D2PrsmptWthdwAbleAmt))) ; } test_field_D2PrsmptWthdwAbleAmt () ; fn test_field_DpspdgLoanAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . DpspdgLoanAmt) as usize - ptr as usize } , 587usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (DpspdgLoanAmt))) ; } test_field_DpspdgLoanAmt () ; fn test_field_Imreq () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Imreq) as usize - ptr as usize } , 603usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (Imreq))) ; } test_field_Imreq () ; fn test_field_MloanAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MloanAmt) as usize - ptr as usize } , 619usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (MloanAmt))) ; } test_field_MloanAmt () ; fn test_field_ChgAfPldgRat () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ChgAfPldgRat) as usize - ptr as usize } , 635usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (ChgAfPldgRat))) ; } test_field_ChgAfPldgRat () ; fn test_field_OrgPldgAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrgPldgAmt) as usize - ptr as usize } , 644usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (OrgPldgAmt))) ; } test_field_OrgPldgAmt () ; fn test_field_SubPldgAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . SubPldgAmt) as usize - ptr as usize } , 660usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (SubPldgAmt))) ; } test_field_SubPldgAmt () ; fn test_field_RqrdPldgAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RqrdPldgAmt) as usize - ptr as usize } , 676usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (RqrdPldgAmt))) ; } test_field_RqrdPldgAmt () ; fn test_field_OrgPdlckAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrgPdlckAmt) as usize - ptr as usize } , 692usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (OrgPdlckAmt))) ; } test_field_OrgPdlckAmt () ; fn test_field_PdlckAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PdlckAmt) as usize - ptr as usize } , 708usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (PdlckAmt))) ; } test_field_PdlckAmt () ; fn test_field_AddPldgMny () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AddPldgMny) as usize - ptr as usize } , 724usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (AddPldgMny))) ; } test_field_AddPldgMny () ; fn test_field_D1OrdAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . D1OrdAbleAmt) as usize - ptr as usize } , 740usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (D1OrdAbleAmt))) ; } test_field_D1OrdAbleAmt () ; fn test_field_CrdtIntdltAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdtIntdltAmt) as usize - ptr as usize } , 756usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (CrdtIntdltAmt))) ; } test_field_CrdtIntdltAmt () ; fn test_field_EtclndAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . EtclndAmt) as usize - ptr as usize } , 772usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (EtclndAmt))) ; } test_field_EtclndAmt () ; fn test_field_NtdayPrsmptCvrgAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . NtdayPrsmptCvrgAmt) as usize - ptr as usize } , 788usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (NtdayPrsmptCvrgAmt))) ; } test_field_NtdayPrsmptCvrgAmt () ; fn test_field_OrgPldgSumAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrgPldgSumAmt) as usize - ptr as usize } , 804usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (OrgPldgSumAmt))) ; } test_field_OrgPldgSumAmt () ; fn test_field_CrdtOrdAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdtOrdAbleAmt) as usize - ptr as usize } , 820usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (CrdtOrdAbleAmt))) ; } test_field_CrdtOrdAbleAmt () ; fn test_field_SubPldgSumAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . SubPldgSumAmt) as usize - ptr as usize } , 836usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (SubPldgSumAmt))) ; } test_field_SubPldgSumAmt () ; fn test_field_CrdtPldgAmtMny () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdtPldgAmtMny) as usize - ptr as usize } , 852usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (CrdtPldgAmtMny))) ; } test_field_CrdtPldgAmtMny () ; fn test_field_CrdtPldgSubstAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdtPldgSubstAmt) as usize - ptr as usize } , 868usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (CrdtPldgSubstAmt))) ; } test_field_CrdtPldgSubstAmt () ; fn test_field_AddCrdtPldgMny () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AddCrdtPldgMny) as usize - ptr as usize } , 884usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (AddCrdtPldgMny))) ; } test_field_AddCrdtPldgMny () ; fn test_field_CrdtPldgRuseAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdtPldgRuseAmt) as usize - ptr as usize } , 900usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (CrdtPldgRuseAmt))) ; } test_field_CrdtPldgRuseAmt () ; fn test_field_AddCrdtPldgSubst () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AddCrdtPldgSubst) as usize - ptr as usize } , 916usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (AddCrdtPldgSubst))) ; } test_field_AddCrdtPldgSubst () ; fn test_field_CslLoanAmtdt1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CslLoanAmtdt1) as usize - ptr as usize } , 932usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (CslLoanAmtdt1))) ; } test_field_CslLoanAmtdt1 () ; fn test_field_DpslRestrcAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . DpslRestrcAmt) as usize - ptr as usize } , 948usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock2) , "::" , stringify ! (DpslRestrcAmt))) ; } test_field_DpslRestrcAmt () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CSPAQ12200OutBlock { pub outBlock1 : CSPAQ12200OutBlock1 , pub outBlock2 : CSPAQ12200OutBlock2 , } # [test] fn bindgen_test_layout_CSPAQ12200OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < CSPAQ12200OutBlock > () , 1001usize , concat ! ("Size of: " , stringify ! (CSPAQ12200OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < CSPAQ12200OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (CSPAQ12200OutBlock))) ; fn test_field_outBlock1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . outBlock1) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock) , "::" , stringify ! (outBlock1))) ; } test_field_outBlock1 () ; fn test_field_outBlock2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12200OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . outBlock2) as usize - ptr as usize } , 37usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12200OutBlock) , "::" , stringify ! (outBlock2))) ; } test_field_outBlock2 () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CSPAQ12300InBlock1 { pub RecCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub AcntNo : [:: std :: os :: raw :: c_char ; 20usize] , pub Pwd : [:: std :: os :: raw :: c_char ; 8usize] , pub BalCreTp : [:: std :: os :: raw :: c_char ; 1usize] , pub CmsnAppTpCode : [:: std :: os :: raw :: c_char ; 1usize] , pub D2balBaseQryTp : [:: std :: os :: raw :: c_char ; 1usize] , pub UprcTpCode : [:: std :: os :: raw :: c_char ; 1usize] , } # [test] fn bindgen_test_layout_CSPAQ12300InBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < CSPAQ12300InBlock1 > () , 37usize , concat ! ("Size of: " , stringify ! (CSPAQ12300InBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < CSPAQ12300InBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (CSPAQ12300InBlock1))) ; fn test_field_RecCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RecCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300InBlock1) , "::" , stringify ! (RecCnt))) ; } test_field_RecCnt () ; fn test_field_AcntNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNo) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300InBlock1) , "::" , stringify ! (AcntNo))) ; } test_field_AcntNo () ; fn test_field_Pwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Pwd) as usize - ptr as usize } , 25usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300InBlock1) , "::" , stringify ! (Pwd))) ; } test_field_Pwd () ; fn test_field_BalCreTp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BalCreTp) as usize - ptr as usize } , 33usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300InBlock1) , "::" , stringify ! (BalCreTp))) ; } test_field_BalCreTp () ; fn test_field_CmsnAppTpCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CmsnAppTpCode) as usize - ptr as usize } , 34usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300InBlock1) , "::" , stringify ! (CmsnAppTpCode))) ; } test_field_CmsnAppTpCode () ; fn test_field_D2balBaseQryTp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . D2balBaseQryTp) as usize - ptr as usize } , 35usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300InBlock1) , "::" , stringify ! (D2balBaseQryTp))) ; } test_field_D2balBaseQryTp () ; fn test_field_UprcTpCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . UprcTpCode) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300InBlock1) , "::" , stringify ! (UprcTpCode))) ; } test_field_UprcTpCode () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CSPAQ12300OutBlock1 { pub RecCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub AcntNo : [:: std :: os :: raw :: c_char ; 20usize] , pub Pwd : [:: std :: os :: raw :: c_char ; 8usize] , pub BalCreTp : [:: std :: os :: raw :: c_char ; 1usize] , pub CmsnAppTpCode : [:: std :: os :: raw :: c_char ; 1usize] , pub D2balBaseQryTp : [:: std :: os :: raw :: c_char ; 1usize] , pub UprcTpCode : [:: std :: os :: raw :: c_char ; 1usize] , } # [test] fn bindgen_test_layout_CSPAQ12300OutBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < CSPAQ12300OutBlock1 > () , 37usize , concat ! ("Size of: " , stringify ! (CSPAQ12300OutBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < CSPAQ12300OutBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (CSPAQ12300OutBlock1))) ; fn test_field_RecCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RecCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock1) , "::" , stringify ! (RecCnt))) ; } test_field_RecCnt () ; fn test_field_AcntNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNo) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock1) , "::" , stringify ! (AcntNo))) ; } test_field_AcntNo () ; fn test_field_Pwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Pwd) as usize - ptr as usize } , 25usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock1) , "::" , stringify ! (Pwd))) ; } test_field_Pwd () ; fn test_field_BalCreTp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BalCreTp) as usize - ptr as usize } , 33usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock1) , "::" , stringify ! (BalCreTp))) ; } test_field_BalCreTp () ; fn test_field_CmsnAppTpCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CmsnAppTpCode) as usize - ptr as usize } , 34usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock1) , "::" , stringify ! (CmsnAppTpCode))) ; } test_field_CmsnAppTpCode () ; fn test_field_D2balBaseQryTp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . D2balBaseQryTp) as usize - ptr as usize } , 35usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock1) , "::" , stringify ! (D2balBaseQryTp))) ; } test_field_D2balBaseQryTp () ; fn test_field_UprcTpCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . UprcTpCode) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock1) , "::" , stringify ! (UprcTpCode))) ; } test_field_UprcTpCode () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CSPAQ12300OutBlock2 { pub RecCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub BrnNm : [:: std :: os :: raw :: c_char ; 40usize] , pub AcntNm : [:: std :: os :: raw :: c_char ; 40usize] , pub MnyOrdAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub MnyoutAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub SeOrdAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub KdqOrdAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub HtsOrdAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub MgnRat100pctOrdAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub BalEvalAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub PchsAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub RcvblAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub PnlRat : [:: std :: os :: raw :: c_char ; 18usize] , pub InvstOrgAmt : [:: std :: os :: raw :: c_char ; 20usize] , pub InvstPlAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdtPldgOrdAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub Dps : [:: std :: os :: raw :: c_char ; 16usize] , pub D1Dps : [:: std :: os :: raw :: c_char ; 16usize] , pub D2Dps : [:: std :: os :: raw :: c_char ; 16usize] , pub OrdDt : [:: std :: os :: raw :: c_char ; 8usize] , pub MnyMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub SubstMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub SubstAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub PrdayBuyExecAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub PrdaySellExecAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdayBuyExecAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdaySellExecAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub EvalPnlSum : [:: std :: os :: raw :: c_char ; 15usize] , pub DpsastTotamt : [:: std :: os :: raw :: c_char ; 16usize] , pub Evrprc : [:: std :: os :: raw :: c_char ; 19usize] , pub RuseAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub EtclndAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub PrcAdjstAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub D1CmsnAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub D2CmsnAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub D1EvrTax : [:: std :: os :: raw :: c_char ; 16usize] , pub D2EvrTax : [:: std :: os :: raw :: c_char ; 16usize] , pub D1SettPrergAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub D2SettPrergAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub PrdayKseMnyMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub PrdayKseSubstMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub PrdayKseCrdtMnyMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub PrdayKseCrdtSubstMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdayKseMnyMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdayKseSubstMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdayKseCrdtMnyMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdayKseCrdtSubstMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub PrdayKdqMnyMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub PrdayKdqSubstMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub PrdayKdqCrdtMnyMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub PrdayKdqCrdtSubstMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdayKdqMnyMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdayKdqSubstMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdayKdqCrdtMnyMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdayKdqCrdtSubstMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub PrdayFrbrdMnyMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub PrdayFrbrdSubstMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdayFrbrdMnyMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdayFrbrdSubstMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub PrdayCrbmkMnyMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub PrdayCrbmkSubstMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdayCrbmkMnyMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdayCrbmkSubstMgn : [:: std :: os :: raw :: c_char ; 16usize] , pub DpspdgQty : [:: std :: os :: raw :: c_char ; 16usize] , pub BuyAdjstAmtD2 : [:: std :: os :: raw :: c_char ; 16usize] , pub SellAdjstAmtD2 : [:: std :: os :: raw :: c_char ; 16usize] , pub RepayRqrdAmtD1 : [:: std :: os :: raw :: c_char ; 16usize] , pub RepayRqrdAmtD2 : [:: std :: os :: raw :: c_char ; 16usize] , pub LoanAmt : [:: std :: os :: raw :: c_char ; 16usize] , } # [test] fn bindgen_test_layout_CSPAQ12300OutBlock2 () { assert_eq ! (:: std :: mem :: size_of :: < CSPAQ12300OutBlock2 > () , 1141usize , concat ! ("Size of: " , stringify ! (CSPAQ12300OutBlock2))) ; assert_eq ! (:: std :: mem :: align_of :: < CSPAQ12300OutBlock2 > () , 1usize , concat ! ("Alignment of " , stringify ! (CSPAQ12300OutBlock2))) ; fn test_field_RecCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RecCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (RecCnt))) ; } test_field_RecCnt () ; fn test_field_BrnNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BrnNm) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (BrnNm))) ; } test_field_BrnNm () ; fn test_field_AcntNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNm) as usize - ptr as usize } , 45usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (AcntNm))) ; } test_field_AcntNm () ; fn test_field_MnyOrdAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MnyOrdAbleAmt) as usize - ptr as usize } , 85usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (MnyOrdAbleAmt))) ; } test_field_MnyOrdAbleAmt () ; fn test_field_MnyoutAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MnyoutAbleAmt) as usize - ptr as usize } , 101usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (MnyoutAbleAmt))) ; } test_field_MnyoutAbleAmt () ; fn test_field_SeOrdAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . SeOrdAbleAmt) as usize - ptr as usize } , 117usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (SeOrdAbleAmt))) ; } test_field_SeOrdAbleAmt () ; fn test_field_KdqOrdAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . KdqOrdAbleAmt) as usize - ptr as usize } , 133usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (KdqOrdAbleAmt))) ; } test_field_KdqOrdAbleAmt () ; fn test_field_HtsOrdAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . HtsOrdAbleAmt) as usize - ptr as usize } , 149usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (HtsOrdAbleAmt))) ; } test_field_HtsOrdAbleAmt () ; fn test_field_MgnRat100pctOrdAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MgnRat100pctOrdAbleAmt) as usize - ptr as usize } , 165usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (MgnRat100pctOrdAbleAmt))) ; } test_field_MgnRat100pctOrdAbleAmt () ; fn test_field_BalEvalAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BalEvalAmt) as usize - ptr as usize } , 181usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (BalEvalAmt))) ; } test_field_BalEvalAmt () ; fn test_field_PchsAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PchsAmt) as usize - ptr as usize } , 197usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (PchsAmt))) ; } test_field_PchsAmt () ; fn test_field_RcvblAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RcvblAmt) as usize - ptr as usize } , 213usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (RcvblAmt))) ; } test_field_RcvblAmt () ; fn test_field_PnlRat () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PnlRat) as usize - ptr as usize } , 229usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (PnlRat))) ; } test_field_PnlRat () ; fn test_field_InvstOrgAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . InvstOrgAmt) as usize - ptr as usize } , 247usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (InvstOrgAmt))) ; } test_field_InvstOrgAmt () ; fn test_field_InvstPlAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . InvstPlAmt) as usize - ptr as usize } , 267usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (InvstPlAmt))) ; } test_field_InvstPlAmt () ; fn test_field_CrdtPldgOrdAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdtPldgOrdAmt) as usize - ptr as usize } , 283usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (CrdtPldgOrdAmt))) ; } test_field_CrdtPldgOrdAmt () ; fn test_field_Dps () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Dps) as usize - ptr as usize } , 299usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (Dps))) ; } test_field_Dps () ; fn test_field_D1Dps () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . D1Dps) as usize - ptr as usize } , 315usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (D1Dps))) ; } test_field_D1Dps () ; fn test_field_D2Dps () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . D2Dps) as usize - ptr as usize } , 331usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (D2Dps))) ; } test_field_D2Dps () ; fn test_field_OrdDt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdDt) as usize - ptr as usize } , 347usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (OrdDt))) ; } test_field_OrdDt () ; fn test_field_MnyMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MnyMgn) as usize - ptr as usize } , 355usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (MnyMgn))) ; } test_field_MnyMgn () ; fn test_field_SubstMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . SubstMgn) as usize - ptr as usize } , 371usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (SubstMgn))) ; } test_field_SubstMgn () ; fn test_field_SubstAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . SubstAmt) as usize - ptr as usize } , 387usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (SubstAmt))) ; } test_field_SubstAmt () ; fn test_field_PrdayBuyExecAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrdayBuyExecAmt) as usize - ptr as usize } , 403usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (PrdayBuyExecAmt))) ; } test_field_PrdayBuyExecAmt () ; fn test_field_PrdaySellExecAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrdaySellExecAmt) as usize - ptr as usize } , 419usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (PrdaySellExecAmt))) ; } test_field_PrdaySellExecAmt () ; fn test_field_CrdayBuyExecAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdayBuyExecAmt) as usize - ptr as usize } , 435usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (CrdayBuyExecAmt))) ; } test_field_CrdayBuyExecAmt () ; fn test_field_CrdaySellExecAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdaySellExecAmt) as usize - ptr as usize } , 451usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (CrdaySellExecAmt))) ; } test_field_CrdaySellExecAmt () ; fn test_field_EvalPnlSum () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . EvalPnlSum) as usize - ptr as usize } , 467usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (EvalPnlSum))) ; } test_field_EvalPnlSum () ; fn test_field_DpsastTotamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . DpsastTotamt) as usize - ptr as usize } , 482usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (DpsastTotamt))) ; } test_field_DpsastTotamt () ; fn test_field_Evrprc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Evrprc) as usize - ptr as usize } , 498usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (Evrprc))) ; } test_field_Evrprc () ; fn test_field_RuseAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RuseAmt) as usize - ptr as usize } , 517usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (RuseAmt))) ; } test_field_RuseAmt () ; fn test_field_EtclndAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . EtclndAmt) as usize - ptr as usize } , 533usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (EtclndAmt))) ; } test_field_EtclndAmt () ; fn test_field_PrcAdjstAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrcAdjstAmt) as usize - ptr as usize } , 549usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (PrcAdjstAmt))) ; } test_field_PrcAdjstAmt () ; fn test_field_D1CmsnAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . D1CmsnAmt) as usize - ptr as usize } , 565usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (D1CmsnAmt))) ; } test_field_D1CmsnAmt () ; fn test_field_D2CmsnAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . D2CmsnAmt) as usize - ptr as usize } , 581usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (D2CmsnAmt))) ; } test_field_D2CmsnAmt () ; fn test_field_D1EvrTax () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . D1EvrTax) as usize - ptr as usize } , 597usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (D1EvrTax))) ; } test_field_D1EvrTax () ; fn test_field_D2EvrTax () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . D2EvrTax) as usize - ptr as usize } , 613usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (D2EvrTax))) ; } test_field_D2EvrTax () ; fn test_field_D1SettPrergAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . D1SettPrergAmt) as usize - ptr as usize } , 629usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (D1SettPrergAmt))) ; } test_field_D1SettPrergAmt () ; fn test_field_D2SettPrergAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . D2SettPrergAmt) as usize - ptr as usize } , 645usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (D2SettPrergAmt))) ; } test_field_D2SettPrergAmt () ; fn test_field_PrdayKseMnyMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrdayKseMnyMgn) as usize - ptr as usize } , 661usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (PrdayKseMnyMgn))) ; } test_field_PrdayKseMnyMgn () ; fn test_field_PrdayKseSubstMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrdayKseSubstMgn) as usize - ptr as usize } , 677usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (PrdayKseSubstMgn))) ; } test_field_PrdayKseSubstMgn () ; fn test_field_PrdayKseCrdtMnyMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrdayKseCrdtMnyMgn) as usize - ptr as usize } , 693usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (PrdayKseCrdtMnyMgn))) ; } test_field_PrdayKseCrdtMnyMgn () ; fn test_field_PrdayKseCrdtSubstMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrdayKseCrdtSubstMgn) as usize - ptr as usize } , 709usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (PrdayKseCrdtSubstMgn))) ; } test_field_PrdayKseCrdtSubstMgn () ; fn test_field_CrdayKseMnyMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdayKseMnyMgn) as usize - ptr as usize } , 725usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (CrdayKseMnyMgn))) ; } test_field_CrdayKseMnyMgn () ; fn test_field_CrdayKseSubstMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdayKseSubstMgn) as usize - ptr as usize } , 741usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (CrdayKseSubstMgn))) ; } test_field_CrdayKseSubstMgn () ; fn test_field_CrdayKseCrdtMnyMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdayKseCrdtMnyMgn) as usize - ptr as usize } , 757usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (CrdayKseCrdtMnyMgn))) ; } test_field_CrdayKseCrdtMnyMgn () ; fn test_field_CrdayKseCrdtSubstMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdayKseCrdtSubstMgn) as usize - ptr as usize } , 773usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (CrdayKseCrdtSubstMgn))) ; } test_field_CrdayKseCrdtSubstMgn () ; fn test_field_PrdayKdqMnyMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrdayKdqMnyMgn) as usize - ptr as usize } , 789usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (PrdayKdqMnyMgn))) ; } test_field_PrdayKdqMnyMgn () ; fn test_field_PrdayKdqSubstMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrdayKdqSubstMgn) as usize - ptr as usize } , 805usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (PrdayKdqSubstMgn))) ; } test_field_PrdayKdqSubstMgn () ; fn test_field_PrdayKdqCrdtMnyMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrdayKdqCrdtMnyMgn) as usize - ptr as usize } , 821usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (PrdayKdqCrdtMnyMgn))) ; } test_field_PrdayKdqCrdtMnyMgn () ; fn test_field_PrdayKdqCrdtSubstMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrdayKdqCrdtSubstMgn) as usize - ptr as usize } , 837usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (PrdayKdqCrdtSubstMgn))) ; } test_field_PrdayKdqCrdtSubstMgn () ; fn test_field_CrdayKdqMnyMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdayKdqMnyMgn) as usize - ptr as usize } , 853usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (CrdayKdqMnyMgn))) ; } test_field_CrdayKdqMnyMgn () ; fn test_field_CrdayKdqSubstMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdayKdqSubstMgn) as usize - ptr as usize } , 869usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (CrdayKdqSubstMgn))) ; } test_field_CrdayKdqSubstMgn () ; fn test_field_CrdayKdqCrdtMnyMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdayKdqCrdtMnyMgn) as usize - ptr as usize } , 885usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (CrdayKdqCrdtMnyMgn))) ; } test_field_CrdayKdqCrdtMnyMgn () ; fn test_field_CrdayKdqCrdtSubstMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdayKdqCrdtSubstMgn) as usize - ptr as usize } , 901usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (CrdayKdqCrdtSubstMgn))) ; } test_field_CrdayKdqCrdtSubstMgn () ; fn test_field_PrdayFrbrdMnyMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrdayFrbrdMnyMgn) as usize - ptr as usize } , 917usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (PrdayFrbrdMnyMgn))) ; } test_field_PrdayFrbrdMnyMgn () ; fn test_field_PrdayFrbrdSubstMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrdayFrbrdSubstMgn) as usize - ptr as usize } , 933usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (PrdayFrbrdSubstMgn))) ; } test_field_PrdayFrbrdSubstMgn () ; fn test_field_CrdayFrbrdMnyMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdayFrbrdMnyMgn) as usize - ptr as usize } , 949usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (CrdayFrbrdMnyMgn))) ; } test_field_CrdayFrbrdMnyMgn () ; fn test_field_CrdayFrbrdSubstMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdayFrbrdSubstMgn) as usize - ptr as usize } , 965usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (CrdayFrbrdSubstMgn))) ; } test_field_CrdayFrbrdSubstMgn () ; fn test_field_PrdayCrbmkMnyMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrdayCrbmkMnyMgn) as usize - ptr as usize } , 981usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (PrdayCrbmkMnyMgn))) ; } test_field_PrdayCrbmkMnyMgn () ; fn test_field_PrdayCrbmkSubstMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrdayCrbmkSubstMgn) as usize - ptr as usize } , 997usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (PrdayCrbmkSubstMgn))) ; } test_field_PrdayCrbmkSubstMgn () ; fn test_field_CrdayCrbmkMnyMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdayCrbmkMnyMgn) as usize - ptr as usize } , 1013usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (CrdayCrbmkMnyMgn))) ; } test_field_CrdayCrbmkMnyMgn () ; fn test_field_CrdayCrbmkSubstMgn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdayCrbmkSubstMgn) as usize - ptr as usize } , 1029usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (CrdayCrbmkSubstMgn))) ; } test_field_CrdayCrbmkSubstMgn () ; fn test_field_DpspdgQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . DpspdgQty) as usize - ptr as usize } , 1045usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (DpspdgQty))) ; } test_field_DpspdgQty () ; fn test_field_BuyAdjstAmtD2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BuyAdjstAmtD2) as usize - ptr as usize } , 1061usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (BuyAdjstAmtD2))) ; } test_field_BuyAdjstAmtD2 () ; fn test_field_SellAdjstAmtD2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . SellAdjstAmtD2) as usize - ptr as usize } , 1077usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (SellAdjstAmtD2))) ; } test_field_SellAdjstAmtD2 () ; fn test_field_RepayRqrdAmtD1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RepayRqrdAmtD1) as usize - ptr as usize } , 1093usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (RepayRqrdAmtD1))) ; } test_field_RepayRqrdAmtD1 () ; fn test_field_RepayRqrdAmtD2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RepayRqrdAmtD2) as usize - ptr as usize } , 1109usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (RepayRqrdAmtD2))) ; } test_field_RepayRqrdAmtD2 () ; fn test_field_LoanAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . LoanAmt) as usize - ptr as usize } , 1125usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock2) , "::" , stringify ! (LoanAmt))) ; } test_field_LoanAmt () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CSPAQ12300OutBlock3 { pub IsuNo : [:: std :: os :: raw :: c_char ; 12usize] , pub IsuNm : [:: std :: os :: raw :: c_char ; 40usize] , pub SecBalPtnCode : [:: std :: os :: raw :: c_char ; 2usize] , pub SecBalPtnNm : [:: std :: os :: raw :: c_char ; 40usize] , pub BalQty : [:: std :: os :: raw :: c_char ; 16usize] , pub BnsBaseBalQty : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdayBuyExecQty : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdaySellExecQty : [:: std :: os :: raw :: c_char ; 16usize] , pub SellPrc : [:: std :: os :: raw :: c_char ; 21usize] , pub BuyPrc : [:: std :: os :: raw :: c_char ; 21usize] , pub SellPnlAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub PnlRat : [:: std :: os :: raw :: c_char ; 18usize] , pub NowPrc : [:: std :: os :: raw :: c_char ; 15usize] , pub CrdtAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub DueDt : [:: std :: os :: raw :: c_char ; 8usize] , pub PrdaySellExecPrc : [:: std :: os :: raw :: c_char ; 13usize] , pub PrdaySellQty : [:: std :: os :: raw :: c_char ; 16usize] , pub PrdayBuyExecPrc : [:: std :: os :: raw :: c_char ; 13usize] , pub PrdayBuyQty : [:: std :: os :: raw :: c_char ; 16usize] , pub LoanDt : [:: std :: os :: raw :: c_char ; 8usize] , pub AvrUprc : [:: std :: os :: raw :: c_char ; 13usize] , pub SellAbleQty : [:: std :: os :: raw :: c_char ; 16usize] , pub SellOrdQty : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdayBuyExecAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdaySellExecAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub PrdayBuyExecAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub PrdaySellExecAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub BalEvalAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub EvalPnl : [:: std :: os :: raw :: c_char ; 16usize] , pub MnyOrdAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub OrdAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub SellUnercQty : [:: std :: os :: raw :: c_char ; 16usize] , pub SellUnsttQty : [:: std :: os :: raw :: c_char ; 16usize] , pub BuyUnercQty : [:: std :: os :: raw :: c_char ; 16usize] , pub BuyUnsttQty : [:: std :: os :: raw :: c_char ; 16usize] , pub UnsttQty : [:: std :: os :: raw :: c_char ; 16usize] , pub UnercQty : [:: std :: os :: raw :: c_char ; 16usize] , pub PrdayCprc : [:: std :: os :: raw :: c_char ; 15usize] , pub PchsAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub RegMktCode : [:: std :: os :: raw :: c_char ; 2usize] , pub LoanDtlClssCode : [:: std :: os :: raw :: c_char ; 2usize] , pub DpspdgLoanQty : [:: std :: os :: raw :: c_char ; 16usize] , } # [test] fn bindgen_test_layout_CSPAQ12300OutBlock3 () { assert_eq ! (:: std :: mem :: size_of :: < CSPAQ12300OutBlock3 > () , 659usize , concat ! ("Size of: " , stringify ! (CSPAQ12300OutBlock3))) ; assert_eq ! (:: std :: mem :: align_of :: < CSPAQ12300OutBlock3 > () , 1usize , concat ! ("Alignment of " , stringify ! (CSPAQ12300OutBlock3))) ; fn test_field_IsuNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . IsuNo) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (IsuNo))) ; } test_field_IsuNo () ; fn test_field_IsuNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . IsuNm) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (IsuNm))) ; } test_field_IsuNm () ; fn test_field_SecBalPtnCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . SecBalPtnCode) as usize - ptr as usize } , 52usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (SecBalPtnCode))) ; } test_field_SecBalPtnCode () ; fn test_field_SecBalPtnNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . SecBalPtnNm) as usize - ptr as usize } , 54usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (SecBalPtnNm))) ; } test_field_SecBalPtnNm () ; fn test_field_BalQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BalQty) as usize - ptr as usize } , 94usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (BalQty))) ; } test_field_BalQty () ; fn test_field_BnsBaseBalQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BnsBaseBalQty) as usize - ptr as usize } , 110usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (BnsBaseBalQty))) ; } test_field_BnsBaseBalQty () ; fn test_field_CrdayBuyExecQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdayBuyExecQty) as usize - ptr as usize } , 126usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (CrdayBuyExecQty))) ; } test_field_CrdayBuyExecQty () ; fn test_field_CrdaySellExecQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdaySellExecQty) as usize - ptr as usize } , 142usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (CrdaySellExecQty))) ; } test_field_CrdaySellExecQty () ; fn test_field_SellPrc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . SellPrc) as usize - ptr as usize } , 158usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (SellPrc))) ; } test_field_SellPrc () ; fn test_field_BuyPrc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BuyPrc) as usize - ptr as usize } , 179usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (BuyPrc))) ; } test_field_BuyPrc () ; fn test_field_SellPnlAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . SellPnlAmt) as usize - ptr as usize } , 200usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (SellPnlAmt))) ; } test_field_SellPnlAmt () ; fn test_field_PnlRat () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PnlRat) as usize - ptr as usize } , 216usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (PnlRat))) ; } test_field_PnlRat () ; fn test_field_NowPrc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . NowPrc) as usize - ptr as usize } , 234usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (NowPrc))) ; } test_field_NowPrc () ; fn test_field_CrdtAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdtAmt) as usize - ptr as usize } , 249usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (CrdtAmt))) ; } test_field_CrdtAmt () ; fn test_field_DueDt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . DueDt) as usize - ptr as usize } , 265usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (DueDt))) ; } test_field_DueDt () ; fn test_field_PrdaySellExecPrc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrdaySellExecPrc) as usize - ptr as usize } , 273usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (PrdaySellExecPrc))) ; } test_field_PrdaySellExecPrc () ; fn test_field_PrdaySellQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrdaySellQty) as usize - ptr as usize } , 286usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (PrdaySellQty))) ; } test_field_PrdaySellQty () ; fn test_field_PrdayBuyExecPrc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrdayBuyExecPrc) as usize - ptr as usize } , 302usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (PrdayBuyExecPrc))) ; } test_field_PrdayBuyExecPrc () ; fn test_field_PrdayBuyQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrdayBuyQty) as usize - ptr as usize } , 315usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (PrdayBuyQty))) ; } test_field_PrdayBuyQty () ; fn test_field_LoanDt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . LoanDt) as usize - ptr as usize } , 331usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (LoanDt))) ; } test_field_LoanDt () ; fn test_field_AvrUprc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AvrUprc) as usize - ptr as usize } , 339usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (AvrUprc))) ; } test_field_AvrUprc () ; fn test_field_SellAbleQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . SellAbleQty) as usize - ptr as usize } , 352usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (SellAbleQty))) ; } test_field_SellAbleQty () ; fn test_field_SellOrdQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . SellOrdQty) as usize - ptr as usize } , 368usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (SellOrdQty))) ; } test_field_SellOrdQty () ; fn test_field_CrdayBuyExecAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdayBuyExecAmt) as usize - ptr as usize } , 384usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (CrdayBuyExecAmt))) ; } test_field_CrdayBuyExecAmt () ; fn test_field_CrdaySellExecAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdaySellExecAmt) as usize - ptr as usize } , 400usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (CrdaySellExecAmt))) ; } test_field_CrdaySellExecAmt () ; fn test_field_PrdayBuyExecAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrdayBuyExecAmt) as usize - ptr as usize } , 416usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (PrdayBuyExecAmt))) ; } test_field_PrdayBuyExecAmt () ; fn test_field_PrdaySellExecAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrdaySellExecAmt) as usize - ptr as usize } , 432usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (PrdaySellExecAmt))) ; } test_field_PrdaySellExecAmt () ; fn test_field_BalEvalAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BalEvalAmt) as usize - ptr as usize } , 448usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (BalEvalAmt))) ; } test_field_BalEvalAmt () ; fn test_field_EvalPnl () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . EvalPnl) as usize - ptr as usize } , 464usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (EvalPnl))) ; } test_field_EvalPnl () ; fn test_field_MnyOrdAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MnyOrdAbleAmt) as usize - ptr as usize } , 480usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (MnyOrdAbleAmt))) ; } test_field_MnyOrdAbleAmt () ; fn test_field_OrdAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdAbleAmt) as usize - ptr as usize } , 496usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (OrdAbleAmt))) ; } test_field_OrdAbleAmt () ; fn test_field_SellUnercQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . SellUnercQty) as usize - ptr as usize } , 512usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (SellUnercQty))) ; } test_field_SellUnercQty () ; fn test_field_SellUnsttQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . SellUnsttQty) as usize - ptr as usize } , 528usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (SellUnsttQty))) ; } test_field_SellUnsttQty () ; fn test_field_BuyUnercQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BuyUnercQty) as usize - ptr as usize } , 544usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (BuyUnercQty))) ; } test_field_BuyUnercQty () ; fn test_field_BuyUnsttQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BuyUnsttQty) as usize - ptr as usize } , 560usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (BuyUnsttQty))) ; } test_field_BuyUnsttQty () ; fn test_field_UnsttQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . UnsttQty) as usize - ptr as usize } , 576usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (UnsttQty))) ; } test_field_UnsttQty () ; fn test_field_UnercQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . UnercQty) as usize - ptr as usize } , 592usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (UnercQty))) ; } test_field_UnercQty () ; fn test_field_PrdayCprc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrdayCprc) as usize - ptr as usize } , 608usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (PrdayCprc))) ; } test_field_PrdayCprc () ; fn test_field_PchsAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PchsAmt) as usize - ptr as usize } , 623usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (PchsAmt))) ; } test_field_PchsAmt () ; fn test_field_RegMktCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RegMktCode) as usize - ptr as usize } , 639usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (RegMktCode))) ; } test_field_RegMktCode () ; fn test_field_LoanDtlClssCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . LoanDtlClssCode) as usize - ptr as usize } , 641usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (LoanDtlClssCode))) ; } test_field_LoanDtlClssCode () ; fn test_field_DpspdgLoanQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ12300OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . DpspdgLoanQty) as usize - ptr as usize } , 643usize , concat ! ("Offset of field: " , stringify ! (CSPAQ12300OutBlock3) , "::" , stringify ! (DpspdgLoanQty))) ; } test_field_DpspdgLoanQty () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CSPAQ13700InBlock1 { pub RecCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub AcntNo : [:: std :: os :: raw :: c_char ; 20usize] , pub InptPwd : [:: std :: os :: raw :: c_char ; 8usize] , pub OrdMktCode : [:: std :: os :: raw :: c_char ; 2usize] , pub BnsTpCode : [:: std :: os :: raw :: c_char ; 1usize] , pub IsuNo : [:: std :: os :: raw :: c_char ; 12usize] , pub ExecYn : [:: std :: os :: raw :: c_char ; 1usize] , pub OrdDt : [:: std :: os :: raw :: c_char ; 8usize] , pub SrtOrdNo2 : [:: std :: os :: raw :: c_char ; 10usize] , pub BkseqTpCode : [:: std :: os :: raw :: c_char ; 1usize] , pub OrdPtnCode : [:: std :: os :: raw :: c_char ; 2usize] , } # [test] fn bindgen_test_layout_CSPAQ13700InBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < CSPAQ13700InBlock1 > () , 70usize , concat ! ("Size of: " , stringify ! (CSPAQ13700InBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < CSPAQ13700InBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (CSPAQ13700InBlock1))) ; fn test_field_RecCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RecCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700InBlock1) , "::" , stringify ! (RecCnt))) ; } test_field_RecCnt () ; fn test_field_AcntNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNo) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700InBlock1) , "::" , stringify ! (AcntNo))) ; } test_field_AcntNo () ; fn test_field_InptPwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . InptPwd) as usize - ptr as usize } , 25usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700InBlock1) , "::" , stringify ! (InptPwd))) ; } test_field_InptPwd () ; fn test_field_OrdMktCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdMktCode) as usize - ptr as usize } , 33usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700InBlock1) , "::" , stringify ! (OrdMktCode))) ; } test_field_OrdMktCode () ; fn test_field_BnsTpCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BnsTpCode) as usize - ptr as usize } , 35usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700InBlock1) , "::" , stringify ! (BnsTpCode))) ; } test_field_BnsTpCode () ; fn test_field_IsuNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . IsuNo) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700InBlock1) , "::" , stringify ! (IsuNo))) ; } test_field_IsuNo () ; fn test_field_ExecYn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ExecYn) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700InBlock1) , "::" , stringify ! (ExecYn))) ; } test_field_ExecYn () ; fn test_field_OrdDt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdDt) as usize - ptr as usize } , 49usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700InBlock1) , "::" , stringify ! (OrdDt))) ; } test_field_OrdDt () ; fn test_field_SrtOrdNo2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . SrtOrdNo2) as usize - ptr as usize } , 57usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700InBlock1) , "::" , stringify ! (SrtOrdNo2))) ; } test_field_SrtOrdNo2 () ; fn test_field_BkseqTpCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BkseqTpCode) as usize - ptr as usize } , 67usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700InBlock1) , "::" , stringify ! (BkseqTpCode))) ; } test_field_BkseqTpCode () ; fn test_field_OrdPtnCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdPtnCode) as usize - ptr as usize } , 68usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700InBlock1) , "::" , stringify ! (OrdPtnCode))) ; } test_field_OrdPtnCode () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CSPAQ13700OutBlock1 { pub RecCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub AcntNo : [:: std :: os :: raw :: c_char ; 20usize] , pub InptPwd : [:: std :: os :: raw :: c_char ; 8usize] , pub OrdMktCode : [:: std :: os :: raw :: c_char ; 2usize] , pub BnsTpCode : [:: std :: os :: raw :: c_char ; 1usize] , pub IsuNo : [:: std :: os :: raw :: c_char ; 12usize] , pub ExecYn : [:: std :: os :: raw :: c_char ; 1usize] , pub OrdDt : [:: std :: os :: raw :: c_char ; 8usize] , pub SrtOrdNo2 : [:: std :: os :: raw :: c_char ; 10usize] , pub BkseqTpCode : [:: std :: os :: raw :: c_char ; 1usize] , pub OrdPtnCode : [:: std :: os :: raw :: c_char ; 2usize] , } # [test] fn bindgen_test_layout_CSPAQ13700OutBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < CSPAQ13700OutBlock1 > () , 70usize , concat ! ("Size of: " , stringify ! (CSPAQ13700OutBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < CSPAQ13700OutBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (CSPAQ13700OutBlock1))) ; fn test_field_RecCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RecCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock1) , "::" , stringify ! (RecCnt))) ; } test_field_RecCnt () ; fn test_field_AcntNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNo) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock1) , "::" , stringify ! (AcntNo))) ; } test_field_AcntNo () ; fn test_field_InptPwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . InptPwd) as usize - ptr as usize } , 25usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock1) , "::" , stringify ! (InptPwd))) ; } test_field_InptPwd () ; fn test_field_OrdMktCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdMktCode) as usize - ptr as usize } , 33usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock1) , "::" , stringify ! (OrdMktCode))) ; } test_field_OrdMktCode () ; fn test_field_BnsTpCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BnsTpCode) as usize - ptr as usize } , 35usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock1) , "::" , stringify ! (BnsTpCode))) ; } test_field_BnsTpCode () ; fn test_field_IsuNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . IsuNo) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock1) , "::" , stringify ! (IsuNo))) ; } test_field_IsuNo () ; fn test_field_ExecYn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ExecYn) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock1) , "::" , stringify ! (ExecYn))) ; } test_field_ExecYn () ; fn test_field_OrdDt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdDt) as usize - ptr as usize } , 49usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock1) , "::" , stringify ! (OrdDt))) ; } test_field_OrdDt () ; fn test_field_SrtOrdNo2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . SrtOrdNo2) as usize - ptr as usize } , 57usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock1) , "::" , stringify ! (SrtOrdNo2))) ; } test_field_SrtOrdNo2 () ; fn test_field_BkseqTpCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BkseqTpCode) as usize - ptr as usize } , 67usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock1) , "::" , stringify ! (BkseqTpCode))) ; } test_field_BkseqTpCode () ; fn test_field_OrdPtnCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdPtnCode) as usize - ptr as usize } , 68usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock1) , "::" , stringify ! (OrdPtnCode))) ; } test_field_OrdPtnCode () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CSPAQ13700OutBlock2 { pub RecCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub SellExecAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub BuyExecAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub SellExecQty : [:: std :: os :: raw :: c_char ; 16usize] , pub BuyExecQty : [:: std :: os :: raw :: c_char ; 16usize] , pub SellOrdQty : [:: std :: os :: raw :: c_char ; 16usize] , pub BuyOrdQty : [:: std :: os :: raw :: c_char ; 16usize] , } # [test] fn bindgen_test_layout_CSPAQ13700OutBlock2 () { assert_eq ! (:: std :: mem :: size_of :: < CSPAQ13700OutBlock2 > () , 101usize , concat ! ("Size of: " , stringify ! (CSPAQ13700OutBlock2))) ; assert_eq ! (:: std :: mem :: align_of :: < CSPAQ13700OutBlock2 > () , 1usize , concat ! ("Alignment of " , stringify ! (CSPAQ13700OutBlock2))) ; fn test_field_RecCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RecCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock2) , "::" , stringify ! (RecCnt))) ; } test_field_RecCnt () ; fn test_field_SellExecAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . SellExecAmt) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock2) , "::" , stringify ! (SellExecAmt))) ; } test_field_SellExecAmt () ; fn test_field_BuyExecAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BuyExecAmt) as usize - ptr as usize } , 21usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock2) , "::" , stringify ! (BuyExecAmt))) ; } test_field_BuyExecAmt () ; fn test_field_SellExecQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . SellExecQty) as usize - ptr as usize } , 37usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock2) , "::" , stringify ! (SellExecQty))) ; } test_field_SellExecQty () ; fn test_field_BuyExecQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BuyExecQty) as usize - ptr as usize } , 53usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock2) , "::" , stringify ! (BuyExecQty))) ; } test_field_BuyExecQty () ; fn test_field_SellOrdQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . SellOrdQty) as usize - ptr as usize } , 69usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock2) , "::" , stringify ! (SellOrdQty))) ; } test_field_SellOrdQty () ; fn test_field_BuyOrdQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BuyOrdQty) as usize - ptr as usize } , 85usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock2) , "::" , stringify ! (BuyOrdQty))) ; } test_field_BuyOrdQty () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CSPAQ13700OutBlock3 { pub OrdDt : [:: std :: os :: raw :: c_char ; 8usize] , pub MgmtBrnNo : [:: std :: os :: raw :: c_char ; 3usize] , pub OrdMktCode : [:: std :: os :: raw :: c_char ; 2usize] , pub OrdNo : [:: std :: os :: raw :: c_char ; 10usize] , pub OrgOrdNo : [:: std :: os :: raw :: c_char ; 10usize] , pub IsuNo : [:: std :: os :: raw :: c_char ; 12usize] , pub IsuNm : [:: std :: os :: raw :: c_char ; 40usize] , pub BnsTpCode : [:: std :: os :: raw :: c_char ; 1usize] , pub BnsTpNm : [:: std :: os :: raw :: c_char ; 10usize] , pub OrdPtnCode : [:: std :: os :: raw :: c_char ; 2usize] , pub OrdPtnNm : [:: std :: os :: raw :: c_char ; 40usize] , pub OrdTrxPtnCode : [:: std :: os :: raw :: c_char ; 9usize] , pub OrdTrxPtnNm : [:: std :: os :: raw :: c_char ; 50usize] , pub MrcTpCode : [:: std :: os :: raw :: c_char ; 1usize] , pub MrcTpNm : [:: std :: os :: raw :: c_char ; 10usize] , pub MrcQty : [:: std :: os :: raw :: c_char ; 16usize] , pub MrcAbleQty : [:: std :: os :: raw :: c_char ; 16usize] , pub OrdQty : [:: std :: os :: raw :: c_char ; 16usize] , pub OrdPrc : [:: std :: os :: raw :: c_char ; 15usize] , pub ExecQty : [:: std :: os :: raw :: c_char ; 16usize] , pub ExecPrc : [:: std :: os :: raw :: c_char ; 15usize] , pub ExecTrxTime : [:: std :: os :: raw :: c_char ; 9usize] , pub LastExecTime : [:: std :: os :: raw :: c_char ; 9usize] , pub OrdprcPtnCode : [:: std :: os :: raw :: c_char ; 2usize] , pub OrdprcPtnNm : [:: std :: os :: raw :: c_char ; 40usize] , pub OrdCndiTpCode : [:: std :: os :: raw :: c_char ; 1usize] , pub AllExecQty : [:: std :: os :: raw :: c_char ; 16usize] , pub RegCommdaCode : [:: std :: os :: raw :: c_char ; 2usize] , pub CommdaNm : [:: std :: os :: raw :: c_char ; 40usize] , pub MbrNo : [:: std :: os :: raw :: c_char ; 3usize] , pub RsvOrdYn : [:: std :: os :: raw :: c_char ; 1usize] , pub LoanDt : [:: std :: os :: raw :: c_char ; 8usize] , pub OrdTime : [:: std :: os :: raw :: c_char ; 9usize] , pub OpDrtnNo : [:: std :: os :: raw :: c_char ; 12usize] , pub OdrrId : [:: std :: os :: raw :: c_char ; 16usize] , } # [test] fn bindgen_test_layout_CSPAQ13700OutBlock3 () { assert_eq ! (:: std :: mem :: size_of :: < CSPAQ13700OutBlock3 > () , 470usize , concat ! ("Size of: " , stringify ! (CSPAQ13700OutBlock3))) ; assert_eq ! (:: std :: mem :: align_of :: < CSPAQ13700OutBlock3 > () , 1usize , concat ! ("Alignment of " , stringify ! (CSPAQ13700OutBlock3))) ; fn test_field_OrdDt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdDt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (OrdDt))) ; } test_field_OrdDt () ; fn test_field_MgmtBrnNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MgmtBrnNo) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (MgmtBrnNo))) ; } test_field_MgmtBrnNo () ; fn test_field_OrdMktCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdMktCode) as usize - ptr as usize } , 11usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (OrdMktCode))) ; } test_field_OrdMktCode () ; fn test_field_OrdNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdNo) as usize - ptr as usize } , 13usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (OrdNo))) ; } test_field_OrdNo () ; fn test_field_OrgOrdNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrgOrdNo) as usize - ptr as usize } , 23usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (OrgOrdNo))) ; } test_field_OrgOrdNo () ; fn test_field_IsuNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . IsuNo) as usize - ptr as usize } , 33usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (IsuNo))) ; } test_field_IsuNo () ; fn test_field_IsuNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . IsuNm) as usize - ptr as usize } , 45usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (IsuNm))) ; } test_field_IsuNm () ; fn test_field_BnsTpCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BnsTpCode) as usize - ptr as usize } , 85usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (BnsTpCode))) ; } test_field_BnsTpCode () ; fn test_field_BnsTpNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BnsTpNm) as usize - ptr as usize } , 86usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (BnsTpNm))) ; } test_field_BnsTpNm () ; fn test_field_OrdPtnCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdPtnCode) as usize - ptr as usize } , 96usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (OrdPtnCode))) ; } test_field_OrdPtnCode () ; fn test_field_OrdPtnNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdPtnNm) as usize - ptr as usize } , 98usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (OrdPtnNm))) ; } test_field_OrdPtnNm () ; fn test_field_OrdTrxPtnCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdTrxPtnCode) as usize - ptr as usize } , 138usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (OrdTrxPtnCode))) ; } test_field_OrdTrxPtnCode () ; fn test_field_OrdTrxPtnNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdTrxPtnNm) as usize - ptr as usize } , 147usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (OrdTrxPtnNm))) ; } test_field_OrdTrxPtnNm () ; fn test_field_MrcTpCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MrcTpCode) as usize - ptr as usize } , 197usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (MrcTpCode))) ; } test_field_MrcTpCode () ; fn test_field_MrcTpNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MrcTpNm) as usize - ptr as usize } , 198usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (MrcTpNm))) ; } test_field_MrcTpNm () ; fn test_field_MrcQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MrcQty) as usize - ptr as usize } , 208usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (MrcQty))) ; } test_field_MrcQty () ; fn test_field_MrcAbleQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MrcAbleQty) as usize - ptr as usize } , 224usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (MrcAbleQty))) ; } test_field_MrcAbleQty () ; fn test_field_OrdQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdQty) as usize - ptr as usize } , 240usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (OrdQty))) ; } test_field_OrdQty () ; fn test_field_OrdPrc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdPrc) as usize - ptr as usize } , 256usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (OrdPrc))) ; } test_field_OrdPrc () ; fn test_field_ExecQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ExecQty) as usize - ptr as usize } , 271usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (ExecQty))) ; } test_field_ExecQty () ; fn test_field_ExecPrc () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ExecPrc) as usize - ptr as usize } , 287usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (ExecPrc))) ; } test_field_ExecPrc () ; fn test_field_ExecTrxTime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ExecTrxTime) as usize - ptr as usize } , 302usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (ExecTrxTime))) ; } test_field_ExecTrxTime () ; fn test_field_LastExecTime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . LastExecTime) as usize - ptr as usize } , 311usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (LastExecTime))) ; } test_field_LastExecTime () ; fn test_field_OrdprcPtnCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdprcPtnCode) as usize - ptr as usize } , 320usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (OrdprcPtnCode))) ; } test_field_OrdprcPtnCode () ; fn test_field_OrdprcPtnNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdprcPtnNm) as usize - ptr as usize } , 322usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (OrdprcPtnNm))) ; } test_field_OrdprcPtnNm () ; fn test_field_OrdCndiTpCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdCndiTpCode) as usize - ptr as usize } , 362usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (OrdCndiTpCode))) ; } test_field_OrdCndiTpCode () ; fn test_field_AllExecQty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AllExecQty) as usize - ptr as usize } , 363usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (AllExecQty))) ; } test_field_AllExecQty () ; fn test_field_RegCommdaCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RegCommdaCode) as usize - ptr as usize } , 379usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (RegCommdaCode))) ; } test_field_RegCommdaCode () ; fn test_field_CommdaNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CommdaNm) as usize - ptr as usize } , 381usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (CommdaNm))) ; } test_field_CommdaNm () ; fn test_field_MbrNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MbrNo) as usize - ptr as usize } , 421usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (MbrNo))) ; } test_field_MbrNo () ; fn test_field_RsvOrdYn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RsvOrdYn) as usize - ptr as usize } , 424usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (RsvOrdYn))) ; } test_field_RsvOrdYn () ; fn test_field_LoanDt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . LoanDt) as usize - ptr as usize } , 425usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (LoanDt))) ; } test_field_LoanDt () ; fn test_field_OrdTime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrdTime) as usize - ptr as usize } , 433usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (OrdTime))) ; } test_field_OrdTime () ; fn test_field_OpDrtnNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OpDrtnNo) as usize - ptr as usize } , 442usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (OpDrtnNo))) ; } test_field_OpDrtnNo () ; fn test_field_OdrrId () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ13700OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OdrrId) as usize - ptr as usize } , 454usize , concat ! ("Offset of field: " , stringify ! (CSPAQ13700OutBlock3) , "::" , stringify ! (OdrrId))) ; } test_field_OdrrId () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CSPAQ22200InBlock1 { pub RecCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub MgmtBrnNo : [:: std :: os :: raw :: c_char ; 3usize] , pub AcntNo : [:: std :: os :: raw :: c_char ; 20usize] , pub Pwd : [:: std :: os :: raw :: c_char ; 8usize] , pub BalCreTp : [:: std :: os :: raw :: c_char ; 1usize] , } # [test] fn bindgen_test_layout_CSPAQ22200InBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < CSPAQ22200InBlock1 > () , 37usize , concat ! ("Size of: " , stringify ! (CSPAQ22200InBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < CSPAQ22200InBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (CSPAQ22200InBlock1))) ; fn test_field_RecCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RecCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200InBlock1) , "::" , stringify ! (RecCnt))) ; } test_field_RecCnt () ; fn test_field_MgmtBrnNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MgmtBrnNo) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200InBlock1) , "::" , stringify ! (MgmtBrnNo))) ; } test_field_MgmtBrnNo () ; fn test_field_AcntNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNo) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200InBlock1) , "::" , stringify ! (AcntNo))) ; } test_field_AcntNo () ; fn test_field_Pwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Pwd) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200InBlock1) , "::" , stringify ! (Pwd))) ; } test_field_Pwd () ; fn test_field_BalCreTp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BalCreTp) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200InBlock1) , "::" , stringify ! (BalCreTp))) ; } test_field_BalCreTp () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CSPAQ22200OutBlock1 { pub RecCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub MgmtBrnNo : [:: std :: os :: raw :: c_char ; 3usize] , pub AcntNo : [:: std :: os :: raw :: c_char ; 20usize] , pub Pwd : [:: std :: os :: raw :: c_char ; 8usize] , pub BalCreTp : [:: std :: os :: raw :: c_char ; 1usize] , } # [test] fn bindgen_test_layout_CSPAQ22200OutBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < CSPAQ22200OutBlock1 > () , 37usize , concat ! ("Size of: " , stringify ! (CSPAQ22200OutBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < CSPAQ22200OutBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (CSPAQ22200OutBlock1))) ; fn test_field_RecCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RecCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock1) , "::" , stringify ! (RecCnt))) ; } test_field_RecCnt () ; fn test_field_MgmtBrnNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MgmtBrnNo) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock1) , "::" , stringify ! (MgmtBrnNo))) ; } test_field_MgmtBrnNo () ; fn test_field_AcntNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNo) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock1) , "::" , stringify ! (AcntNo))) ; } test_field_AcntNo () ; fn test_field_Pwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Pwd) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock1) , "::" , stringify ! (Pwd))) ; } test_field_Pwd () ; fn test_field_BalCreTp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BalCreTp) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock1) , "::" , stringify ! (BalCreTp))) ; } test_field_BalCreTp () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CSPAQ22200OutBlock2 { pub RecCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub BrnNm : [:: std :: os :: raw :: c_char ; 40usize] , pub AcntNm : [:: std :: os :: raw :: c_char ; 40usize] , pub MnyOrdAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub SubstOrdAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub SeOrdAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub KdqOrdAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdtPldgOrdAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub MgnRat100pctOrdAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub MgnRat35ordAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub MgnRat50ordAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdtOrdAbleAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub Dps : [:: std :: os :: raw :: c_char ; 16usize] , pub SubstAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub MgnMny : [:: std :: os :: raw :: c_char ; 16usize] , pub MgnSubst : [:: std :: os :: raw :: c_char ; 16usize] , pub D1Dps : [:: std :: os :: raw :: c_char ; 16usize] , pub D2Dps : [:: std :: os :: raw :: c_char ; 16usize] , pub RcvblAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub D1ovdRepayRqrdAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub D2ovdRepayRqrdAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub MloanAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub ChgAfPldgRat : [:: std :: os :: raw :: c_char ; 9usize] , pub RqrdPldgAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub PdlckAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub OrgPldgSumAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub SubPldgSumAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdtPldgAmtMny : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdtPldgSubstAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub Imreq : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdtPldgRuseAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub DpslRestrcAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub PrdaySellAdjstAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub PrdayBuyAdjstAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdaySellAdjstAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub CrdayBuyAdjstAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub CslLoanAmtdt1 : [:: std :: os :: raw :: c_char ; 16usize] , } # [test] fn bindgen_test_layout_CSPAQ22200OutBlock2 () { assert_eq ! (:: std :: mem :: size_of :: < CSPAQ22200OutBlock2 > () , 622usize , concat ! ("Size of: " , stringify ! (CSPAQ22200OutBlock2))) ; assert_eq ! (:: std :: mem :: align_of :: < CSPAQ22200OutBlock2 > () , 1usize , concat ! ("Alignment of " , stringify ! (CSPAQ22200OutBlock2))) ; fn test_field_RecCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RecCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (RecCnt))) ; } test_field_RecCnt () ; fn test_field_BrnNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BrnNm) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (BrnNm))) ; } test_field_BrnNm () ; fn test_field_AcntNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNm) as usize - ptr as usize } , 45usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (AcntNm))) ; } test_field_AcntNm () ; fn test_field_MnyOrdAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MnyOrdAbleAmt) as usize - ptr as usize } , 85usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (MnyOrdAbleAmt))) ; } test_field_MnyOrdAbleAmt () ; fn test_field_SubstOrdAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . SubstOrdAbleAmt) as usize - ptr as usize } , 101usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (SubstOrdAbleAmt))) ; } test_field_SubstOrdAbleAmt () ; fn test_field_SeOrdAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . SeOrdAbleAmt) as usize - ptr as usize } , 117usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (SeOrdAbleAmt))) ; } test_field_SeOrdAbleAmt () ; fn test_field_KdqOrdAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . KdqOrdAbleAmt) as usize - ptr as usize } , 133usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (KdqOrdAbleAmt))) ; } test_field_KdqOrdAbleAmt () ; fn test_field_CrdtPldgOrdAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdtPldgOrdAmt) as usize - ptr as usize } , 149usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (CrdtPldgOrdAmt))) ; } test_field_CrdtPldgOrdAmt () ; fn test_field_MgnRat100pctOrdAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MgnRat100pctOrdAbleAmt) as usize - ptr as usize } , 165usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (MgnRat100pctOrdAbleAmt))) ; } test_field_MgnRat100pctOrdAbleAmt () ; fn test_field_MgnRat35ordAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MgnRat35ordAbleAmt) as usize - ptr as usize } , 181usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (MgnRat35ordAbleAmt))) ; } test_field_MgnRat35ordAbleAmt () ; fn test_field_MgnRat50ordAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MgnRat50ordAbleAmt) as usize - ptr as usize } , 197usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (MgnRat50ordAbleAmt))) ; } test_field_MgnRat50ordAbleAmt () ; fn test_field_CrdtOrdAbleAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdtOrdAbleAmt) as usize - ptr as usize } , 213usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (CrdtOrdAbleAmt))) ; } test_field_CrdtOrdAbleAmt () ; fn test_field_Dps () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Dps) as usize - ptr as usize } , 229usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (Dps))) ; } test_field_Dps () ; fn test_field_SubstAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . SubstAmt) as usize - ptr as usize } , 245usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (SubstAmt))) ; } test_field_SubstAmt () ; fn test_field_MgnMny () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MgnMny) as usize - ptr as usize } , 261usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (MgnMny))) ; } test_field_MgnMny () ; fn test_field_MgnSubst () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MgnSubst) as usize - ptr as usize } , 277usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (MgnSubst))) ; } test_field_MgnSubst () ; fn test_field_D1Dps () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . D1Dps) as usize - ptr as usize } , 293usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (D1Dps))) ; } test_field_D1Dps () ; fn test_field_D2Dps () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . D2Dps) as usize - ptr as usize } , 309usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (D2Dps))) ; } test_field_D2Dps () ; fn test_field_RcvblAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RcvblAmt) as usize - ptr as usize } , 325usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (RcvblAmt))) ; } test_field_RcvblAmt () ; fn test_field_D1ovdRepayRqrdAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . D1ovdRepayRqrdAmt) as usize - ptr as usize } , 341usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (D1ovdRepayRqrdAmt))) ; } test_field_D1ovdRepayRqrdAmt () ; fn test_field_D2ovdRepayRqrdAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . D2ovdRepayRqrdAmt) as usize - ptr as usize } , 357usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (D2ovdRepayRqrdAmt))) ; } test_field_D2ovdRepayRqrdAmt () ; fn test_field_MloanAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MloanAmt) as usize - ptr as usize } , 373usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (MloanAmt))) ; } test_field_MloanAmt () ; fn test_field_ChgAfPldgRat () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ChgAfPldgRat) as usize - ptr as usize } , 389usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (ChgAfPldgRat))) ; } test_field_ChgAfPldgRat () ; fn test_field_RqrdPldgAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RqrdPldgAmt) as usize - ptr as usize } , 398usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (RqrdPldgAmt))) ; } test_field_RqrdPldgAmt () ; fn test_field_PdlckAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PdlckAmt) as usize - ptr as usize } , 414usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (PdlckAmt))) ; } test_field_PdlckAmt () ; fn test_field_OrgPldgSumAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . OrgPldgSumAmt) as usize - ptr as usize } , 430usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (OrgPldgSumAmt))) ; } test_field_OrgPldgSumAmt () ; fn test_field_SubPldgSumAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . SubPldgSumAmt) as usize - ptr as usize } , 446usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (SubPldgSumAmt))) ; } test_field_SubPldgSumAmt () ; fn test_field_CrdtPldgAmtMny () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdtPldgAmtMny) as usize - ptr as usize } , 462usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (CrdtPldgAmtMny))) ; } test_field_CrdtPldgAmtMny () ; fn test_field_CrdtPldgSubstAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdtPldgSubstAmt) as usize - ptr as usize } , 478usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (CrdtPldgSubstAmt))) ; } test_field_CrdtPldgSubstAmt () ; fn test_field_Imreq () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Imreq) as usize - ptr as usize } , 494usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (Imreq))) ; } test_field_Imreq () ; fn test_field_CrdtPldgRuseAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdtPldgRuseAmt) as usize - ptr as usize } , 510usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (CrdtPldgRuseAmt))) ; } test_field_CrdtPldgRuseAmt () ; fn test_field_DpslRestrcAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . DpslRestrcAmt) as usize - ptr as usize } , 526usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (DpslRestrcAmt))) ; } test_field_DpslRestrcAmt () ; fn test_field_PrdaySellAdjstAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrdaySellAdjstAmt) as usize - ptr as usize } , 542usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (PrdaySellAdjstAmt))) ; } test_field_PrdaySellAdjstAmt () ; fn test_field_PrdayBuyAdjstAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . PrdayBuyAdjstAmt) as usize - ptr as usize } , 558usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (PrdayBuyAdjstAmt))) ; } test_field_PrdayBuyAdjstAmt () ; fn test_field_CrdaySellAdjstAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdaySellAdjstAmt) as usize - ptr as usize } , 574usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (CrdaySellAdjstAmt))) ; } test_field_CrdaySellAdjstAmt () ; fn test_field_CrdayBuyAdjstAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CrdayBuyAdjstAmt) as usize - ptr as usize } , 590usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (CrdayBuyAdjstAmt))) ; } test_field_CrdayBuyAdjstAmt () ; fn test_field_CslLoanAmtdt1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . CslLoanAmtdt1) as usize - ptr as usize } , 606usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock2) , "::" , stringify ! (CslLoanAmtdt1))) ; } test_field_CslLoanAmtdt1 () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct CSPAQ22200OutBlock { pub outBlock1 : CSPAQ22200OutBlock1 , pub outBlock2 : CSPAQ22200OutBlock2 , } # [test] fn bindgen_test_layout_CSPAQ22200OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < CSPAQ22200OutBlock > () , 659usize , concat ! ("Size of: " , stringify ! (CSPAQ22200OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < CSPAQ22200OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (CSPAQ22200OutBlock))) ; fn test_field_outBlock1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . outBlock1) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock) , "::" , stringify ! (outBlock1))) ; } test_field_outBlock1 () ; fn test_field_outBlock2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < CSPAQ22200OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . outBlock2) as usize - ptr as usize } , 37usize , concat ! ("Offset of field: " , stringify ! (CSPAQ22200OutBlock) , "::" , stringify ! (outBlock2))) ; } test_field_outBlock2 () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct FOCCQ33600InBlock1 { pub RecCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub AcntNo : [:: std :: os :: raw :: c_char ; 20usize] , pub Pwd : [:: std :: os :: raw :: c_char ; 8usize] , pub QrySrtDt : [:: std :: os :: raw :: c_char ; 8usize] , pub QryEndDt : [:: std :: os :: raw :: c_char ; 8usize] , pub TermTp : [:: std :: os :: raw :: c_char ; 1usize] , } # [test] fn bindgen_test_layout_FOCCQ33600InBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < FOCCQ33600InBlock1 > () , 50usize , concat ! ("Size of: " , stringify ! (FOCCQ33600InBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < FOCCQ33600InBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (FOCCQ33600InBlock1))) ; fn test_field_RecCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < FOCCQ33600InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RecCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (FOCCQ33600InBlock1) , "::" , stringify ! (RecCnt))) ; } test_field_RecCnt () ; fn test_field_AcntNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < FOCCQ33600InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNo) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (FOCCQ33600InBlock1) , "::" , stringify ! (AcntNo))) ; } test_field_AcntNo () ; fn test_field_Pwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < FOCCQ33600InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Pwd) as usize - ptr as usize } , 25usize , concat ! ("Offset of field: " , stringify ! (FOCCQ33600InBlock1) , "::" , stringify ! (Pwd))) ; } test_field_Pwd () ; fn test_field_QrySrtDt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < FOCCQ33600InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . QrySrtDt) as usize - ptr as usize } , 33usize , concat ! ("Offset of field: " , stringify ! (FOCCQ33600InBlock1) , "::" , stringify ! (QrySrtDt))) ; } test_field_QrySrtDt () ; fn test_field_QryEndDt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < FOCCQ33600InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . QryEndDt) as usize - ptr as usize } , 41usize , concat ! ("Offset of field: " , stringify ! (FOCCQ33600InBlock1) , "::" , stringify ! (QryEndDt))) ; } test_field_QryEndDt () ; fn test_field_TermTp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < FOCCQ33600InBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . TermTp) as usize - ptr as usize } , 49usize , concat ! ("Offset of field: " , stringify ! (FOCCQ33600InBlock1) , "::" , stringify ! (TermTp))) ; } test_field_TermTp () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct FOCCQ33600OutBlock1 { pub RecCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub AcntNo : [:: std :: os :: raw :: c_char ; 20usize] , pub Pwd : [:: std :: os :: raw :: c_char ; 8usize] , pub QrySrtDt : [:: std :: os :: raw :: c_char ; 8usize] , pub QryEndDt : [:: std :: os :: raw :: c_char ; 8usize] , pub TermTp : [:: std :: os :: raw :: c_char ; 1usize] , } # [test] fn bindgen_test_layout_FOCCQ33600OutBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < FOCCQ33600OutBlock1 > () , 50usize , concat ! ("Size of: " , stringify ! (FOCCQ33600OutBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < FOCCQ33600OutBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (FOCCQ33600OutBlock1))) ; fn test_field_RecCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < FOCCQ33600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RecCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (FOCCQ33600OutBlock1) , "::" , stringify ! (RecCnt))) ; } test_field_RecCnt () ; fn test_field_AcntNo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < FOCCQ33600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNo) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (FOCCQ33600OutBlock1) , "::" , stringify ! (AcntNo))) ; } test_field_AcntNo () ; fn test_field_Pwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < FOCCQ33600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Pwd) as usize - ptr as usize } , 25usize , concat ! ("Offset of field: " , stringify ! (FOCCQ33600OutBlock1) , "::" , stringify ! (Pwd))) ; } test_field_Pwd () ; fn test_field_QrySrtDt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < FOCCQ33600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . QrySrtDt) as usize - ptr as usize } , 33usize , concat ! ("Offset of field: " , stringify ! (FOCCQ33600OutBlock1) , "::" , stringify ! (QrySrtDt))) ; } test_field_QrySrtDt () ; fn test_field_QryEndDt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < FOCCQ33600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . QryEndDt) as usize - ptr as usize } , 41usize , concat ! ("Offset of field: " , stringify ! (FOCCQ33600OutBlock1) , "::" , stringify ! (QryEndDt))) ; } test_field_QryEndDt () ; fn test_field_TermTp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < FOCCQ33600OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . TermTp) as usize - ptr as usize } , 49usize , concat ! ("Offset of field: " , stringify ! (FOCCQ33600OutBlock1) , "::" , stringify ! (TermTp))) ; } test_field_TermTp () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct FOCCQ33600OutBlock2 { pub RecCnt : [:: std :: os :: raw :: c_char ; 5usize] , pub AcntNm : [:: std :: os :: raw :: c_char ; 40usize] , pub BnsctrAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub MnyinAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub MnyoutAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub InvstAvrbalPramt : [:: std :: os :: raw :: c_char ; 16usize] , pub InvstPlAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub InvstErnrat : [:: std :: os :: raw :: c_char ; 9usize] , } # [test] fn bindgen_test_layout_FOCCQ33600OutBlock2 () { assert_eq ! (:: std :: mem :: size_of :: < FOCCQ33600OutBlock2 > () , 134usize , concat ! ("Size of: " , stringify ! (FOCCQ33600OutBlock2))) ; assert_eq ! (:: std :: mem :: align_of :: < FOCCQ33600OutBlock2 > () , 1usize , concat ! ("Alignment of " , stringify ! (FOCCQ33600OutBlock2))) ; fn test_field_RecCnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < FOCCQ33600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . RecCnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (FOCCQ33600OutBlock2) , "::" , stringify ! (RecCnt))) ; } test_field_RecCnt () ; fn test_field_AcntNm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < FOCCQ33600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . AcntNm) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (FOCCQ33600OutBlock2) , "::" , stringify ! (AcntNm))) ; } test_field_AcntNm () ; fn test_field_BnsctrAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < FOCCQ33600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BnsctrAmt) as usize - ptr as usize } , 45usize , concat ! ("Offset of field: " , stringify ! (FOCCQ33600OutBlock2) , "::" , stringify ! (BnsctrAmt))) ; } test_field_BnsctrAmt () ; fn test_field_MnyinAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < FOCCQ33600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MnyinAmt) as usize - ptr as usize } , 61usize , concat ! ("Offset of field: " , stringify ! (FOCCQ33600OutBlock2) , "::" , stringify ! (MnyinAmt))) ; } test_field_MnyinAmt () ; fn test_field_MnyoutAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < FOCCQ33600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MnyoutAmt) as usize - ptr as usize } , 77usize , concat ! ("Offset of field: " , stringify ! (FOCCQ33600OutBlock2) , "::" , stringify ! (MnyoutAmt))) ; } test_field_MnyoutAmt () ; fn test_field_InvstAvrbalPramt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < FOCCQ33600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . InvstAvrbalPramt) as usize - ptr as usize } , 93usize , concat ! ("Offset of field: " , stringify ! (FOCCQ33600OutBlock2) , "::" , stringify ! (InvstAvrbalPramt))) ; } test_field_InvstAvrbalPramt () ; fn test_field_InvstPlAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < FOCCQ33600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . InvstPlAmt) as usize - ptr as usize } , 109usize , concat ! ("Offset of field: " , stringify ! (FOCCQ33600OutBlock2) , "::" , stringify ! (InvstPlAmt))) ; } test_field_InvstPlAmt () ; fn test_field_InvstErnrat () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < FOCCQ33600OutBlock2 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . InvstErnrat) as usize - ptr as usize } , 125usize , concat ! ("Offset of field: " , stringify ! (FOCCQ33600OutBlock2) , "::" , stringify ! (InvstErnrat))) ; } test_field_InvstErnrat () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct FOCCQ33600OutBlock3 { pub BaseDt : [:: std :: os :: raw :: c_char ; 8usize] , pub FdEvalAmt : [:: std :: os :: raw :: c_char ; 19usize] , pub EotEvalAmt : [:: std :: os :: raw :: c_char ; 19usize] , pub InvstAvrbalPramt : [:: std :: os :: raw :: c_char ; 16usize] , pub BnsctrAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub MnyinSecinAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub MnyoutSecoutAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub EvalPnlAmt : [:: std :: os :: raw :: c_char ; 16usize] , pub TermErnrat : [:: std :: os :: raw :: c_char ; 11usize] , pub Idx : [:: std :: os :: raw :: c_char ; 13usize] , } # [test] fn bindgen_test_layout_FOCCQ33600OutBlock3 () { assert_eq ! (:: std :: mem :: size_of :: < FOCCQ33600OutBlock3 > () , 150usize , concat ! ("Size of: " , stringify ! (FOCCQ33600OutBlock3))) ; assert_eq ! (:: std :: mem :: align_of :: < FOCCQ33600OutBlock3 > () , 1usize , concat ! ("Alignment of " , stringify ! (FOCCQ33600OutBlock3))) ; fn test_field_BaseDt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < FOCCQ33600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BaseDt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (FOCCQ33600OutBlock3) , "::" , stringify ! (BaseDt))) ; } test_field_BaseDt () ; fn test_field_FdEvalAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < FOCCQ33600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . FdEvalAmt) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (FOCCQ33600OutBlock3) , "::" , stringify ! (FdEvalAmt))) ; } test_field_FdEvalAmt () ; fn test_field_EotEvalAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < FOCCQ33600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . EotEvalAmt) as usize - ptr as usize } , 27usize , concat ! ("Offset of field: " , stringify ! (FOCCQ33600OutBlock3) , "::" , stringify ! (EotEvalAmt))) ; } test_field_EotEvalAmt () ; fn test_field_InvstAvrbalPramt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < FOCCQ33600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . InvstAvrbalPramt) as usize - ptr as usize } , 46usize , concat ! ("Offset of field: " , stringify ! (FOCCQ33600OutBlock3) , "::" , stringify ! (InvstAvrbalPramt))) ; } test_field_InvstAvrbalPramt () ; fn test_field_BnsctrAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < FOCCQ33600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . BnsctrAmt) as usize - ptr as usize } , 62usize , concat ! ("Offset of field: " , stringify ! (FOCCQ33600OutBlock3) , "::" , stringify ! (BnsctrAmt))) ; } test_field_BnsctrAmt () ; fn test_field_MnyinSecinAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < FOCCQ33600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MnyinSecinAmt) as usize - ptr as usize } , 78usize , concat ! ("Offset of field: " , stringify ! (FOCCQ33600OutBlock3) , "::" , stringify ! (MnyinSecinAmt))) ; } test_field_MnyinSecinAmt () ; fn test_field_MnyoutSecoutAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < FOCCQ33600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . MnyoutSecoutAmt) as usize - ptr as usize } , 94usize , concat ! ("Offset of field: " , stringify ! (FOCCQ33600OutBlock3) , "::" , stringify ! (MnyoutSecoutAmt))) ; } test_field_MnyoutSecoutAmt () ; fn test_field_EvalPnlAmt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < FOCCQ33600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . EvalPnlAmt) as usize - ptr as usize } , 110usize , concat ! ("Offset of field: " , stringify ! (FOCCQ33600OutBlock3) , "::" , stringify ! (EvalPnlAmt))) ; } test_field_EvalPnlAmt () ; fn test_field_TermErnrat () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < FOCCQ33600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . TermErnrat) as usize - ptr as usize } , 126usize , concat ! ("Offset of field: " , stringify ! (FOCCQ33600OutBlock3) , "::" , stringify ! (TermErnrat))) ; } test_field_TermErnrat () ; fn test_field_Idx () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < FOCCQ33600OutBlock3 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . Idx) as usize - ptr as usize } , 137usize , concat ! ("Offset of field: " , stringify ! (FOCCQ33600OutBlock3) , "::" , stringify ! (Idx))) ; } test_field_Idx () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T0150InBlock { pub accno : [:: std :: os :: raw :: c_char ; 11usize] , pub cts_medosu : [:: std :: os :: raw :: c_char ; 1usize] , pub cts_expcode : [:: std :: os :: raw :: c_char ; 12usize] , pub cts_price : [:: std :: os :: raw :: c_char ; 9usize] , pub cts_middiv : [:: std :: os :: raw :: c_char ; 2usize] , } # [test] fn bindgen_test_layout_T0150InBlock () { assert_eq ! (:: std :: mem :: size_of :: < T0150InBlock > () , 35usize , concat ! ("Size of: " , stringify ! (T0150InBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T0150InBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T0150InBlock))) ; fn test_field_accno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . accno) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T0150InBlock) , "::" , stringify ! (accno))) ; } test_field_accno () ; fn test_field_cts_medosu () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_medosu) as usize - ptr as usize } , 11usize , concat ! ("Offset of field: " , stringify ! (T0150InBlock) , "::" , stringify ! (cts_medosu))) ; } test_field_cts_medosu () ; fn test_field_cts_expcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_expcode) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (T0150InBlock) , "::" , stringify ! (cts_expcode))) ; } test_field_cts_expcode () ; fn test_field_cts_price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_price) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (T0150InBlock) , "::" , stringify ! (cts_price))) ; } test_field_cts_price () ; fn test_field_cts_middiv () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_middiv) as usize - ptr as usize } , 33usize , concat ! ("Offset of field: " , stringify ! (T0150InBlock) , "::" , stringify ! (cts_middiv))) ; } test_field_cts_middiv () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T0150OutBlock { pub mdqty : [:: std :: os :: raw :: c_char ; 9usize] , pub mdamt : [:: std :: os :: raw :: c_char ; 18usize] , pub mdfee : [:: std :: os :: raw :: c_char ; 18usize] , pub mdtax : [:: std :: os :: raw :: c_char ; 18usize] , pub mdargtax : [:: std :: os :: raw :: c_char ; 18usize] , pub tmdtax : [:: std :: os :: raw :: c_char ; 18usize] , pub mdadjamt : [:: std :: os :: raw :: c_char ; 18usize] , pub msqty : [:: std :: os :: raw :: c_char ; 9usize] , pub msamt : [:: std :: os :: raw :: c_char ; 18usize] , pub msfee : [:: std :: os :: raw :: c_char ; 18usize] , pub tmstax : [:: std :: os :: raw :: c_char ; 18usize] , pub msadjamt : [:: std :: os :: raw :: c_char ; 18usize] , pub tqty : [:: std :: os :: raw :: c_char ; 9usize] , pub tamt : [:: std :: os :: raw :: c_char ; 18usize] , pub tfee : [:: std :: os :: raw :: c_char ; 18usize] , pub tottax : [:: std :: os :: raw :: c_char ; 18usize] , pub targtax : [:: std :: os :: raw :: c_char ; 18usize] , pub ttax : [:: std :: os :: raw :: c_char ; 18usize] , pub tadjamt : [:: std :: os :: raw :: c_char ; 18usize] , pub cts_medosu : [:: std :: os :: raw :: c_char ; 1usize] , pub cts_expcode : [:: std :: os :: raw :: c_char ; 12usize] , pub cts_price : [:: std :: os :: raw :: c_char ; 9usize] , pub cts_middiv : [:: std :: os :: raw :: c_char ; 2usize] , } # [test] fn bindgen_test_layout_T0150OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < T0150OutBlock > () , 339usize , concat ! ("Size of: " , stringify ! (T0150OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T0150OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T0150OutBlock))) ; fn test_field_mdqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mdqty) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock) , "::" , stringify ! (mdqty))) ; } test_field_mdqty () ; fn test_field_mdamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mdamt) as usize - ptr as usize } , 9usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock) , "::" , stringify ! (mdamt))) ; } test_field_mdamt () ; fn test_field_mdfee () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mdfee) as usize - ptr as usize } , 27usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock) , "::" , stringify ! (mdfee))) ; } test_field_mdfee () ; fn test_field_mdtax () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mdtax) as usize - ptr as usize } , 45usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock) , "::" , stringify ! (mdtax))) ; } test_field_mdtax () ; fn test_field_mdargtax () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mdargtax) as usize - ptr as usize } , 63usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock) , "::" , stringify ! (mdargtax))) ; } test_field_mdargtax () ; fn test_field_tmdtax () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tmdtax) as usize - ptr as usize } , 81usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock) , "::" , stringify ! (tmdtax))) ; } test_field_tmdtax () ; fn test_field_mdadjamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mdadjamt) as usize - ptr as usize } , 99usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock) , "::" , stringify ! (mdadjamt))) ; } test_field_mdadjamt () ; fn test_field_msqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . msqty) as usize - ptr as usize } , 117usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock) , "::" , stringify ! (msqty))) ; } test_field_msqty () ; fn test_field_msamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . msamt) as usize - ptr as usize } , 126usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock) , "::" , stringify ! (msamt))) ; } test_field_msamt () ; fn test_field_msfee () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . msfee) as usize - ptr as usize } , 144usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock) , "::" , stringify ! (msfee))) ; } test_field_msfee () ; fn test_field_tmstax () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tmstax) as usize - ptr as usize } , 162usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock) , "::" , stringify ! (tmstax))) ; } test_field_tmstax () ; fn test_field_msadjamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . msadjamt) as usize - ptr as usize } , 180usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock) , "::" , stringify ! (msadjamt))) ; } test_field_msadjamt () ; fn test_field_tqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tqty) as usize - ptr as usize } , 198usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock) , "::" , stringify ! (tqty))) ; } test_field_tqty () ; fn test_field_tamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tamt) as usize - ptr as usize } , 207usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock) , "::" , stringify ! (tamt))) ; } test_field_tamt () ; fn test_field_tfee () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tfee) as usize - ptr as usize } , 225usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock) , "::" , stringify ! (tfee))) ; } test_field_tfee () ; fn test_field_tottax () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tottax) as usize - ptr as usize } , 243usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock) , "::" , stringify ! (tottax))) ; } test_field_tottax () ; fn test_field_targtax () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . targtax) as usize - ptr as usize } , 261usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock) , "::" , stringify ! (targtax))) ; } test_field_targtax () ; fn test_field_ttax () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ttax) as usize - ptr as usize } , 279usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock) , "::" , stringify ! (ttax))) ; } test_field_ttax () ; fn test_field_tadjamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tadjamt) as usize - ptr as usize } , 297usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock) , "::" , stringify ! (tadjamt))) ; } test_field_tadjamt () ; fn test_field_cts_medosu () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_medosu) as usize - ptr as usize } , 315usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock) , "::" , stringify ! (cts_medosu))) ; } test_field_cts_medosu () ; fn test_field_cts_expcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_expcode) as usize - ptr as usize } , 316usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock) , "::" , stringify ! (cts_expcode))) ; } test_field_cts_expcode () ; fn test_field_cts_price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_price) as usize - ptr as usize } , 328usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock) , "::" , stringify ! (cts_price))) ; } test_field_cts_price () ; fn test_field_cts_middiv () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_middiv) as usize - ptr as usize } , 337usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock) , "::" , stringify ! (cts_middiv))) ; } test_field_cts_middiv () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T0150OutBlock1 { pub medosu : [:: std :: os :: raw :: c_char ; 10usize] , pub expcode : [:: std :: os :: raw :: c_char ; 12usize] , pub qty : [:: std :: os :: raw :: c_char ; 9usize] , pub price : [:: std :: os :: raw :: c_char ; 9usize] , pub amt : [:: std :: os :: raw :: c_char ; 18usize] , pub fee : [:: std :: os :: raw :: c_char ; 18usize] , pub tax : [:: std :: os :: raw :: c_char ; 18usize] , pub argtax : [:: std :: os :: raw :: c_char ; 18usize] , pub adjamt : [:: std :: os :: raw :: c_char ; 18usize] , pub middiv : [:: std :: os :: raw :: c_char ; 20usize] , } # [test] fn bindgen_test_layout_T0150OutBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < T0150OutBlock1 > () , 150usize , concat ! ("Size of: " , stringify ! (T0150OutBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < T0150OutBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (T0150OutBlock1))) ; fn test_field_medosu () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . medosu) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock1) , "::" , stringify ! (medosu))) ; } test_field_medosu () ; fn test_field_expcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . expcode) as usize - ptr as usize } , 10usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock1) , "::" , stringify ! (expcode))) ; } test_field_expcode () ; fn test_field_qty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . qty) as usize - ptr as usize } , 22usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock1) , "::" , stringify ! (qty))) ; } test_field_qty () ; fn test_field_price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . price) as usize - ptr as usize } , 31usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock1) , "::" , stringify ! (price))) ; } test_field_price () ; fn test_field_amt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . amt) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock1) , "::" , stringify ! (amt))) ; } test_field_amt () ; fn test_field_fee () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . fee) as usize - ptr as usize } , 58usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock1) , "::" , stringify ! (fee))) ; } test_field_fee () ; fn test_field_tax () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tax) as usize - ptr as usize } , 76usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock1) , "::" , stringify ! (tax))) ; } test_field_tax () ; fn test_field_argtax () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . argtax) as usize - ptr as usize } , 94usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock1) , "::" , stringify ! (argtax))) ; } test_field_argtax () ; fn test_field_adjamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . adjamt) as usize - ptr as usize } , 112usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock1) , "::" , stringify ! (adjamt))) ; } test_field_adjamt () ; fn test_field_middiv () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0150OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . middiv) as usize - ptr as usize } , 130usize , concat ! ("Offset of field: " , stringify ! (T0150OutBlock1) , "::" , stringify ! (middiv))) ; } test_field_middiv () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T0151InBlock { pub date : [:: std :: os :: raw :: c_char ; 8usize] , pub accno : [:: std :: os :: raw :: c_char ; 11usize] , pub cts_medosu : [:: std :: os :: raw :: c_char ; 1usize] , pub cts_expcode : [:: std :: os :: raw :: c_char ; 12usize] , pub cts_price : [:: std :: os :: raw :: c_char ; 9usize] , pub cts_middiv : [:: std :: os :: raw :: c_char ; 2usize] , } # [test] fn bindgen_test_layout_T0151InBlock () { assert_eq ! (:: std :: mem :: size_of :: < T0151InBlock > () , 43usize , concat ! ("Size of: " , stringify ! (T0151InBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T0151InBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T0151InBlock))) ; fn test_field_date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . date) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T0151InBlock) , "::" , stringify ! (date))) ; } test_field_date () ; fn test_field_accno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . accno) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (T0151InBlock) , "::" , stringify ! (accno))) ; } test_field_accno () ; fn test_field_cts_medosu () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_medosu) as usize - ptr as usize } , 19usize , concat ! ("Offset of field: " , stringify ! (T0151InBlock) , "::" , stringify ! (cts_medosu))) ; } test_field_cts_medosu () ; fn test_field_cts_expcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_expcode) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (T0151InBlock) , "::" , stringify ! (cts_expcode))) ; } test_field_cts_expcode () ; fn test_field_cts_price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_price) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (T0151InBlock) , "::" , stringify ! (cts_price))) ; } test_field_cts_price () ; fn test_field_cts_middiv () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_middiv) as usize - ptr as usize } , 41usize , concat ! ("Offset of field: " , stringify ! (T0151InBlock) , "::" , stringify ! (cts_middiv))) ; } test_field_cts_middiv () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T0151OutBlock { pub mdqty : [:: std :: os :: raw :: c_char ; 9usize] , pub mdamt : [:: std :: os :: raw :: c_char ; 18usize] , pub mdfee : [:: std :: os :: raw :: c_char ; 18usize] , pub mdtax : [:: std :: os :: raw :: c_char ; 18usize] , pub mdargtax : [:: std :: os :: raw :: c_char ; 18usize] , pub tmdtax : [:: std :: os :: raw :: c_char ; 18usize] , pub mdadjamt : [:: std :: os :: raw :: c_char ; 18usize] , pub msqty : [:: std :: os :: raw :: c_char ; 9usize] , pub msamt : [:: std :: os :: raw :: c_char ; 18usize] , pub msfee : [:: std :: os :: raw :: c_char ; 18usize] , pub tmstax : [:: std :: os :: raw :: c_char ; 18usize] , pub msadjamt : [:: std :: os :: raw :: c_char ; 18usize] , pub tqty : [:: std :: os :: raw :: c_char ; 9usize] , pub tamt : [:: std :: os :: raw :: c_char ; 18usize] , pub tfee : [:: std :: os :: raw :: c_char ; 18usize] , pub tottax : [:: std :: os :: raw :: c_char ; 18usize] , pub targtax : [:: std :: os :: raw :: c_char ; 18usize] , pub ttax : [:: std :: os :: raw :: c_char ; 18usize] , pub tadjamt : [:: std :: os :: raw :: c_char ; 18usize] , pub cts_medosu : [:: std :: os :: raw :: c_char ; 1usize] , pub cts_expcode : [:: std :: os :: raw :: c_char ; 12usize] , pub cts_price : [:: std :: os :: raw :: c_char ; 9usize] , pub cts_middiv : [:: std :: os :: raw :: c_char ; 2usize] , } # [test] fn bindgen_test_layout_T0151OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < T0151OutBlock > () , 339usize , concat ! ("Size of: " , stringify ! (T0151OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T0151OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T0151OutBlock))) ; fn test_field_mdqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mdqty) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock) , "::" , stringify ! (mdqty))) ; } test_field_mdqty () ; fn test_field_mdamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mdamt) as usize - ptr as usize } , 9usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock) , "::" , stringify ! (mdamt))) ; } test_field_mdamt () ; fn test_field_mdfee () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mdfee) as usize - ptr as usize } , 27usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock) , "::" , stringify ! (mdfee))) ; } test_field_mdfee () ; fn test_field_mdtax () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mdtax) as usize - ptr as usize } , 45usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock) , "::" , stringify ! (mdtax))) ; } test_field_mdtax () ; fn test_field_mdargtax () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mdargtax) as usize - ptr as usize } , 63usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock) , "::" , stringify ! (mdargtax))) ; } test_field_mdargtax () ; fn test_field_tmdtax () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tmdtax) as usize - ptr as usize } , 81usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock) , "::" , stringify ! (tmdtax))) ; } test_field_tmdtax () ; fn test_field_mdadjamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mdadjamt) as usize - ptr as usize } , 99usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock) , "::" , stringify ! (mdadjamt))) ; } test_field_mdadjamt () ; fn test_field_msqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . msqty) as usize - ptr as usize } , 117usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock) , "::" , stringify ! (msqty))) ; } test_field_msqty () ; fn test_field_msamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . msamt) as usize - ptr as usize } , 126usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock) , "::" , stringify ! (msamt))) ; } test_field_msamt () ; fn test_field_msfee () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . msfee) as usize - ptr as usize } , 144usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock) , "::" , stringify ! (msfee))) ; } test_field_msfee () ; fn test_field_tmstax () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tmstax) as usize - ptr as usize } , 162usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock) , "::" , stringify ! (tmstax))) ; } test_field_tmstax () ; fn test_field_msadjamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . msadjamt) as usize - ptr as usize } , 180usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock) , "::" , stringify ! (msadjamt))) ; } test_field_msadjamt () ; fn test_field_tqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tqty) as usize - ptr as usize } , 198usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock) , "::" , stringify ! (tqty))) ; } test_field_tqty () ; fn test_field_tamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tamt) as usize - ptr as usize } , 207usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock) , "::" , stringify ! (tamt))) ; } test_field_tamt () ; fn test_field_tfee () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tfee) as usize - ptr as usize } , 225usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock) , "::" , stringify ! (tfee))) ; } test_field_tfee () ; fn test_field_tottax () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tottax) as usize - ptr as usize } , 243usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock) , "::" , stringify ! (tottax))) ; } test_field_tottax () ; fn test_field_targtax () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . targtax) as usize - ptr as usize } , 261usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock) , "::" , stringify ! (targtax))) ; } test_field_targtax () ; fn test_field_ttax () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ttax) as usize - ptr as usize } , 279usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock) , "::" , stringify ! (ttax))) ; } test_field_ttax () ; fn test_field_tadjamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tadjamt) as usize - ptr as usize } , 297usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock) , "::" , stringify ! (tadjamt))) ; } test_field_tadjamt () ; fn test_field_cts_medosu () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_medosu) as usize - ptr as usize } , 315usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock) , "::" , stringify ! (cts_medosu))) ; } test_field_cts_medosu () ; fn test_field_cts_expcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_expcode) as usize - ptr as usize } , 316usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock) , "::" , stringify ! (cts_expcode))) ; } test_field_cts_expcode () ; fn test_field_cts_price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_price) as usize - ptr as usize } , 328usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock) , "::" , stringify ! (cts_price))) ; } test_field_cts_price () ; fn test_field_cts_middiv () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_middiv) as usize - ptr as usize } , 337usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock) , "::" , stringify ! (cts_middiv))) ; } test_field_cts_middiv () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T0151OutBlock1 { pub medosu : [:: std :: os :: raw :: c_char ; 10usize] , pub expcode : [:: std :: os :: raw :: c_char ; 12usize] , pub qty : [:: std :: os :: raw :: c_char ; 9usize] , pub price : [:: std :: os :: raw :: c_char ; 9usize] , pub amt : [:: std :: os :: raw :: c_char ; 18usize] , pub fee : [:: std :: os :: raw :: c_char ; 18usize] , pub tax : [:: std :: os :: raw :: c_char ; 18usize] , pub argtax : [:: std :: os :: raw :: c_char ; 18usize] , pub adjamt : [:: std :: os :: raw :: c_char ; 18usize] , pub middiv : [:: std :: os :: raw :: c_char ; 20usize] , } # [test] fn bindgen_test_layout_T0151OutBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < T0151OutBlock1 > () , 150usize , concat ! ("Size of: " , stringify ! (T0151OutBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < T0151OutBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (T0151OutBlock1))) ; fn test_field_medosu () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . medosu) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock1) , "::" , stringify ! (medosu))) ; } test_field_medosu () ; fn test_field_expcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . expcode) as usize - ptr as usize } , 10usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock1) , "::" , stringify ! (expcode))) ; } test_field_expcode () ; fn test_field_qty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . qty) as usize - ptr as usize } , 22usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock1) , "::" , stringify ! (qty))) ; } test_field_qty () ; fn test_field_price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . price) as usize - ptr as usize } , 31usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock1) , "::" , stringify ! (price))) ; } test_field_price () ; fn test_field_amt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . amt) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock1) , "::" , stringify ! (amt))) ; } test_field_amt () ; fn test_field_fee () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . fee) as usize - ptr as usize } , 58usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock1) , "::" , stringify ! (fee))) ; } test_field_fee () ; fn test_field_tax () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tax) as usize - ptr as usize } , 76usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock1) , "::" , stringify ! (tax))) ; } test_field_tax () ; fn test_field_argtax () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . argtax) as usize - ptr as usize } , 94usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock1) , "::" , stringify ! (argtax))) ; } test_field_argtax () ; fn test_field_adjamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . adjamt) as usize - ptr as usize } , 112usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock1) , "::" , stringify ! (adjamt))) ; } test_field_adjamt () ; fn test_field_middiv () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0151OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . middiv) as usize - ptr as usize } , 130usize , concat ! ("Offset of field: " , stringify ! (T0151OutBlock1) , "::" , stringify ! (middiv))) ; } test_field_middiv () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T0167OutBlock { pub date : [:: std :: os :: raw :: c_char ; 8usize] , pub time : [:: std :: os :: raw :: c_char ; 12usize] , } # [test] fn bindgen_test_layout_T0167OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < T0167OutBlock > () , 20usize , concat ! ("Size of: " , stringify ! (T0167OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T0167OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T0167OutBlock))) ; fn test_field_date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0167OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . date) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T0167OutBlock) , "::" , stringify ! (date))) ; } test_field_date () ; fn test_field_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0167OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . time) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (T0167OutBlock) , "::" , stringify ! (time))) ; } test_field_time () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T0425InBlock { pub accno : [:: std :: os :: raw :: c_char ; 11usize] , pub _accno : :: std :: os :: raw :: c_char , pub passwd : [:: std :: os :: raw :: c_char ; 8usize] , pub _passwd : :: std :: os :: raw :: c_char , pub expcode : [:: std :: os :: raw :: c_char ; 12usize] , pub _expcode : :: std :: os :: raw :: c_char , pub chegb : [:: std :: os :: raw :: c_char ; 1usize] , pub _chegb : :: std :: os :: raw :: c_char , pub medosu : [:: std :: os :: raw :: c_char ; 1usize] , pub _medosu : :: std :: os :: raw :: c_char , pub sortgb : [:: std :: os :: raw :: c_char ; 1usize] , pub _sortgb : :: std :: os :: raw :: c_char , pub cts_ordno : [:: std :: os :: raw :: c_char ; 10usize] , pub _cts_ordno : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T0425InBlock () { assert_eq ! (:: std :: mem :: size_of :: < T0425InBlock > () , 51usize , concat ! ("Size of: " , stringify ! (T0425InBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T0425InBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T0425InBlock))) ; fn test_field_accno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . accno) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T0425InBlock) , "::" , stringify ! (accno))) ; } test_field_accno () ; fn test_field__accno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _accno) as usize - ptr as usize } , 11usize , concat ! ("Offset of field: " , stringify ! (T0425InBlock) , "::" , stringify ! (_accno))) ; } test_field__accno () ; fn test_field_passwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . passwd) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (T0425InBlock) , "::" , stringify ! (passwd))) ; } test_field_passwd () ; fn test_field__passwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _passwd) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (T0425InBlock) , "::" , stringify ! (_passwd))) ; } test_field__passwd () ; fn test_field_expcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . expcode) as usize - ptr as usize } , 21usize , concat ! ("Offset of field: " , stringify ! (T0425InBlock) , "::" , stringify ! (expcode))) ; } test_field_expcode () ; fn test_field__expcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _expcode) as usize - ptr as usize } , 33usize , concat ! ("Offset of field: " , stringify ! (T0425InBlock) , "::" , stringify ! (_expcode))) ; } test_field__expcode () ; fn test_field_chegb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . chegb) as usize - ptr as usize } , 34usize , concat ! ("Offset of field: " , stringify ! (T0425InBlock) , "::" , stringify ! (chegb))) ; } test_field_chegb () ; fn test_field__chegb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _chegb) as usize - ptr as usize } , 35usize , concat ! ("Offset of field: " , stringify ! (T0425InBlock) , "::" , stringify ! (_chegb))) ; } test_field__chegb () ; fn test_field_medosu () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . medosu) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (T0425InBlock) , "::" , stringify ! (medosu))) ; } test_field_medosu () ; fn test_field__medosu () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _medosu) as usize - ptr as usize } , 37usize , concat ! ("Offset of field: " , stringify ! (T0425InBlock) , "::" , stringify ! (_medosu))) ; } test_field__medosu () ; fn test_field_sortgb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sortgb) as usize - ptr as usize } , 38usize , concat ! ("Offset of field: " , stringify ! (T0425InBlock) , "::" , stringify ! (sortgb))) ; } test_field_sortgb () ; fn test_field__sortgb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sortgb) as usize - ptr as usize } , 39usize , concat ! ("Offset of field: " , stringify ! (T0425InBlock) , "::" , stringify ! (_sortgb))) ; } test_field__sortgb () ; fn test_field_cts_ordno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_ordno) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (T0425InBlock) , "::" , stringify ! (cts_ordno))) ; } test_field_cts_ordno () ; fn test_field__cts_ordno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cts_ordno) as usize - ptr as usize } , 50usize , concat ! ("Offset of field: " , stringify ! (T0425InBlock) , "::" , stringify ! (_cts_ordno))) ; } test_field__cts_ordno () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T0425OutBlock { pub tqty : [:: std :: os :: raw :: c_char ; 18usize] , pub _tqty : :: std :: os :: raw :: c_char , pub tcheqty : [:: std :: os :: raw :: c_char ; 18usize] , pub _tcheqty : :: std :: os :: raw :: c_char , pub tordrem : [:: std :: os :: raw :: c_char ; 18usize] , pub _tordrem : :: std :: os :: raw :: c_char , pub cmss : [:: std :: os :: raw :: c_char ; 18usize] , pub _cmss : :: std :: os :: raw :: c_char , pub tamt : [:: std :: os :: raw :: c_char ; 18usize] , pub _tamt : :: std :: os :: raw :: c_char , pub tmdamt : [:: std :: os :: raw :: c_char ; 18usize] , pub _tmdamt : :: std :: os :: raw :: c_char , pub tmsamt : [:: std :: os :: raw :: c_char ; 18usize] , pub _tmsamt : :: std :: os :: raw :: c_char , pub tax : [:: std :: os :: raw :: c_char ; 18usize] , pub _tax : :: std :: os :: raw :: c_char , pub cts_ordno : [:: std :: os :: raw :: c_char ; 10usize] , pub _cts_ordno : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T0425OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < T0425OutBlock > () , 163usize , concat ! ("Size of: " , stringify ! (T0425OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T0425OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T0425OutBlock))) ; fn test_field_tqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tqty) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock) , "::" , stringify ! (tqty))) ; } test_field_tqty () ; fn test_field__tqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _tqty) as usize - ptr as usize } , 18usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock) , "::" , stringify ! (_tqty))) ; } test_field__tqty () ; fn test_field_tcheqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tcheqty) as usize - ptr as usize } , 19usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock) , "::" , stringify ! (tcheqty))) ; } test_field_tcheqty () ; fn test_field__tcheqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _tcheqty) as usize - ptr as usize } , 37usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock) , "::" , stringify ! (_tcheqty))) ; } test_field__tcheqty () ; fn test_field_tordrem () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tordrem) as usize - ptr as usize } , 38usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock) , "::" , stringify ! (tordrem))) ; } test_field_tordrem () ; fn test_field__tordrem () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _tordrem) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock) , "::" , stringify ! (_tordrem))) ; } test_field__tordrem () ; fn test_field_cmss () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cmss) as usize - ptr as usize } , 57usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock) , "::" , stringify ! (cmss))) ; } test_field_cmss () ; fn test_field__cmss () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cmss) as usize - ptr as usize } , 75usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock) , "::" , stringify ! (_cmss))) ; } test_field__cmss () ; fn test_field_tamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tamt) as usize - ptr as usize } , 76usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock) , "::" , stringify ! (tamt))) ; } test_field_tamt () ; fn test_field__tamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _tamt) as usize - ptr as usize } , 94usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock) , "::" , stringify ! (_tamt))) ; } test_field__tamt () ; fn test_field_tmdamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tmdamt) as usize - ptr as usize } , 95usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock) , "::" , stringify ! (tmdamt))) ; } test_field_tmdamt () ; fn test_field__tmdamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _tmdamt) as usize - ptr as usize } , 113usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock) , "::" , stringify ! (_tmdamt))) ; } test_field__tmdamt () ; fn test_field_tmsamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tmsamt) as usize - ptr as usize } , 114usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock) , "::" , stringify ! (tmsamt))) ; } test_field_tmsamt () ; fn test_field__tmsamt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _tmsamt) as usize - ptr as usize } , 132usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock) , "::" , stringify ! (_tmsamt))) ; } test_field__tmsamt () ; fn test_field_tax () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tax) as usize - ptr as usize } , 133usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock) , "::" , stringify ! (tax))) ; } test_field_tax () ; fn test_field__tax () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _tax) as usize - ptr as usize } , 151usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock) , "::" , stringify ! (_tax))) ; } test_field__tax () ; fn test_field_cts_ordno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_ordno) as usize - ptr as usize } , 152usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock) , "::" , stringify ! (cts_ordno))) ; } test_field_cts_ordno () ; fn test_field__cts_ordno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cts_ordno) as usize - ptr as usize } , 162usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock) , "::" , stringify ! (_cts_ordno))) ; } test_field__cts_ordno () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T0425OutBlock1 { pub ordno : [:: std :: os :: raw :: c_char ; 10usize] , pub _ordno : :: std :: os :: raw :: c_char , pub expcode : [:: std :: os :: raw :: c_char ; 12usize] , pub _expcode : :: std :: os :: raw :: c_char , pub medosu : [:: std :: os :: raw :: c_char ; 10usize] , pub _medosu : :: std :: os :: raw :: c_char , pub qty : [:: std :: os :: raw :: c_char ; 9usize] , pub _qty : :: std :: os :: raw :: c_char , pub price : [:: std :: os :: raw :: c_char ; 9usize] , pub _price : :: std :: os :: raw :: c_char , pub cheqty : [:: std :: os :: raw :: c_char ; 9usize] , pub _cheqty : :: std :: os :: raw :: c_char , pub cheprice : [:: std :: os :: raw :: c_char ; 9usize] , pub _cheprice : :: std :: os :: raw :: c_char , pub ordrem : [:: std :: os :: raw :: c_char ; 9usize] , pub _ordrem : :: std :: os :: raw :: c_char , pub cfmqty : [:: std :: os :: raw :: c_char ; 9usize] , pub _cfmqty : :: std :: os :: raw :: c_char , pub status : [:: std :: os :: raw :: c_char ; 10usize] , pub _status : :: std :: os :: raw :: c_char , pub orgordno : [:: std :: os :: raw :: c_char ; 10usize] , pub _orgordno : :: std :: os :: raw :: c_char , pub ordgb : [:: std :: os :: raw :: c_char ; 20usize] , pub _ordgb : :: std :: os :: raw :: c_char , pub ordtime : [:: std :: os :: raw :: c_char ; 8usize] , pub _ordtime : :: std :: os :: raw :: c_char , pub ordermtd : [:: std :: os :: raw :: c_char ; 10usize] , pub _ordermtd : :: std :: os :: raw :: c_char , pub sysprocseq : [:: std :: os :: raw :: c_char ; 10usize] , pub _sysprocseq : :: std :: os :: raw :: c_char , pub hogagb : [:: std :: os :: raw :: c_char ; 2usize] , pub _hogagb : :: std :: os :: raw :: c_char , pub price1 : [:: std :: os :: raw :: c_char ; 8usize] , pub _price1 : :: std :: os :: raw :: c_char , pub orggb : [:: std :: os :: raw :: c_char ; 2usize] , pub _orggb : :: std :: os :: raw :: c_char , pub singb : [:: std :: os :: raw :: c_char ; 2usize] , pub _singb : :: std :: os :: raw :: c_char , pub loandt : [:: std :: os :: raw :: c_char ; 8usize] , pub _loandt : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T0425OutBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < T0425OutBlock1 > () , 196usize , concat ! ("Size of: " , stringify ! (T0425OutBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < T0425OutBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (T0425OutBlock1))) ; fn test_field_ordno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordno) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (ordno))) ; } test_field_ordno () ; fn test_field__ordno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ordno) as usize - ptr as usize } , 10usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (_ordno))) ; } test_field__ordno () ; fn test_field_expcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . expcode) as usize - ptr as usize } , 11usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (expcode))) ; } test_field_expcode () ; fn test_field__expcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _expcode) as usize - ptr as usize } , 23usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (_expcode))) ; } test_field__expcode () ; fn test_field_medosu () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . medosu) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (medosu))) ; } test_field_medosu () ; fn test_field__medosu () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _medosu) as usize - ptr as usize } , 34usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (_medosu))) ; } test_field__medosu () ; fn test_field_qty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . qty) as usize - ptr as usize } , 35usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (qty))) ; } test_field_qty () ; fn test_field__qty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _qty) as usize - ptr as usize } , 44usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (_qty))) ; } test_field__qty () ; fn test_field_price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . price) as usize - ptr as usize } , 45usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (price))) ; } test_field_price () ; fn test_field__price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _price) as usize - ptr as usize } , 54usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (_price))) ; } test_field__price () ; fn test_field_cheqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cheqty) as usize - ptr as usize } , 55usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (cheqty))) ; } test_field_cheqty () ; fn test_field__cheqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cheqty) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (_cheqty))) ; } test_field__cheqty () ; fn test_field_cheprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cheprice) as usize - ptr as usize } , 65usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (cheprice))) ; } test_field_cheprice () ; fn test_field__cheprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cheprice) as usize - ptr as usize } , 74usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (_cheprice))) ; } test_field__cheprice () ; fn test_field_ordrem () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordrem) as usize - ptr as usize } , 75usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (ordrem))) ; } test_field_ordrem () ; fn test_field__ordrem () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ordrem) as usize - ptr as usize } , 84usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (_ordrem))) ; } test_field__ordrem () ; fn test_field_cfmqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cfmqty) as usize - ptr as usize } , 85usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (cfmqty))) ; } test_field_cfmqty () ; fn test_field__cfmqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cfmqty) as usize - ptr as usize } , 94usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (_cfmqty))) ; } test_field__cfmqty () ; fn test_field_status () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . status) as usize - ptr as usize } , 95usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (status))) ; } test_field_status () ; fn test_field__status () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _status) as usize - ptr as usize } , 105usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (_status))) ; } test_field__status () ; fn test_field_orgordno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . orgordno) as usize - ptr as usize } , 106usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (orgordno))) ; } test_field_orgordno () ; fn test_field__orgordno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _orgordno) as usize - ptr as usize } , 116usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (_orgordno))) ; } test_field__orgordno () ; fn test_field_ordgb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordgb) as usize - ptr as usize } , 117usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (ordgb))) ; } test_field_ordgb () ; fn test_field__ordgb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ordgb) as usize - ptr as usize } , 137usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (_ordgb))) ; } test_field__ordgb () ; fn test_field_ordtime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordtime) as usize - ptr as usize } , 138usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (ordtime))) ; } test_field_ordtime () ; fn test_field__ordtime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ordtime) as usize - ptr as usize } , 146usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (_ordtime))) ; } test_field__ordtime () ; fn test_field_ordermtd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordermtd) as usize - ptr as usize } , 147usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (ordermtd))) ; } test_field_ordermtd () ; fn test_field__ordermtd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ordermtd) as usize - ptr as usize } , 157usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (_ordermtd))) ; } test_field__ordermtd () ; fn test_field_sysprocseq () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sysprocseq) as usize - ptr as usize } , 158usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (sysprocseq))) ; } test_field_sysprocseq () ; fn test_field__sysprocseq () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sysprocseq) as usize - ptr as usize } , 168usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (_sysprocseq))) ; } test_field__sysprocseq () ; fn test_field_hogagb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . hogagb) as usize - ptr as usize } , 169usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (hogagb))) ; } test_field_hogagb () ; fn test_field__hogagb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _hogagb) as usize - ptr as usize } , 171usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (_hogagb))) ; } test_field__hogagb () ; fn test_field_price1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . price1) as usize - ptr as usize } , 172usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (price1))) ; } test_field_price1 () ; fn test_field__price1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _price1) as usize - ptr as usize } , 180usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (_price1))) ; } test_field__price1 () ; fn test_field_orggb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . orggb) as usize - ptr as usize } , 181usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (orggb))) ; } test_field_orggb () ; fn test_field__orggb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _orggb) as usize - ptr as usize } , 183usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (_orggb))) ; } test_field__orggb () ; fn test_field_singb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . singb) as usize - ptr as usize } , 184usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (singb))) ; } test_field_singb () ; fn test_field__singb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _singb) as usize - ptr as usize } , 186usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (_singb))) ; } test_field__singb () ; fn test_field_loandt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . loandt) as usize - ptr as usize } , 187usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (loandt))) ; } test_field_loandt () ; fn test_field__loandt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0425OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _loandt) as usize - ptr as usize } , 195usize , concat ! ("Offset of field: " , stringify ! (T0425OutBlock1) , "::" , stringify ! (_loandt))) ; } test_field__loandt () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T0434InBlock { pub accno : [:: std :: os :: raw :: c_char ; 11usize] , pub passwd : [:: std :: os :: raw :: c_char ; 8usize] , pub expcode : [:: std :: os :: raw :: c_char ; 8usize] , pub chegb : [:: std :: os :: raw :: c_char ; 1usize] , pub sortgb : [:: std :: os :: raw :: c_char ; 1usize] , pub cts_ordno : [:: std :: os :: raw :: c_char ; 7usize] , } # [test] fn bindgen_test_layout_T0434InBlock () { assert_eq ! (:: std :: mem :: size_of :: < T0434InBlock > () , 36usize , concat ! ("Size of: " , stringify ! (T0434InBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T0434InBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T0434InBlock))) ; fn test_field_accno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0434InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . accno) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T0434InBlock) , "::" , stringify ! (accno))) ; } test_field_accno () ; fn test_field_passwd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0434InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . passwd) as usize - ptr as usize } , 11usize , concat ! ("Offset of field: " , stringify ! (T0434InBlock) , "::" , stringify ! (passwd))) ; } test_field_passwd () ; fn test_field_expcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0434InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . expcode) as usize - ptr as usize } , 19usize , concat ! ("Offset of field: " , stringify ! (T0434InBlock) , "::" , stringify ! (expcode))) ; } test_field_expcode () ; fn test_field_chegb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0434InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . chegb) as usize - ptr as usize } , 27usize , concat ! ("Offset of field: " , stringify ! (T0434InBlock) , "::" , stringify ! (chegb))) ; } test_field_chegb () ; fn test_field_sortgb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0434InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sortgb) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (T0434InBlock) , "::" , stringify ! (sortgb))) ; } test_field_sortgb () ; fn test_field_cts_ordno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0434InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_ordno) as usize - ptr as usize } , 29usize , concat ! ("Offset of field: " , stringify ! (T0434InBlock) , "::" , stringify ! (cts_ordno))) ; } test_field_cts_ordno () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T0434OutBlock { pub cts_ordno : [:: std :: os :: raw :: c_char ; 7usize] , } # [test] fn bindgen_test_layout_T0434OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < T0434OutBlock > () , 7usize , concat ! ("Size of: " , stringify ! (T0434OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T0434OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T0434OutBlock))) ; fn test_field_cts_ordno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0434OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_ordno) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T0434OutBlock) , "::" , stringify ! (cts_ordno))) ; } test_field_cts_ordno () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T0434OutBlock1 { pub ordno : [:: std :: os :: raw :: c_char ; 7usize] , pub orgordno : [:: std :: os :: raw :: c_char ; 7usize] , pub medosu : [:: std :: os :: raw :: c_char ; 10usize] , pub ordgb : [:: std :: os :: raw :: c_char ; 20usize] , pub qty : [:: std :: os :: raw :: c_char ; 9usize] , pub price : [:: std :: os :: raw :: c_char ; 9usize] , pub cheqty : [:: std :: os :: raw :: c_char ; 9usize] , pub cheprice : [:: std :: os :: raw :: c_char ; 9usize] , pub ordrem : [:: std :: os :: raw :: c_char ; 9usize] , pub status : [:: std :: os :: raw :: c_char ; 10usize] , pub ordtime : [:: std :: os :: raw :: c_char ; 8usize] , pub ordermtd : [:: std :: os :: raw :: c_char ; 10usize] , pub expcode : [:: std :: os :: raw :: c_char ; 8usize] , pub rtcode : [:: std :: os :: raw :: c_char ; 3usize] , pub sysprocseq : [:: std :: os :: raw :: c_char ; 10usize] , pub hogatype : [:: std :: os :: raw :: c_char ; 1usize] , } # [test] fn bindgen_test_layout_T0434OutBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < T0434OutBlock1 > () , 139usize , concat ! ("Size of: " , stringify ! (T0434OutBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < T0434OutBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (T0434OutBlock1))) ; fn test_field_ordno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0434OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordno) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T0434OutBlock1) , "::" , stringify ! (ordno))) ; } test_field_ordno () ; fn test_field_orgordno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0434OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . orgordno) as usize - ptr as usize } , 7usize , concat ! ("Offset of field: " , stringify ! (T0434OutBlock1) , "::" , stringify ! (orgordno))) ; } test_field_orgordno () ; fn test_field_medosu () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0434OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . medosu) as usize - ptr as usize } , 14usize , concat ! ("Offset of field: " , stringify ! (T0434OutBlock1) , "::" , stringify ! (medosu))) ; } test_field_medosu () ; fn test_field_ordgb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0434OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordgb) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (T0434OutBlock1) , "::" , stringify ! (ordgb))) ; } test_field_ordgb () ; fn test_field_qty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0434OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . qty) as usize - ptr as usize } , 44usize , concat ! ("Offset of field: " , stringify ! (T0434OutBlock1) , "::" , stringify ! (qty))) ; } test_field_qty () ; fn test_field_price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0434OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . price) as usize - ptr as usize } , 53usize , concat ! ("Offset of field: " , stringify ! (T0434OutBlock1) , "::" , stringify ! (price))) ; } test_field_price () ; fn test_field_cheqty () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0434OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cheqty) as usize - ptr as usize } , 62usize , concat ! ("Offset of field: " , stringify ! (T0434OutBlock1) , "::" , stringify ! (cheqty))) ; } test_field_cheqty () ; fn test_field_cheprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0434OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cheprice) as usize - ptr as usize } , 71usize , concat ! ("Offset of field: " , stringify ! (T0434OutBlock1) , "::" , stringify ! (cheprice))) ; } test_field_cheprice () ; fn test_field_ordrem () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0434OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordrem) as usize - ptr as usize } , 80usize , concat ! ("Offset of field: " , stringify ! (T0434OutBlock1) , "::" , stringify ! (ordrem))) ; } test_field_ordrem () ; fn test_field_status () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0434OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . status) as usize - ptr as usize } , 89usize , concat ! ("Offset of field: " , stringify ! (T0434OutBlock1) , "::" , stringify ! (status))) ; } test_field_status () ; fn test_field_ordtime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0434OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordtime) as usize - ptr as usize } , 99usize , concat ! ("Offset of field: " , stringify ! (T0434OutBlock1) , "::" , stringify ! (ordtime))) ; } test_field_ordtime () ; fn test_field_ordermtd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0434OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordermtd) as usize - ptr as usize } , 107usize , concat ! ("Offset of field: " , stringify ! (T0434OutBlock1) , "::" , stringify ! (ordermtd))) ; } test_field_ordermtd () ; fn test_field_expcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0434OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . expcode) as usize - ptr as usize } , 117usize , concat ! ("Offset of field: " , stringify ! (T0434OutBlock1) , "::" , stringify ! (expcode))) ; } test_field_expcode () ; fn test_field_rtcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0434OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . rtcode) as usize - ptr as usize } , 125usize , concat ! ("Offset of field: " , stringify ! (T0434OutBlock1) , "::" , stringify ! (rtcode))) ; } test_field_rtcode () ; fn test_field_sysprocseq () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0434OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sysprocseq) as usize - ptr as usize } , 128usize , concat ! ("Offset of field: " , stringify ! (T0434OutBlock1) , "::" , stringify ! (sysprocseq))) ; } test_field_sysprocseq () ; fn test_field_hogatype () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T0434OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . hogatype) as usize - ptr as usize } , 138usize , concat ! ("Offset of field: " , stringify ! (T0434OutBlock1) , "::" , stringify ! (hogatype))) ; } test_field_hogatype () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T1101InBlock { pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T1101InBlock () { assert_eq ! (:: std :: mem :: size_of :: < T1101InBlock > () , 7usize , concat ! ("Size of: " , stringify ! (T1101InBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T1101InBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T1101InBlock))) ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T1101InBlock) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 6usize , concat ! ("Offset of field: " , stringify ! (T1101InBlock) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T1101OutBlock { pub hname : [:: std :: os :: raw :: c_char ; 20usize] , pub _hname : :: std :: os :: raw :: c_char , pub price : [:: std :: os :: raw :: c_char ; 8usize] , pub _price : :: std :: os :: raw :: c_char , pub sign : [:: std :: os :: raw :: c_char ; 1usize] , pub _sign : :: std :: os :: raw :: c_char , pub change : [:: std :: os :: raw :: c_char ; 8usize] , pub _change : :: std :: os :: raw :: c_char , pub diff : [:: std :: os :: raw :: c_char ; 6usize] , pub _diff : :: std :: os :: raw :: c_char , pub volume : [:: std :: os :: raw :: c_char ; 12usize] , pub _volume : :: std :: os :: raw :: c_char , pub jnilclose : [:: std :: os :: raw :: c_char ; 8usize] , pub _jnilclose : :: std :: os :: raw :: c_char , pub offerho1 : [:: std :: os :: raw :: c_char ; 8usize] , pub _offerho1 : :: std :: os :: raw :: c_char , pub bidho1 : [:: std :: os :: raw :: c_char ; 8usize] , pub _bidho1 : :: std :: os :: raw :: c_char , pub offerrem1 : [:: std :: os :: raw :: c_char ; 12usize] , pub _offerrem1 : :: std :: os :: raw :: c_char , pub bidrem1 : [:: std :: os :: raw :: c_char ; 12usize] , pub _bidrem1 : :: std :: os :: raw :: c_char , pub preoffercha1 : [:: std :: os :: raw :: c_char ; 12usize] , pub _preoffercha1 : :: std :: os :: raw :: c_char , pub prebidcha1 : [:: std :: os :: raw :: c_char ; 12usize] , pub _prebidcha1 : :: std :: os :: raw :: c_char , pub offerho2 : [:: std :: os :: raw :: c_char ; 8usize] , pub _offerho2 : :: std :: os :: raw :: c_char , pub bidho2 : [:: std :: os :: raw :: c_char ; 8usize] , pub _bidho2 : :: std :: os :: raw :: c_char , pub offerrem2 : [:: std :: os :: raw :: c_char ; 12usize] , pub _offerrem2 : :: std :: os :: raw :: c_char , pub bidrem2 : [:: std :: os :: raw :: c_char ; 12usize] , pub _bidrem2 : :: std :: os :: raw :: c_char , pub preoffercha2 : [:: std :: os :: raw :: c_char ; 12usize] , pub _preoffercha2 : :: std :: os :: raw :: c_char , pub prebidcha2 : [:: std :: os :: raw :: c_char ; 12usize] , pub _prebidcha2 : :: std :: os :: raw :: c_char , pub offerho3 : [:: std :: os :: raw :: c_char ; 8usize] , pub _offerho3 : :: std :: os :: raw :: c_char , pub bidho3 : [:: std :: os :: raw :: c_char ; 8usize] , pub _bidho3 : :: std :: os :: raw :: c_char , pub offerrem3 : [:: std :: os :: raw :: c_char ; 12usize] , pub _offerrem3 : :: std :: os :: raw :: c_char , pub bidrem3 : [:: std :: os :: raw :: c_char ; 12usize] , pub _bidrem3 : :: std :: os :: raw :: c_char , pub preoffercha3 : [:: std :: os :: raw :: c_char ; 12usize] , pub _preoffercha3 : :: std :: os :: raw :: c_char , pub prebidcha3 : [:: std :: os :: raw :: c_char ; 12usize] , pub _prebidcha3 : :: std :: os :: raw :: c_char , pub offerho4 : [:: std :: os :: raw :: c_char ; 8usize] , pub _offerho4 : :: std :: os :: raw :: c_char , pub bidho4 : [:: std :: os :: raw :: c_char ; 8usize] , pub _bidho4 : :: std :: os :: raw :: c_char , pub offerrem4 : [:: std :: os :: raw :: c_char ; 12usize] , pub _offerrem4 : :: std :: os :: raw :: c_char , pub bidrem4 : [:: std :: os :: raw :: c_char ; 12usize] , pub _bidrem4 : :: std :: os :: raw :: c_char , pub preoffercha4 : [:: std :: os :: raw :: c_char ; 12usize] , pub _preoffercha4 : :: std :: os :: raw :: c_char , pub prebidcha4 : [:: std :: os :: raw :: c_char ; 12usize] , pub _prebidcha4 : :: std :: os :: raw :: c_char , pub offerho5 : [:: std :: os :: raw :: c_char ; 8usize] , pub _offerho5 : :: std :: os :: raw :: c_char , pub bidho5 : [:: std :: os :: raw :: c_char ; 8usize] , pub _bidho5 : :: std :: os :: raw :: c_char , pub offerrem5 : [:: std :: os :: raw :: c_char ; 12usize] , pub _offerrem5 : :: std :: os :: raw :: c_char , pub bidrem5 : [:: std :: os :: raw :: c_char ; 12usize] , pub _bidrem5 : :: std :: os :: raw :: c_char , pub preoffercha5 : [:: std :: os :: raw :: c_char ; 12usize] , pub _preoffercha5 : :: std :: os :: raw :: c_char , pub prebidcha5 : [:: std :: os :: raw :: c_char ; 12usize] , pub _prebidcha5 : :: std :: os :: raw :: c_char , pub offerho6 : [:: std :: os :: raw :: c_char ; 8usize] , pub _offerho6 : :: std :: os :: raw :: c_char , pub bidho6 : [:: std :: os :: raw :: c_char ; 8usize] , pub _bidho6 : :: std :: os :: raw :: c_char , pub offerrem6 : [:: std :: os :: raw :: c_char ; 12usize] , pub _offerrem6 : :: std :: os :: raw :: c_char , pub bidrem6 : [:: std :: os :: raw :: c_char ; 12usize] , pub _bidrem6 : :: std :: os :: raw :: c_char , pub preoffercha6 : [:: std :: os :: raw :: c_char ; 12usize] , pub _preoffercha6 : :: std :: os :: raw :: c_char , pub prebidcha6 : [:: std :: os :: raw :: c_char ; 12usize] , pub _prebidcha6 : :: std :: os :: raw :: c_char , pub offerho7 : [:: std :: os :: raw :: c_char ; 8usize] , pub _offerho7 : :: std :: os :: raw :: c_char , pub bidho7 : [:: std :: os :: raw :: c_char ; 8usize] , pub _bidho7 : :: std :: os :: raw :: c_char , pub offerrem7 : [:: std :: os :: raw :: c_char ; 12usize] , pub _offerrem7 : :: std :: os :: raw :: c_char , pub bidrem7 : [:: std :: os :: raw :: c_char ; 12usize] , pub _bidrem7 : :: std :: os :: raw :: c_char , pub preoffercha7 : [:: std :: os :: raw :: c_char ; 12usize] , pub _preoffercha7 : :: std :: os :: raw :: c_char , pub prebidcha7 : [:: std :: os :: raw :: c_char ; 12usize] , pub _prebidcha7 : :: std :: os :: raw :: c_char , pub offerho8 : [:: std :: os :: raw :: c_char ; 8usize] , pub _offerho8 : :: std :: os :: raw :: c_char , pub bidho8 : [:: std :: os :: raw :: c_char ; 8usize] , pub _bidho8 : :: std :: os :: raw :: c_char , pub offerrem8 : [:: std :: os :: raw :: c_char ; 12usize] , pub _offerrem8 : :: std :: os :: raw :: c_char , pub bidrem8 : [:: std :: os :: raw :: c_char ; 12usize] , pub _bidrem8 : :: std :: os :: raw :: c_char , pub preoffercha8 : [:: std :: os :: raw :: c_char ; 12usize] , pub _preoffercha8 : :: std :: os :: raw :: c_char , pub prebidcha8 : [:: std :: os :: raw :: c_char ; 12usize] , pub _prebidcha8 : :: std :: os :: raw :: c_char , pub offerho9 : [:: std :: os :: raw :: c_char ; 8usize] , pub _offerho9 : :: std :: os :: raw :: c_char , pub bidho9 : [:: std :: os :: raw :: c_char ; 8usize] , pub _bidho9 : :: std :: os :: raw :: c_char , pub offerrem9 : [:: std :: os :: raw :: c_char ; 12usize] , pub _offerrem9 : :: std :: os :: raw :: c_char , pub bidrem9 : [:: std :: os :: raw :: c_char ; 12usize] , pub _bidrem9 : :: std :: os :: raw :: c_char , pub preoffercha9 : [:: std :: os :: raw :: c_char ; 12usize] , pub _preoffercha9 : :: std :: os :: raw :: c_char , pub prebidcha9 : [:: std :: os :: raw :: c_char ; 12usize] , pub _prebidcha9 : :: std :: os :: raw :: c_char , pub offerho10 : [:: std :: os :: raw :: c_char ; 8usize] , pub _offerho10 : :: std :: os :: raw :: c_char , pub bidho10 : [:: std :: os :: raw :: c_char ; 8usize] , pub _bidho10 : :: std :: os :: raw :: c_char , pub offerrem10 : [:: std :: os :: raw :: c_char ; 12usize] , pub _offerrem10 : :: std :: os :: raw :: c_char , pub bidrem10 : [:: std :: os :: raw :: c_char ; 12usize] , pub _bidrem10 : :: std :: os :: raw :: c_char , pub preoffercha10 : [:: std :: os :: raw :: c_char ; 12usize] , pub _preoffercha10 : :: std :: os :: raw :: c_char , pub prebidcha10 : [:: std :: os :: raw :: c_char ; 12usize] , pub _prebidcha10 : :: std :: os :: raw :: c_char , pub offer : [:: std :: os :: raw :: c_char ; 12usize] , pub _offer : :: std :: os :: raw :: c_char , pub bid : [:: std :: os :: raw :: c_char ; 12usize] , pub _bid : :: std :: os :: raw :: c_char , pub preoffercha : [:: std :: os :: raw :: c_char ; 12usize] , pub _preoffercha : :: std :: os :: raw :: c_char , pub prebidcha : [:: std :: os :: raw :: c_char ; 12usize] , pub _prebidcha : :: std :: os :: raw :: c_char , pub hotime : [:: std :: os :: raw :: c_char ; 8usize] , pub _hotime : :: std :: os :: raw :: c_char , pub yeprice : [:: std :: os :: raw :: c_char ; 8usize] , pub _yeprice : :: std :: os :: raw :: c_char , pub yevolume : [:: std :: os :: raw :: c_char ; 12usize] , pub _yevolume : :: std :: os :: raw :: c_char , pub yesign : [:: std :: os :: raw :: c_char ; 1usize] , pub _yesign : :: std :: os :: raw :: c_char , pub yechange : [:: std :: os :: raw :: c_char ; 8usize] , pub _yechange : :: std :: os :: raw :: c_char , pub yediff : [:: std :: os :: raw :: c_char ; 6usize] , pub _yediff : :: std :: os :: raw :: c_char , pub tmoffer : [:: std :: os :: raw :: c_char ; 12usize] , pub _tmoffer : :: std :: os :: raw :: c_char , pub tmbid : [:: std :: os :: raw :: c_char ; 12usize] , pub _tmbid : :: std :: os :: raw :: c_char , pub ho_status : [:: std :: os :: raw :: c_char ; 1usize] , pub _ho_status : :: std :: os :: raw :: c_char , pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , pub uplmtprice : [:: std :: os :: raw :: c_char ; 8usize] , pub _uplmtprice : :: std :: os :: raw :: c_char , pub dnlmtprice : [:: std :: os :: raw :: c_char ; 8usize] , pub _dnlmtprice : :: std :: os :: raw :: c_char , pub open : [:: std :: os :: raw :: c_char ; 8usize] , pub _open : :: std :: os :: raw :: c_char , pub high : [:: std :: os :: raw :: c_char ; 8usize] , pub _high : :: std :: os :: raw :: c_char , pub low : [:: std :: os :: raw :: c_char ; 8usize] , pub _low : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T1101OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < T1101OutBlock > () , 951usize , concat ! ("Size of: " , stringify ! (T1101OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T1101OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T1101OutBlock))) ; fn test_field_hname () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . hname) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (hname))) ; } test_field_hname () ; fn test_field__hname () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _hname) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_hname))) ; } test_field__hname () ; fn test_field_price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . price) as usize - ptr as usize } , 21usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (price))) ; } test_field_price () ; fn test_field__price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _price) as usize - ptr as usize } , 29usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_price))) ; } test_field__price () ; fn test_field_sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sign) as usize - ptr as usize } , 30usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (sign))) ; } test_field_sign () ; fn test_field__sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sign) as usize - ptr as usize } , 31usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_sign))) ; } test_field__sign () ; fn test_field_change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . change) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (change))) ; } test_field_change () ; fn test_field__change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _change) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_change))) ; } test_field__change () ; fn test_field_diff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . diff) as usize - ptr as usize } , 41usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (diff))) ; } test_field_diff () ; fn test_field__diff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _diff) as usize - ptr as usize } , 47usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_diff))) ; } test_field__diff () ; fn test_field_volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . volume) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (volume))) ; } test_field_volume () ; fn test_field__volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _volume) as usize - ptr as usize } , 60usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_volume))) ; } test_field__volume () ; fn test_field_jnilclose () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jnilclose) as usize - ptr as usize } , 61usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (jnilclose))) ; } test_field_jnilclose () ; fn test_field__jnilclose () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jnilclose) as usize - ptr as usize } , 69usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_jnilclose))) ; } test_field__jnilclose () ; fn test_field_offerho1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho1) as usize - ptr as usize } , 70usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (offerho1))) ; } test_field_offerho1 () ; fn test_field__offerho1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho1) as usize - ptr as usize } , 78usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_offerho1))) ; } test_field__offerho1 () ; fn test_field_bidho1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho1) as usize - ptr as usize } , 79usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (bidho1))) ; } test_field_bidho1 () ; fn test_field__bidho1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho1) as usize - ptr as usize } , 87usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_bidho1))) ; } test_field__bidho1 () ; fn test_field_offerrem1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem1) as usize - ptr as usize } , 88usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (offerrem1))) ; } test_field_offerrem1 () ; fn test_field__offerrem1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem1) as usize - ptr as usize } , 100usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_offerrem1))) ; } test_field__offerrem1 () ; fn test_field_bidrem1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem1) as usize - ptr as usize } , 101usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (bidrem1))) ; } test_field_bidrem1 () ; fn test_field__bidrem1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem1) as usize - ptr as usize } , 113usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_bidrem1))) ; } test_field__bidrem1 () ; fn test_field_preoffercha1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . preoffercha1) as usize - ptr as usize } , 114usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (preoffercha1))) ; } test_field_preoffercha1 () ; fn test_field__preoffercha1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _preoffercha1) as usize - ptr as usize } , 126usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_preoffercha1))) ; } test_field__preoffercha1 () ; fn test_field_prebidcha1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prebidcha1) as usize - ptr as usize } , 127usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (prebidcha1))) ; } test_field_prebidcha1 () ; fn test_field__prebidcha1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _prebidcha1) as usize - ptr as usize } , 139usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_prebidcha1))) ; } test_field__prebidcha1 () ; fn test_field_offerho2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho2) as usize - ptr as usize } , 140usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (offerho2))) ; } test_field_offerho2 () ; fn test_field__offerho2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho2) as usize - ptr as usize } , 148usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_offerho2))) ; } test_field__offerho2 () ; fn test_field_bidho2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho2) as usize - ptr as usize } , 149usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (bidho2))) ; } test_field_bidho2 () ; fn test_field__bidho2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho2) as usize - ptr as usize } , 157usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_bidho2))) ; } test_field__bidho2 () ; fn test_field_offerrem2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem2) as usize - ptr as usize } , 158usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (offerrem2))) ; } test_field_offerrem2 () ; fn test_field__offerrem2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem2) as usize - ptr as usize } , 170usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_offerrem2))) ; } test_field__offerrem2 () ; fn test_field_bidrem2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem2) as usize - ptr as usize } , 171usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (bidrem2))) ; } test_field_bidrem2 () ; fn test_field__bidrem2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem2) as usize - ptr as usize } , 183usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_bidrem2))) ; } test_field__bidrem2 () ; fn test_field_preoffercha2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . preoffercha2) as usize - ptr as usize } , 184usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (preoffercha2))) ; } test_field_preoffercha2 () ; fn test_field__preoffercha2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _preoffercha2) as usize - ptr as usize } , 196usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_preoffercha2))) ; } test_field__preoffercha2 () ; fn test_field_prebidcha2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prebidcha2) as usize - ptr as usize } , 197usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (prebidcha2))) ; } test_field_prebidcha2 () ; fn test_field__prebidcha2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _prebidcha2) as usize - ptr as usize } , 209usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_prebidcha2))) ; } test_field__prebidcha2 () ; fn test_field_offerho3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho3) as usize - ptr as usize } , 210usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (offerho3))) ; } test_field_offerho3 () ; fn test_field__offerho3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho3) as usize - ptr as usize } , 218usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_offerho3))) ; } test_field__offerho3 () ; fn test_field_bidho3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho3) as usize - ptr as usize } , 219usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (bidho3))) ; } test_field_bidho3 () ; fn test_field__bidho3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho3) as usize - ptr as usize } , 227usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_bidho3))) ; } test_field__bidho3 () ; fn test_field_offerrem3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem3) as usize - ptr as usize } , 228usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (offerrem3))) ; } test_field_offerrem3 () ; fn test_field__offerrem3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem3) as usize - ptr as usize } , 240usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_offerrem3))) ; } test_field__offerrem3 () ; fn test_field_bidrem3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem3) as usize - ptr as usize } , 241usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (bidrem3))) ; } test_field_bidrem3 () ; fn test_field__bidrem3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem3) as usize - ptr as usize } , 253usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_bidrem3))) ; } test_field__bidrem3 () ; fn test_field_preoffercha3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . preoffercha3) as usize - ptr as usize } , 254usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (preoffercha3))) ; } test_field_preoffercha3 () ; fn test_field__preoffercha3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _preoffercha3) as usize - ptr as usize } , 266usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_preoffercha3))) ; } test_field__preoffercha3 () ; fn test_field_prebidcha3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prebidcha3) as usize - ptr as usize } , 267usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (prebidcha3))) ; } test_field_prebidcha3 () ; fn test_field__prebidcha3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _prebidcha3) as usize - ptr as usize } , 279usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_prebidcha3))) ; } test_field__prebidcha3 () ; fn test_field_offerho4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho4) as usize - ptr as usize } , 280usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (offerho4))) ; } test_field_offerho4 () ; fn test_field__offerho4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho4) as usize - ptr as usize } , 288usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_offerho4))) ; } test_field__offerho4 () ; fn test_field_bidho4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho4) as usize - ptr as usize } , 289usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (bidho4))) ; } test_field_bidho4 () ; fn test_field__bidho4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho4) as usize - ptr as usize } , 297usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_bidho4))) ; } test_field__bidho4 () ; fn test_field_offerrem4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem4) as usize - ptr as usize } , 298usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (offerrem4))) ; } test_field_offerrem4 () ; fn test_field__offerrem4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem4) as usize - ptr as usize } , 310usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_offerrem4))) ; } test_field__offerrem4 () ; fn test_field_bidrem4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem4) as usize - ptr as usize } , 311usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (bidrem4))) ; } test_field_bidrem4 () ; fn test_field__bidrem4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem4) as usize - ptr as usize } , 323usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_bidrem4))) ; } test_field__bidrem4 () ; fn test_field_preoffercha4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . preoffercha4) as usize - ptr as usize } , 324usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (preoffercha4))) ; } test_field_preoffercha4 () ; fn test_field__preoffercha4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _preoffercha4) as usize - ptr as usize } , 336usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_preoffercha4))) ; } test_field__preoffercha4 () ; fn test_field_prebidcha4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prebidcha4) as usize - ptr as usize } , 337usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (prebidcha4))) ; } test_field_prebidcha4 () ; fn test_field__prebidcha4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _prebidcha4) as usize - ptr as usize } , 349usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_prebidcha4))) ; } test_field__prebidcha4 () ; fn test_field_offerho5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho5) as usize - ptr as usize } , 350usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (offerho5))) ; } test_field_offerho5 () ; fn test_field__offerho5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho5) as usize - ptr as usize } , 358usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_offerho5))) ; } test_field__offerho5 () ; fn test_field_bidho5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho5) as usize - ptr as usize } , 359usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (bidho5))) ; } test_field_bidho5 () ; fn test_field__bidho5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho5) as usize - ptr as usize } , 367usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_bidho5))) ; } test_field__bidho5 () ; fn test_field_offerrem5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem5) as usize - ptr as usize } , 368usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (offerrem5))) ; } test_field_offerrem5 () ; fn test_field__offerrem5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem5) as usize - ptr as usize } , 380usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_offerrem5))) ; } test_field__offerrem5 () ; fn test_field_bidrem5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem5) as usize - ptr as usize } , 381usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (bidrem5))) ; } test_field_bidrem5 () ; fn test_field__bidrem5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem5) as usize - ptr as usize } , 393usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_bidrem5))) ; } test_field__bidrem5 () ; fn test_field_preoffercha5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . preoffercha5) as usize - ptr as usize } , 394usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (preoffercha5))) ; } test_field_preoffercha5 () ; fn test_field__preoffercha5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _preoffercha5) as usize - ptr as usize } , 406usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_preoffercha5))) ; } test_field__preoffercha5 () ; fn test_field_prebidcha5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prebidcha5) as usize - ptr as usize } , 407usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (prebidcha5))) ; } test_field_prebidcha5 () ; fn test_field__prebidcha5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _prebidcha5) as usize - ptr as usize } , 419usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_prebidcha5))) ; } test_field__prebidcha5 () ; fn test_field_offerho6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho6) as usize - ptr as usize } , 420usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (offerho6))) ; } test_field_offerho6 () ; fn test_field__offerho6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho6) as usize - ptr as usize } , 428usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_offerho6))) ; } test_field__offerho6 () ; fn test_field_bidho6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho6) as usize - ptr as usize } , 429usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (bidho6))) ; } test_field_bidho6 () ; fn test_field__bidho6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho6) as usize - ptr as usize } , 437usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_bidho6))) ; } test_field__bidho6 () ; fn test_field_offerrem6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem6) as usize - ptr as usize } , 438usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (offerrem6))) ; } test_field_offerrem6 () ; fn test_field__offerrem6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem6) as usize - ptr as usize } , 450usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_offerrem6))) ; } test_field__offerrem6 () ; fn test_field_bidrem6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem6) as usize - ptr as usize } , 451usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (bidrem6))) ; } test_field_bidrem6 () ; fn test_field__bidrem6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem6) as usize - ptr as usize } , 463usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_bidrem6))) ; } test_field__bidrem6 () ; fn test_field_preoffercha6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . preoffercha6) as usize - ptr as usize } , 464usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (preoffercha6))) ; } test_field_preoffercha6 () ; fn test_field__preoffercha6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _preoffercha6) as usize - ptr as usize } , 476usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_preoffercha6))) ; } test_field__preoffercha6 () ; fn test_field_prebidcha6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prebidcha6) as usize - ptr as usize } , 477usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (prebidcha6))) ; } test_field_prebidcha6 () ; fn test_field__prebidcha6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _prebidcha6) as usize - ptr as usize } , 489usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_prebidcha6))) ; } test_field__prebidcha6 () ; fn test_field_offerho7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho7) as usize - ptr as usize } , 490usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (offerho7))) ; } test_field_offerho7 () ; fn test_field__offerho7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho7) as usize - ptr as usize } , 498usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_offerho7))) ; } test_field__offerho7 () ; fn test_field_bidho7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho7) as usize - ptr as usize } , 499usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (bidho7))) ; } test_field_bidho7 () ; fn test_field__bidho7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho7) as usize - ptr as usize } , 507usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_bidho7))) ; } test_field__bidho7 () ; fn test_field_offerrem7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem7) as usize - ptr as usize } , 508usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (offerrem7))) ; } test_field_offerrem7 () ; fn test_field__offerrem7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem7) as usize - ptr as usize } , 520usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_offerrem7))) ; } test_field__offerrem7 () ; fn test_field_bidrem7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem7) as usize - ptr as usize } , 521usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (bidrem7))) ; } test_field_bidrem7 () ; fn test_field__bidrem7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem7) as usize - ptr as usize } , 533usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_bidrem7))) ; } test_field__bidrem7 () ; fn test_field_preoffercha7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . preoffercha7) as usize - ptr as usize } , 534usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (preoffercha7))) ; } test_field_preoffercha7 () ; fn test_field__preoffercha7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _preoffercha7) as usize - ptr as usize } , 546usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_preoffercha7))) ; } test_field__preoffercha7 () ; fn test_field_prebidcha7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prebidcha7) as usize - ptr as usize } , 547usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (prebidcha7))) ; } test_field_prebidcha7 () ; fn test_field__prebidcha7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _prebidcha7) as usize - ptr as usize } , 559usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_prebidcha7))) ; } test_field__prebidcha7 () ; fn test_field_offerho8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho8) as usize - ptr as usize } , 560usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (offerho8))) ; } test_field_offerho8 () ; fn test_field__offerho8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho8) as usize - ptr as usize } , 568usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_offerho8))) ; } test_field__offerho8 () ; fn test_field_bidho8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho8) as usize - ptr as usize } , 569usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (bidho8))) ; } test_field_bidho8 () ; fn test_field__bidho8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho8) as usize - ptr as usize } , 577usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_bidho8))) ; } test_field__bidho8 () ; fn test_field_offerrem8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem8) as usize - ptr as usize } , 578usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (offerrem8))) ; } test_field_offerrem8 () ; fn test_field__offerrem8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem8) as usize - ptr as usize } , 590usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_offerrem8))) ; } test_field__offerrem8 () ; fn test_field_bidrem8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem8) as usize - ptr as usize } , 591usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (bidrem8))) ; } test_field_bidrem8 () ; fn test_field__bidrem8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem8) as usize - ptr as usize } , 603usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_bidrem8))) ; } test_field__bidrem8 () ; fn test_field_preoffercha8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . preoffercha8) as usize - ptr as usize } , 604usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (preoffercha8))) ; } test_field_preoffercha8 () ; fn test_field__preoffercha8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _preoffercha8) as usize - ptr as usize } , 616usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_preoffercha8))) ; } test_field__preoffercha8 () ; fn test_field_prebidcha8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prebidcha8) as usize - ptr as usize } , 617usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (prebidcha8))) ; } test_field_prebidcha8 () ; fn test_field__prebidcha8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _prebidcha8) as usize - ptr as usize } , 629usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_prebidcha8))) ; } test_field__prebidcha8 () ; fn test_field_offerho9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho9) as usize - ptr as usize } , 630usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (offerho9))) ; } test_field_offerho9 () ; fn test_field__offerho9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho9) as usize - ptr as usize } , 638usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_offerho9))) ; } test_field__offerho9 () ; fn test_field_bidho9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho9) as usize - ptr as usize } , 639usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (bidho9))) ; } test_field_bidho9 () ; fn test_field__bidho9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho9) as usize - ptr as usize } , 647usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_bidho9))) ; } test_field__bidho9 () ; fn test_field_offerrem9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem9) as usize - ptr as usize } , 648usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (offerrem9))) ; } test_field_offerrem9 () ; fn test_field__offerrem9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem9) as usize - ptr as usize } , 660usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_offerrem9))) ; } test_field__offerrem9 () ; fn test_field_bidrem9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem9) as usize - ptr as usize } , 661usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (bidrem9))) ; } test_field_bidrem9 () ; fn test_field__bidrem9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem9) as usize - ptr as usize } , 673usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_bidrem9))) ; } test_field__bidrem9 () ; fn test_field_preoffercha9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . preoffercha9) as usize - ptr as usize } , 674usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (preoffercha9))) ; } test_field_preoffercha9 () ; fn test_field__preoffercha9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _preoffercha9) as usize - ptr as usize } , 686usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_preoffercha9))) ; } test_field__preoffercha9 () ; fn test_field_prebidcha9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prebidcha9) as usize - ptr as usize } , 687usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (prebidcha9))) ; } test_field_prebidcha9 () ; fn test_field__prebidcha9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _prebidcha9) as usize - ptr as usize } , 699usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_prebidcha9))) ; } test_field__prebidcha9 () ; fn test_field_offerho10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho10) as usize - ptr as usize } , 700usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (offerho10))) ; } test_field_offerho10 () ; fn test_field__offerho10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho10) as usize - ptr as usize } , 708usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_offerho10))) ; } test_field__offerho10 () ; fn test_field_bidho10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho10) as usize - ptr as usize } , 709usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (bidho10))) ; } test_field_bidho10 () ; fn test_field__bidho10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho10) as usize - ptr as usize } , 717usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_bidho10))) ; } test_field__bidho10 () ; fn test_field_offerrem10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem10) as usize - ptr as usize } , 718usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (offerrem10))) ; } test_field_offerrem10 () ; fn test_field__offerrem10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem10) as usize - ptr as usize } , 730usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_offerrem10))) ; } test_field__offerrem10 () ; fn test_field_bidrem10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem10) as usize - ptr as usize } , 731usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (bidrem10))) ; } test_field_bidrem10 () ; fn test_field__bidrem10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem10) as usize - ptr as usize } , 743usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_bidrem10))) ; } test_field__bidrem10 () ; fn test_field_preoffercha10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . preoffercha10) as usize - ptr as usize } , 744usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (preoffercha10))) ; } test_field_preoffercha10 () ; fn test_field__preoffercha10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _preoffercha10) as usize - ptr as usize } , 756usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_preoffercha10))) ; } test_field__preoffercha10 () ; fn test_field_prebidcha10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prebidcha10) as usize - ptr as usize } , 757usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (prebidcha10))) ; } test_field_prebidcha10 () ; fn test_field__prebidcha10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _prebidcha10) as usize - ptr as usize } , 769usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_prebidcha10))) ; } test_field__prebidcha10 () ; fn test_field_offer () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offer) as usize - ptr as usize } , 770usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (offer))) ; } test_field_offer () ; fn test_field__offer () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offer) as usize - ptr as usize } , 782usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_offer))) ; } test_field__offer () ; fn test_field_bid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bid) as usize - ptr as usize } , 783usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (bid))) ; } test_field_bid () ; fn test_field__bid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bid) as usize - ptr as usize } , 795usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_bid))) ; } test_field__bid () ; fn test_field_preoffercha () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . preoffercha) as usize - ptr as usize } , 796usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (preoffercha))) ; } test_field_preoffercha () ; fn test_field__preoffercha () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _preoffercha) as usize - ptr as usize } , 808usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_preoffercha))) ; } test_field__preoffercha () ; fn test_field_prebidcha () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prebidcha) as usize - ptr as usize } , 809usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (prebidcha))) ; } test_field_prebidcha () ; fn test_field__prebidcha () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _prebidcha) as usize - ptr as usize } , 821usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_prebidcha))) ; } test_field__prebidcha () ; fn test_field_hotime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . hotime) as usize - ptr as usize } , 822usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (hotime))) ; } test_field_hotime () ; fn test_field__hotime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _hotime) as usize - ptr as usize } , 830usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_hotime))) ; } test_field__hotime () ; fn test_field_yeprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . yeprice) as usize - ptr as usize } , 831usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (yeprice))) ; } test_field_yeprice () ; fn test_field__yeprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _yeprice) as usize - ptr as usize } , 839usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_yeprice))) ; } test_field__yeprice () ; fn test_field_yevolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . yevolume) as usize - ptr as usize } , 840usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (yevolume))) ; } test_field_yevolume () ; fn test_field__yevolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _yevolume) as usize - ptr as usize } , 852usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_yevolume))) ; } test_field__yevolume () ; fn test_field_yesign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . yesign) as usize - ptr as usize } , 853usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (yesign))) ; } test_field_yesign () ; fn test_field__yesign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _yesign) as usize - ptr as usize } , 854usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_yesign))) ; } test_field__yesign () ; fn test_field_yechange () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . yechange) as usize - ptr as usize } , 855usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (yechange))) ; } test_field_yechange () ; fn test_field__yechange () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _yechange) as usize - ptr as usize } , 863usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_yechange))) ; } test_field__yechange () ; fn test_field_yediff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . yediff) as usize - ptr as usize } , 864usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (yediff))) ; } test_field_yediff () ; fn test_field__yediff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _yediff) as usize - ptr as usize } , 870usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_yediff))) ; } test_field__yediff () ; fn test_field_tmoffer () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tmoffer) as usize - ptr as usize } , 871usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (tmoffer))) ; } test_field_tmoffer () ; fn test_field__tmoffer () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _tmoffer) as usize - ptr as usize } , 883usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_tmoffer))) ; } test_field__tmoffer () ; fn test_field_tmbid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tmbid) as usize - ptr as usize } , 884usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (tmbid))) ; } test_field_tmbid () ; fn test_field__tmbid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _tmbid) as usize - ptr as usize } , 896usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_tmbid))) ; } test_field__tmbid () ; fn test_field_ho_status () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ho_status) as usize - ptr as usize } , 897usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (ho_status))) ; } test_field_ho_status () ; fn test_field__ho_status () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ho_status) as usize - ptr as usize } , 898usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_ho_status))) ; } test_field__ho_status () ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 899usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 905usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; fn test_field_uplmtprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . uplmtprice) as usize - ptr as usize } , 906usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (uplmtprice))) ; } test_field_uplmtprice () ; fn test_field__uplmtprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _uplmtprice) as usize - ptr as usize } , 914usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_uplmtprice))) ; } test_field__uplmtprice () ; fn test_field_dnlmtprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dnlmtprice) as usize - ptr as usize } , 915usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (dnlmtprice))) ; } test_field_dnlmtprice () ; fn test_field__dnlmtprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dnlmtprice) as usize - ptr as usize } , 923usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_dnlmtprice))) ; } test_field__dnlmtprice () ; fn test_field_open () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . open) as usize - ptr as usize } , 924usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (open))) ; } test_field_open () ; fn test_field__open () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _open) as usize - ptr as usize } , 932usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_open))) ; } test_field__open () ; fn test_field_high () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . high) as usize - ptr as usize } , 933usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (high))) ; } test_field_high () ; fn test_field__high () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _high) as usize - ptr as usize } , 941usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_high))) ; } test_field__high () ; fn test_field_low () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . low) as usize - ptr as usize } , 942usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (low))) ; } test_field_low () ; fn test_field__low () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1101OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _low) as usize - ptr as usize } , 950usize , concat ! ("Offset of field: " , stringify ! (T1101OutBlock) , "::" , stringify ! (_low))) ; } test_field__low () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T1102InBlock { pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T1102InBlock () { assert_eq ! (:: std :: mem :: size_of :: < T1102InBlock > () , 7usize , concat ! ("Size of: " , stringify ! (T1102InBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T1102InBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T1102InBlock))) ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T1102InBlock) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 6usize , concat ! ("Offset of field: " , stringify ! (T1102InBlock) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T1102OutBlock { pub hname : [:: std :: os :: raw :: c_char ; 20usize] , pub _hname : :: std :: os :: raw :: c_char , pub price : [:: std :: os :: raw :: c_char ; 8usize] , pub _price : :: std :: os :: raw :: c_char , pub sign : [:: std :: os :: raw :: c_char ; 1usize] , pub _sign : :: std :: os :: raw :: c_char , pub change : [:: std :: os :: raw :: c_char ; 8usize] , pub _change : :: std :: os :: raw :: c_char , pub diff : [:: std :: os :: raw :: c_char ; 6usize] , pub _diff : :: std :: os :: raw :: c_char , pub volume : [:: std :: os :: raw :: c_char ; 12usize] , pub _volume : :: std :: os :: raw :: c_char , pub recprice : [:: std :: os :: raw :: c_char ; 8usize] , pub _recprice : :: std :: os :: raw :: c_char , pub avg : [:: std :: os :: raw :: c_char ; 8usize] , pub _avg : :: std :: os :: raw :: c_char , pub uplmtprice : [:: std :: os :: raw :: c_char ; 8usize] , pub _uplmtprice : :: std :: os :: raw :: c_char , pub dnlmtprice : [:: std :: os :: raw :: c_char ; 8usize] , pub _dnlmtprice : :: std :: os :: raw :: c_char , pub jnilvolume : [:: std :: os :: raw :: c_char ; 12usize] , pub _jnilvolume : :: std :: os :: raw :: c_char , pub volumediff : [:: std :: os :: raw :: c_char ; 12usize] , pub _volumediff : :: std :: os :: raw :: c_char , pub open : [:: std :: os :: raw :: c_char ; 8usize] , pub _open : :: std :: os :: raw :: c_char , pub opentime : [:: std :: os :: raw :: c_char ; 6usize] , pub _opentime : :: std :: os :: raw :: c_char , pub high : [:: std :: os :: raw :: c_char ; 8usize] , pub _high : :: std :: os :: raw :: c_char , pub hightime : [:: std :: os :: raw :: c_char ; 6usize] , pub _hightime : :: std :: os :: raw :: c_char , pub low : [:: std :: os :: raw :: c_char ; 8usize] , pub _low : :: std :: os :: raw :: c_char , pub lowtime : [:: std :: os :: raw :: c_char ; 6usize] , pub _lowtime : :: std :: os :: raw :: c_char , pub high52w : [:: std :: os :: raw :: c_char ; 8usize] , pub _high52w : :: std :: os :: raw :: c_char , pub high52wdate : [:: std :: os :: raw :: c_char ; 8usize] , pub _high52wdate : :: std :: os :: raw :: c_char , pub low52w : [:: std :: os :: raw :: c_char ; 8usize] , pub _low52w : :: std :: os :: raw :: c_char , pub low52wdate : [:: std :: os :: raw :: c_char ; 8usize] , pub _low52wdate : :: std :: os :: raw :: c_char , pub exhratio : [:: std :: os :: raw :: c_char ; 6usize] , pub _exhratio : :: std :: os :: raw :: c_char , pub per : [:: std :: os :: raw :: c_char ; 6usize] , pub _per : :: std :: os :: raw :: c_char , pub pbrx : [:: std :: os :: raw :: c_char ; 6usize] , pub _pbrx : :: std :: os :: raw :: c_char , pub listing : [:: std :: os :: raw :: c_char ; 12usize] , pub _listing : :: std :: os :: raw :: c_char , pub jkrate : [:: std :: os :: raw :: c_char ; 8usize] , pub _jkrate : :: std :: os :: raw :: c_char , pub memedan : [:: std :: os :: raw :: c_char ; 5usize] , pub _memedan : :: std :: os :: raw :: c_char , pub offernocd1 : [:: std :: os :: raw :: c_char ; 3usize] , pub _offernocd1 : :: std :: os :: raw :: c_char , pub bidnocd1 : [:: std :: os :: raw :: c_char ; 3usize] , pub _bidnocd1 : :: std :: os :: raw :: c_char , pub offerno1 : [:: std :: os :: raw :: c_char ; 6usize] , pub _offerno1 : :: std :: os :: raw :: c_char , pub bidno1 : [:: std :: os :: raw :: c_char ; 6usize] , pub _bidno1 : :: std :: os :: raw :: c_char , pub dvol1 : [:: std :: os :: raw :: c_char ; 8usize] , pub _dvol1 : :: std :: os :: raw :: c_char , pub svol1 : [:: std :: os :: raw :: c_char ; 8usize] , pub _svol1 : :: std :: os :: raw :: c_char , pub dcha1 : [:: std :: os :: raw :: c_char ; 8usize] , pub _dcha1 : :: std :: os :: raw :: c_char , pub scha1 : [:: std :: os :: raw :: c_char ; 8usize] , pub _scha1 : :: std :: os :: raw :: c_char , pub ddiff1 : [:: std :: os :: raw :: c_char ; 6usize] , pub _ddiff1 : :: std :: os :: raw :: c_char , pub sdiff1 : [:: std :: os :: raw :: c_char ; 6usize] , pub _sdiff1 : :: std :: os :: raw :: c_char , pub offernocd2 : [:: std :: os :: raw :: c_char ; 3usize] , pub _offernocd2 : :: std :: os :: raw :: c_char , pub bidnocd2 : [:: std :: os :: raw :: c_char ; 3usize] , pub _bidnocd2 : :: std :: os :: raw :: c_char , pub offerno2 : [:: std :: os :: raw :: c_char ; 6usize] , pub _offerno2 : :: std :: os :: raw :: c_char , pub bidno2 : [:: std :: os :: raw :: c_char ; 6usize] , pub _bidno2 : :: std :: os :: raw :: c_char , pub dvol2 : [:: std :: os :: raw :: c_char ; 8usize] , pub _dvol2 : :: std :: os :: raw :: c_char , pub svol2 : [:: std :: os :: raw :: c_char ; 8usize] , pub _svol2 : :: std :: os :: raw :: c_char , pub dcha2 : [:: std :: os :: raw :: c_char ; 8usize] , pub _dcha2 : :: std :: os :: raw :: c_char , pub scha2 : [:: std :: os :: raw :: c_char ; 8usize] , pub _scha2 : :: std :: os :: raw :: c_char , pub ddiff2 : [:: std :: os :: raw :: c_char ; 6usize] , pub _ddiff2 : :: std :: os :: raw :: c_char , pub sdiff2 : [:: std :: os :: raw :: c_char ; 6usize] , pub _sdiff2 : :: std :: os :: raw :: c_char , pub offernocd3 : [:: std :: os :: raw :: c_char ; 3usize] , pub _offernocd3 : :: std :: os :: raw :: c_char , pub bidnocd3 : [:: std :: os :: raw :: c_char ; 3usize] , pub _bidnocd3 : :: std :: os :: raw :: c_char , pub offerno3 : [:: std :: os :: raw :: c_char ; 6usize] , pub _offerno3 : :: std :: os :: raw :: c_char , pub bidno3 : [:: std :: os :: raw :: c_char ; 6usize] , pub _bidno3 : :: std :: os :: raw :: c_char , pub dvol3 : [:: std :: os :: raw :: c_char ; 8usize] , pub _dvol3 : :: std :: os :: raw :: c_char , pub svol3 : [:: std :: os :: raw :: c_char ; 8usize] , pub _svol3 : :: std :: os :: raw :: c_char , pub dcha3 : [:: std :: os :: raw :: c_char ; 8usize] , pub _dcha3 : :: std :: os :: raw :: c_char , pub scha3 : [:: std :: os :: raw :: c_char ; 8usize] , pub _scha3 : :: std :: os :: raw :: c_char , pub ddiff3 : [:: std :: os :: raw :: c_char ; 6usize] , pub _ddiff3 : :: std :: os :: raw :: c_char , pub sdiff3 : [:: std :: os :: raw :: c_char ; 6usize] , pub _sdiff3 : :: std :: os :: raw :: c_char , pub offernocd4 : [:: std :: os :: raw :: c_char ; 3usize] , pub _offernocd4 : :: std :: os :: raw :: c_char , pub bidnocd4 : [:: std :: os :: raw :: c_char ; 3usize] , pub _bidnocd4 : :: std :: os :: raw :: c_char , pub offerno4 : [:: std :: os :: raw :: c_char ; 6usize] , pub _offerno4 : :: std :: os :: raw :: c_char , pub bidno4 : [:: std :: os :: raw :: c_char ; 6usize] , pub _bidno4 : :: std :: os :: raw :: c_char , pub dvol4 : [:: std :: os :: raw :: c_char ; 8usize] , pub _dvol4 : :: std :: os :: raw :: c_char , pub svol4 : [:: std :: os :: raw :: c_char ; 8usize] , pub _svol4 : :: std :: os :: raw :: c_char , pub dcha4 : [:: std :: os :: raw :: c_char ; 8usize] , pub _dcha4 : :: std :: os :: raw :: c_char , pub scha4 : [:: std :: os :: raw :: c_char ; 8usize] , pub _scha4 : :: std :: os :: raw :: c_char , pub ddiff4 : [:: std :: os :: raw :: c_char ; 6usize] , pub _ddiff4 : :: std :: os :: raw :: c_char , pub sdiff4 : [:: std :: os :: raw :: c_char ; 6usize] , pub _sdiff4 : :: std :: os :: raw :: c_char , pub offernocd5 : [:: std :: os :: raw :: c_char ; 3usize] , pub _offernocd5 : :: std :: os :: raw :: c_char , pub bidnocd5 : [:: std :: os :: raw :: c_char ; 3usize] , pub _bidnocd5 : :: std :: os :: raw :: c_char , pub offerno5 : [:: std :: os :: raw :: c_char ; 6usize] , pub _offerno5 : :: std :: os :: raw :: c_char , pub bidno5 : [:: std :: os :: raw :: c_char ; 6usize] , pub _bidno5 : :: std :: os :: raw :: c_char , pub dvol5 : [:: std :: os :: raw :: c_char ; 8usize] , pub _dvol5 : :: std :: os :: raw :: c_char , pub svol5 : [:: std :: os :: raw :: c_char ; 8usize] , pub _svol5 : :: std :: os :: raw :: c_char , pub dcha5 : [:: std :: os :: raw :: c_char ; 8usize] , pub _dcha5 : :: std :: os :: raw :: c_char , pub scha5 : [:: std :: os :: raw :: c_char ; 8usize] , pub _scha5 : :: std :: os :: raw :: c_char , pub ddiff5 : [:: std :: os :: raw :: c_char ; 6usize] , pub _ddiff5 : :: std :: os :: raw :: c_char , pub sdiff5 : [:: std :: os :: raw :: c_char ; 6usize] , pub _sdiff5 : :: std :: os :: raw :: c_char , pub fwdvl : [:: std :: os :: raw :: c_char ; 12usize] , pub _fwdvl : :: std :: os :: raw :: c_char , pub ftradmdcha : [:: std :: os :: raw :: c_char ; 12usize] , pub _ftradmdcha : :: std :: os :: raw :: c_char , pub ftradmddiff : [:: std :: os :: raw :: c_char ; 6usize] , pub _ftradmddiff : :: std :: os :: raw :: c_char , pub fwsvl : [:: std :: os :: raw :: c_char ; 12usize] , pub _fwsvl : :: std :: os :: raw :: c_char , pub ftradmscha : [:: std :: os :: raw :: c_char ; 12usize] , pub _ftradmscha : :: std :: os :: raw :: c_char , pub ftradmsdiff : [:: std :: os :: raw :: c_char ; 6usize] , pub _ftradmsdiff : :: std :: os :: raw :: c_char , pub vol : [:: std :: os :: raw :: c_char ; 6usize] , pub _vol : :: std :: os :: raw :: c_char , pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , pub value : [:: std :: os :: raw :: c_char ; 12usize] , pub _value : :: std :: os :: raw :: c_char , pub jvolume : [:: std :: os :: raw :: c_char ; 12usize] , pub _jvolume : :: std :: os :: raw :: c_char , pub highyear : [:: std :: os :: raw :: c_char ; 8usize] , pub _highyear : :: std :: os :: raw :: c_char , pub highyeardate : [:: std :: os :: raw :: c_char ; 8usize] , pub _highyeardate : :: std :: os :: raw :: c_char , pub lowyear : [:: std :: os :: raw :: c_char ; 8usize] , pub _lowyear : :: std :: os :: raw :: c_char , pub lowyeardate : [:: std :: os :: raw :: c_char ; 8usize] , pub _lowyeardate : :: std :: os :: raw :: c_char , pub target : [:: std :: os :: raw :: c_char ; 8usize] , pub _target : :: std :: os :: raw :: c_char , pub capital : [:: std :: os :: raw :: c_char ; 12usize] , pub _capital : :: std :: os :: raw :: c_char , pub abscnt : [:: std :: os :: raw :: c_char ; 12usize] , pub _abscnt : :: std :: os :: raw :: c_char , pub parprice : [:: std :: os :: raw :: c_char ; 8usize] , pub _parprice : :: std :: os :: raw :: c_char , pub gsmm : [:: std :: os :: raw :: c_char ; 2usize] , pub _gsmm : :: std :: os :: raw :: c_char , pub subprice : [:: std :: os :: raw :: c_char ; 8usize] , pub _subprice : :: std :: os :: raw :: c_char , pub total : [:: std :: os :: raw :: c_char ; 12usize] , pub _total : :: std :: os :: raw :: c_char , pub listdate : [:: std :: os :: raw :: c_char ; 8usize] , pub _listdate : :: std :: os :: raw :: c_char , pub name : [:: std :: os :: raw :: c_char ; 10usize] , pub _name : :: std :: os :: raw :: c_char , pub bfsales : [:: std :: os :: raw :: c_char ; 12usize] , pub _bfsales : :: std :: os :: raw :: c_char , pub bfoperatingincome : [:: std :: os :: raw :: c_char ; 12usize] , pub _bfoperatingincome : :: std :: os :: raw :: c_char , pub bfordinaryincome : [:: std :: os :: raw :: c_char ; 12usize] , pub _bfordinaryincome : :: std :: os :: raw :: c_char , pub bfnetincome : [:: std :: os :: raw :: c_char ; 12usize] , pub _bfnetincome : :: std :: os :: raw :: c_char , pub bfeps : [:: std :: os :: raw :: c_char ; 13usize] , pub _bfeps : :: std :: os :: raw :: c_char , pub name2 : [:: std :: os :: raw :: c_char ; 10usize] , pub _name2 : :: std :: os :: raw :: c_char , pub bfsales2 : [:: std :: os :: raw :: c_char ; 12usize] , pub _bfsales2 : :: std :: os :: raw :: c_char , pub bfoperatingincome2 : [:: std :: os :: raw :: c_char ; 12usize] , pub _bfoperatingincome2 : :: std :: os :: raw :: c_char , pub bfordinaryincome2 : [:: std :: os :: raw :: c_char ; 12usize] , pub _bfordinaryincome2 : :: std :: os :: raw :: c_char , pub bfnetincome2 : [:: std :: os :: raw :: c_char ; 12usize] , pub _bfnetincome2 : :: std :: os :: raw :: c_char , pub bfeps2 : [:: std :: os :: raw :: c_char ; 13usize] , pub _bfeps2 : :: std :: os :: raw :: c_char , pub salert : [:: std :: os :: raw :: c_char ; 7usize] , pub _salert : :: std :: os :: raw :: c_char , pub opert : [:: std :: os :: raw :: c_char ; 7usize] , pub _opert : :: std :: os :: raw :: c_char , pub ordrt : [:: std :: os :: raw :: c_char ; 7usize] , pub _ordrt : :: std :: os :: raw :: c_char , pub netrt : [:: std :: os :: raw :: c_char ; 7usize] , pub _netrt : :: std :: os :: raw :: c_char , pub epsrt : [:: std :: os :: raw :: c_char ; 7usize] , pub _epsrt : :: std :: os :: raw :: c_char , pub info1 : [:: std :: os :: raw :: c_char ; 10usize] , pub _info1 : :: std :: os :: raw :: c_char , pub info2 : [:: std :: os :: raw :: c_char ; 10usize] , pub _info2 : :: std :: os :: raw :: c_char , pub info3 : [:: std :: os :: raw :: c_char ; 10usize] , pub _info3 : :: std :: os :: raw :: c_char , pub info4 : [:: std :: os :: raw :: c_char ; 12usize] , pub _info4 : :: std :: os :: raw :: c_char , pub janginfo : [:: std :: os :: raw :: c_char ; 10usize] , pub _janginfo : :: std :: os :: raw :: c_char , pub t_per : [:: std :: os :: raw :: c_char ; 6usize] , pub _t_per : :: std :: os :: raw :: c_char , pub tonghwa : [:: std :: os :: raw :: c_char ; 3usize] , pub _tonghwa : :: std :: os :: raw :: c_char , pub dval1 : [:: std :: os :: raw :: c_char ; 18usize] , pub _dval1 : :: std :: os :: raw :: c_char , pub sval1 : [:: std :: os :: raw :: c_char ; 18usize] , pub _sval1 : :: std :: os :: raw :: c_char , pub dval2 : [:: std :: os :: raw :: c_char ; 18usize] , pub _dval2 : :: std :: os :: raw :: c_char , pub sval2 : [:: std :: os :: raw :: c_char ; 18usize] , pub _sval2 : :: std :: os :: raw :: c_char , pub dval3 : [:: std :: os :: raw :: c_char ; 18usize] , pub _dval3 : :: std :: os :: raw :: c_char , pub sval3 : [:: std :: os :: raw :: c_char ; 18usize] , pub _sval3 : :: std :: os :: raw :: c_char , pub dval4 : [:: std :: os :: raw :: c_char ; 18usize] , pub _dval4 : :: std :: os :: raw :: c_char , pub sval4 : [:: std :: os :: raw :: c_char ; 18usize] , pub _sval4 : :: std :: os :: raw :: c_char , pub dval5 : [:: std :: os :: raw :: c_char ; 18usize] , pub _dval5 : :: std :: os :: raw :: c_char , pub sval5 : [:: std :: os :: raw :: c_char ; 18usize] , pub _sval5 : :: std :: os :: raw :: c_char , pub davg1 : [:: std :: os :: raw :: c_char ; 8usize] , pub _davg1 : :: std :: os :: raw :: c_char , pub savg1 : [:: std :: os :: raw :: c_char ; 8usize] , pub _savg1 : :: std :: os :: raw :: c_char , pub davg2 : [:: std :: os :: raw :: c_char ; 8usize] , pub _davg2 : :: std :: os :: raw :: c_char , pub savg2 : [:: std :: os :: raw :: c_char ; 8usize] , pub _savg2 : :: std :: os :: raw :: c_char , pub davg3 : [:: std :: os :: raw :: c_char ; 8usize] , pub _davg3 : :: std :: os :: raw :: c_char , pub savg3 : [:: std :: os :: raw :: c_char ; 8usize] , pub _savg3 : :: std :: os :: raw :: c_char , pub davg4 : [:: std :: os :: raw :: c_char ; 8usize] , pub _davg4 : :: std :: os :: raw :: c_char , pub savg4 : [:: std :: os :: raw :: c_char ; 8usize] , pub _savg4 : :: std :: os :: raw :: c_char , pub davg5 : [:: std :: os :: raw :: c_char ; 8usize] , pub _davg5 : :: std :: os :: raw :: c_char , pub savg5 : [:: std :: os :: raw :: c_char ; 8usize] , pub _savg5 : :: std :: os :: raw :: c_char , pub ftradmdval : [:: std :: os :: raw :: c_char ; 18usize] , pub _ftradmdval : :: std :: os :: raw :: c_char , pub ftradmsval : [:: std :: os :: raw :: c_char ; 18usize] , pub _ftradmsval : :: std :: os :: raw :: c_char , pub ftradmdavg : [:: std :: os :: raw :: c_char ; 8usize] , pub _ftradmdavg : :: std :: os :: raw :: c_char , pub ftradmsavg : [:: std :: os :: raw :: c_char ; 8usize] , pub _ftradmsavg : :: std :: os :: raw :: c_char , pub info5 : [:: std :: os :: raw :: c_char ; 8usize] , pub _info5 : :: std :: os :: raw :: c_char , pub spac_gubun : [:: std :: os :: raw :: c_char ; 1usize] , pub _spac_gubun : :: std :: os :: raw :: c_char , pub issueprice : [:: std :: os :: raw :: c_char ; 8usize] , pub _issueprice : :: std :: os :: raw :: c_char , pub alloc_gubun : [:: std :: os :: raw :: c_char ; 1usize] , pub _alloc_gubun : :: std :: os :: raw :: c_char , pub alloc_text : [:: std :: os :: raw :: c_char ; 8usize] , pub _alloc_text : :: std :: os :: raw :: c_char , pub shterm_text : [:: std :: os :: raw :: c_char ; 10usize] , pub _shterm_text : :: std :: os :: raw :: c_char , pub svi_uplmtprice : [:: std :: os :: raw :: c_char ; 8usize] , pub _svi_uplmtprice : :: std :: os :: raw :: c_char , pub svi_dnlmtprice : [:: std :: os :: raw :: c_char ; 8usize] , pub _svi_dnlmtprice : :: std :: os :: raw :: c_char , pub low_lqdt_gu : [:: std :: os :: raw :: c_char ; 1usize] , pub _low_lqdt_gu : :: std :: os :: raw :: c_char , pub abnormal_rise_gu : [:: std :: os :: raw :: c_char ; 1usize] , pub _abnormal_rise_gu : :: std :: os :: raw :: c_char , pub lend_text : [:: std :: os :: raw :: c_char ; 8usize] , pub _lend_text : :: std :: os :: raw :: c_char , pub ty_text : [:: std :: os :: raw :: c_char ; 8usize] , pub _ty_text : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T1102OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < T1102OutBlock > () , 1516usize , concat ! ("Size of: " , stringify ! (T1102OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T1102OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T1102OutBlock))) ; fn test_field_hname () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . hname) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (hname))) ; } test_field_hname () ; fn test_field__hname () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _hname) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_hname))) ; } test_field__hname () ; fn test_field_price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . price) as usize - ptr as usize } , 21usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (price))) ; } test_field_price () ; fn test_field__price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _price) as usize - ptr as usize } , 29usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_price))) ; } test_field__price () ; fn test_field_sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sign) as usize - ptr as usize } , 30usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (sign))) ; } test_field_sign () ; fn test_field__sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sign) as usize - ptr as usize } , 31usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_sign))) ; } test_field__sign () ; fn test_field_change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . change) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (change))) ; } test_field_change () ; fn test_field__change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _change) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_change))) ; } test_field__change () ; fn test_field_diff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . diff) as usize - ptr as usize } , 41usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (diff))) ; } test_field_diff () ; fn test_field__diff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _diff) as usize - ptr as usize } , 47usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_diff))) ; } test_field__diff () ; fn test_field_volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . volume) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (volume))) ; } test_field_volume () ; fn test_field__volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _volume) as usize - ptr as usize } , 60usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_volume))) ; } test_field__volume () ; fn test_field_recprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . recprice) as usize - ptr as usize } , 61usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (recprice))) ; } test_field_recprice () ; fn test_field__recprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _recprice) as usize - ptr as usize } , 69usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_recprice))) ; } test_field__recprice () ; fn test_field_avg () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . avg) as usize - ptr as usize } , 70usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (avg))) ; } test_field_avg () ; fn test_field__avg () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _avg) as usize - ptr as usize } , 78usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_avg))) ; } test_field__avg () ; fn test_field_uplmtprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . uplmtprice) as usize - ptr as usize } , 79usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (uplmtprice))) ; } test_field_uplmtprice () ; fn test_field__uplmtprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _uplmtprice) as usize - ptr as usize } , 87usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_uplmtprice))) ; } test_field__uplmtprice () ; fn test_field_dnlmtprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dnlmtprice) as usize - ptr as usize } , 88usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (dnlmtprice))) ; } test_field_dnlmtprice () ; fn test_field__dnlmtprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dnlmtprice) as usize - ptr as usize } , 96usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_dnlmtprice))) ; } test_field__dnlmtprice () ; fn test_field_jnilvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jnilvolume) as usize - ptr as usize } , 97usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (jnilvolume))) ; } test_field_jnilvolume () ; fn test_field__jnilvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jnilvolume) as usize - ptr as usize } , 109usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_jnilvolume))) ; } test_field__jnilvolume () ; fn test_field_volumediff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . volumediff) as usize - ptr as usize } , 110usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (volumediff))) ; } test_field_volumediff () ; fn test_field__volumediff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _volumediff) as usize - ptr as usize } , 122usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_volumediff))) ; } test_field__volumediff () ; fn test_field_open () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . open) as usize - ptr as usize } , 123usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (open))) ; } test_field_open () ; fn test_field__open () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _open) as usize - ptr as usize } , 131usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_open))) ; } test_field__open () ; fn test_field_opentime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . opentime) as usize - ptr as usize } , 132usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (opentime))) ; } test_field_opentime () ; fn test_field__opentime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _opentime) as usize - ptr as usize } , 138usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_opentime))) ; } test_field__opentime () ; fn test_field_high () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . high) as usize - ptr as usize } , 139usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (high))) ; } test_field_high () ; fn test_field__high () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _high) as usize - ptr as usize } , 147usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_high))) ; } test_field__high () ; fn test_field_hightime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . hightime) as usize - ptr as usize } , 148usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (hightime))) ; } test_field_hightime () ; fn test_field__hightime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _hightime) as usize - ptr as usize } , 154usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_hightime))) ; } test_field__hightime () ; fn test_field_low () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . low) as usize - ptr as usize } , 155usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (low))) ; } test_field_low () ; fn test_field__low () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _low) as usize - ptr as usize } , 163usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_low))) ; } test_field__low () ; fn test_field_lowtime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lowtime) as usize - ptr as usize } , 164usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (lowtime))) ; } test_field_lowtime () ; fn test_field__lowtime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lowtime) as usize - ptr as usize } , 170usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_lowtime))) ; } test_field__lowtime () ; fn test_field_high52w () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . high52w) as usize - ptr as usize } , 171usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (high52w))) ; } test_field_high52w () ; fn test_field__high52w () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _high52w) as usize - ptr as usize } , 179usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_high52w))) ; } test_field__high52w () ; fn test_field_high52wdate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . high52wdate) as usize - ptr as usize } , 180usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (high52wdate))) ; } test_field_high52wdate () ; fn test_field__high52wdate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _high52wdate) as usize - ptr as usize } , 188usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_high52wdate))) ; } test_field__high52wdate () ; fn test_field_low52w () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . low52w) as usize - ptr as usize } , 189usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (low52w))) ; } test_field_low52w () ; fn test_field__low52w () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _low52w) as usize - ptr as usize } , 197usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_low52w))) ; } test_field__low52w () ; fn test_field_low52wdate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . low52wdate) as usize - ptr as usize } , 198usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (low52wdate))) ; } test_field_low52wdate () ; fn test_field__low52wdate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _low52wdate) as usize - ptr as usize } , 206usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_low52wdate))) ; } test_field__low52wdate () ; fn test_field_exhratio () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . exhratio) as usize - ptr as usize } , 207usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (exhratio))) ; } test_field_exhratio () ; fn test_field__exhratio () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _exhratio) as usize - ptr as usize } , 213usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_exhratio))) ; } test_field__exhratio () ; fn test_field_per () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . per) as usize - ptr as usize } , 214usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (per))) ; } test_field_per () ; fn test_field__per () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _per) as usize - ptr as usize } , 220usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_per))) ; } test_field__per () ; fn test_field_pbrx () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . pbrx) as usize - ptr as usize } , 221usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (pbrx))) ; } test_field_pbrx () ; fn test_field__pbrx () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _pbrx) as usize - ptr as usize } , 227usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_pbrx))) ; } test_field__pbrx () ; fn test_field_listing () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . listing) as usize - ptr as usize } , 228usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (listing))) ; } test_field_listing () ; fn test_field__listing () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _listing) as usize - ptr as usize } , 240usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_listing))) ; } test_field__listing () ; fn test_field_jkrate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jkrate) as usize - ptr as usize } , 241usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (jkrate))) ; } test_field_jkrate () ; fn test_field__jkrate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jkrate) as usize - ptr as usize } , 249usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_jkrate))) ; } test_field__jkrate () ; fn test_field_memedan () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . memedan) as usize - ptr as usize } , 250usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (memedan))) ; } test_field_memedan () ; fn test_field__memedan () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _memedan) as usize - ptr as usize } , 255usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_memedan))) ; } test_field__memedan () ; fn test_field_offernocd1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offernocd1) as usize - ptr as usize } , 256usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (offernocd1))) ; } test_field_offernocd1 () ; fn test_field__offernocd1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offernocd1) as usize - ptr as usize } , 259usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_offernocd1))) ; } test_field__offernocd1 () ; fn test_field_bidnocd1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidnocd1) as usize - ptr as usize } , 260usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (bidnocd1))) ; } test_field_bidnocd1 () ; fn test_field__bidnocd1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidnocd1) as usize - ptr as usize } , 263usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_bidnocd1))) ; } test_field__bidnocd1 () ; fn test_field_offerno1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerno1) as usize - ptr as usize } , 264usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (offerno1))) ; } test_field_offerno1 () ; fn test_field__offerno1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerno1) as usize - ptr as usize } , 270usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_offerno1))) ; } test_field__offerno1 () ; fn test_field_bidno1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidno1) as usize - ptr as usize } , 271usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (bidno1))) ; } test_field_bidno1 () ; fn test_field__bidno1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidno1) as usize - ptr as usize } , 277usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_bidno1))) ; } test_field__bidno1 () ; fn test_field_dvol1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dvol1) as usize - ptr as usize } , 278usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (dvol1))) ; } test_field_dvol1 () ; fn test_field__dvol1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dvol1) as usize - ptr as usize } , 286usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_dvol1))) ; } test_field__dvol1 () ; fn test_field_svol1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . svol1) as usize - ptr as usize } , 287usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (svol1))) ; } test_field_svol1 () ; fn test_field__svol1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _svol1) as usize - ptr as usize } , 295usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_svol1))) ; } test_field__svol1 () ; fn test_field_dcha1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dcha1) as usize - ptr as usize } , 296usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (dcha1))) ; } test_field_dcha1 () ; fn test_field__dcha1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dcha1) as usize - ptr as usize } , 304usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_dcha1))) ; } test_field__dcha1 () ; fn test_field_scha1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . scha1) as usize - ptr as usize } , 305usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (scha1))) ; } test_field_scha1 () ; fn test_field__scha1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _scha1) as usize - ptr as usize } , 313usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_scha1))) ; } test_field__scha1 () ; fn test_field_ddiff1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ddiff1) as usize - ptr as usize } , 314usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (ddiff1))) ; } test_field_ddiff1 () ; fn test_field__ddiff1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ddiff1) as usize - ptr as usize } , 320usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_ddiff1))) ; } test_field__ddiff1 () ; fn test_field_sdiff1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sdiff1) as usize - ptr as usize } , 321usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (sdiff1))) ; } test_field_sdiff1 () ; fn test_field__sdiff1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sdiff1) as usize - ptr as usize } , 327usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_sdiff1))) ; } test_field__sdiff1 () ; fn test_field_offernocd2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offernocd2) as usize - ptr as usize } , 328usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (offernocd2))) ; } test_field_offernocd2 () ; fn test_field__offernocd2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offernocd2) as usize - ptr as usize } , 331usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_offernocd2))) ; } test_field__offernocd2 () ; fn test_field_bidnocd2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidnocd2) as usize - ptr as usize } , 332usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (bidnocd2))) ; } test_field_bidnocd2 () ; fn test_field__bidnocd2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidnocd2) as usize - ptr as usize } , 335usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_bidnocd2))) ; } test_field__bidnocd2 () ; fn test_field_offerno2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerno2) as usize - ptr as usize } , 336usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (offerno2))) ; } test_field_offerno2 () ; fn test_field__offerno2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerno2) as usize - ptr as usize } , 342usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_offerno2))) ; } test_field__offerno2 () ; fn test_field_bidno2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidno2) as usize - ptr as usize } , 343usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (bidno2))) ; } test_field_bidno2 () ; fn test_field__bidno2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidno2) as usize - ptr as usize } , 349usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_bidno2))) ; } test_field__bidno2 () ; fn test_field_dvol2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dvol2) as usize - ptr as usize } , 350usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (dvol2))) ; } test_field_dvol2 () ; fn test_field__dvol2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dvol2) as usize - ptr as usize } , 358usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_dvol2))) ; } test_field__dvol2 () ; fn test_field_svol2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . svol2) as usize - ptr as usize } , 359usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (svol2))) ; } test_field_svol2 () ; fn test_field__svol2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _svol2) as usize - ptr as usize } , 367usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_svol2))) ; } test_field__svol2 () ; fn test_field_dcha2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dcha2) as usize - ptr as usize } , 368usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (dcha2))) ; } test_field_dcha2 () ; fn test_field__dcha2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dcha2) as usize - ptr as usize } , 376usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_dcha2))) ; } test_field__dcha2 () ; fn test_field_scha2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . scha2) as usize - ptr as usize } , 377usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (scha2))) ; } test_field_scha2 () ; fn test_field__scha2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _scha2) as usize - ptr as usize } , 385usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_scha2))) ; } test_field__scha2 () ; fn test_field_ddiff2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ddiff2) as usize - ptr as usize } , 386usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (ddiff2))) ; } test_field_ddiff2 () ; fn test_field__ddiff2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ddiff2) as usize - ptr as usize } , 392usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_ddiff2))) ; } test_field__ddiff2 () ; fn test_field_sdiff2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sdiff2) as usize - ptr as usize } , 393usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (sdiff2))) ; } test_field_sdiff2 () ; fn test_field__sdiff2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sdiff2) as usize - ptr as usize } , 399usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_sdiff2))) ; } test_field__sdiff2 () ; fn test_field_offernocd3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offernocd3) as usize - ptr as usize } , 400usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (offernocd3))) ; } test_field_offernocd3 () ; fn test_field__offernocd3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offernocd3) as usize - ptr as usize } , 403usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_offernocd3))) ; } test_field__offernocd3 () ; fn test_field_bidnocd3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidnocd3) as usize - ptr as usize } , 404usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (bidnocd3))) ; } test_field_bidnocd3 () ; fn test_field__bidnocd3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidnocd3) as usize - ptr as usize } , 407usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_bidnocd3))) ; } test_field__bidnocd3 () ; fn test_field_offerno3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerno3) as usize - ptr as usize } , 408usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (offerno3))) ; } test_field_offerno3 () ; fn test_field__offerno3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerno3) as usize - ptr as usize } , 414usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_offerno3))) ; } test_field__offerno3 () ; fn test_field_bidno3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidno3) as usize - ptr as usize } , 415usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (bidno3))) ; } test_field_bidno3 () ; fn test_field__bidno3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidno3) as usize - ptr as usize } , 421usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_bidno3))) ; } test_field__bidno3 () ; fn test_field_dvol3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dvol3) as usize - ptr as usize } , 422usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (dvol3))) ; } test_field_dvol3 () ; fn test_field__dvol3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dvol3) as usize - ptr as usize } , 430usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_dvol3))) ; } test_field__dvol3 () ; fn test_field_svol3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . svol3) as usize - ptr as usize } , 431usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (svol3))) ; } test_field_svol3 () ; fn test_field__svol3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _svol3) as usize - ptr as usize } , 439usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_svol3))) ; } test_field__svol3 () ; fn test_field_dcha3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dcha3) as usize - ptr as usize } , 440usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (dcha3))) ; } test_field_dcha3 () ; fn test_field__dcha3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dcha3) as usize - ptr as usize } , 448usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_dcha3))) ; } test_field__dcha3 () ; fn test_field_scha3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . scha3) as usize - ptr as usize } , 449usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (scha3))) ; } test_field_scha3 () ; fn test_field__scha3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _scha3) as usize - ptr as usize } , 457usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_scha3))) ; } test_field__scha3 () ; fn test_field_ddiff3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ddiff3) as usize - ptr as usize } , 458usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (ddiff3))) ; } test_field_ddiff3 () ; fn test_field__ddiff3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ddiff3) as usize - ptr as usize } , 464usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_ddiff3))) ; } test_field__ddiff3 () ; fn test_field_sdiff3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sdiff3) as usize - ptr as usize } , 465usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (sdiff3))) ; } test_field_sdiff3 () ; fn test_field__sdiff3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sdiff3) as usize - ptr as usize } , 471usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_sdiff3))) ; } test_field__sdiff3 () ; fn test_field_offernocd4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offernocd4) as usize - ptr as usize } , 472usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (offernocd4))) ; } test_field_offernocd4 () ; fn test_field__offernocd4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offernocd4) as usize - ptr as usize } , 475usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_offernocd4))) ; } test_field__offernocd4 () ; fn test_field_bidnocd4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidnocd4) as usize - ptr as usize } , 476usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (bidnocd4))) ; } test_field_bidnocd4 () ; fn test_field__bidnocd4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidnocd4) as usize - ptr as usize } , 479usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_bidnocd4))) ; } test_field__bidnocd4 () ; fn test_field_offerno4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerno4) as usize - ptr as usize } , 480usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (offerno4))) ; } test_field_offerno4 () ; fn test_field__offerno4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerno4) as usize - ptr as usize } , 486usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_offerno4))) ; } test_field__offerno4 () ; fn test_field_bidno4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidno4) as usize - ptr as usize } , 487usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (bidno4))) ; } test_field_bidno4 () ; fn test_field__bidno4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidno4) as usize - ptr as usize } , 493usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_bidno4))) ; } test_field__bidno4 () ; fn test_field_dvol4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dvol4) as usize - ptr as usize } , 494usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (dvol4))) ; } test_field_dvol4 () ; fn test_field__dvol4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dvol4) as usize - ptr as usize } , 502usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_dvol4))) ; } test_field__dvol4 () ; fn test_field_svol4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . svol4) as usize - ptr as usize } , 503usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (svol4))) ; } test_field_svol4 () ; fn test_field__svol4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _svol4) as usize - ptr as usize } , 511usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_svol4))) ; } test_field__svol4 () ; fn test_field_dcha4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dcha4) as usize - ptr as usize } , 512usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (dcha4))) ; } test_field_dcha4 () ; fn test_field__dcha4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dcha4) as usize - ptr as usize } , 520usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_dcha4))) ; } test_field__dcha4 () ; fn test_field_scha4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . scha4) as usize - ptr as usize } , 521usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (scha4))) ; } test_field_scha4 () ; fn test_field__scha4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _scha4) as usize - ptr as usize } , 529usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_scha4))) ; } test_field__scha4 () ; fn test_field_ddiff4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ddiff4) as usize - ptr as usize } , 530usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (ddiff4))) ; } test_field_ddiff4 () ; fn test_field__ddiff4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ddiff4) as usize - ptr as usize } , 536usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_ddiff4))) ; } test_field__ddiff4 () ; fn test_field_sdiff4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sdiff4) as usize - ptr as usize } , 537usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (sdiff4))) ; } test_field_sdiff4 () ; fn test_field__sdiff4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sdiff4) as usize - ptr as usize } , 543usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_sdiff4))) ; } test_field__sdiff4 () ; fn test_field_offernocd5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offernocd5) as usize - ptr as usize } , 544usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (offernocd5))) ; } test_field_offernocd5 () ; fn test_field__offernocd5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offernocd5) as usize - ptr as usize } , 547usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_offernocd5))) ; } test_field__offernocd5 () ; fn test_field_bidnocd5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidnocd5) as usize - ptr as usize } , 548usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (bidnocd5))) ; } test_field_bidnocd5 () ; fn test_field__bidnocd5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidnocd5) as usize - ptr as usize } , 551usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_bidnocd5))) ; } test_field__bidnocd5 () ; fn test_field_offerno5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerno5) as usize - ptr as usize } , 552usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (offerno5))) ; } test_field_offerno5 () ; fn test_field__offerno5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerno5) as usize - ptr as usize } , 558usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_offerno5))) ; } test_field__offerno5 () ; fn test_field_bidno5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidno5) as usize - ptr as usize } , 559usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (bidno5))) ; } test_field_bidno5 () ; fn test_field__bidno5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidno5) as usize - ptr as usize } , 565usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_bidno5))) ; } test_field__bidno5 () ; fn test_field_dvol5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dvol5) as usize - ptr as usize } , 566usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (dvol5))) ; } test_field_dvol5 () ; fn test_field__dvol5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dvol5) as usize - ptr as usize } , 574usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_dvol5))) ; } test_field__dvol5 () ; fn test_field_svol5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . svol5) as usize - ptr as usize } , 575usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (svol5))) ; } test_field_svol5 () ; fn test_field__svol5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _svol5) as usize - ptr as usize } , 583usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_svol5))) ; } test_field__svol5 () ; fn test_field_dcha5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dcha5) as usize - ptr as usize } , 584usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (dcha5))) ; } test_field_dcha5 () ; fn test_field__dcha5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dcha5) as usize - ptr as usize } , 592usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_dcha5))) ; } test_field__dcha5 () ; fn test_field_scha5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . scha5) as usize - ptr as usize } , 593usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (scha5))) ; } test_field_scha5 () ; fn test_field__scha5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _scha5) as usize - ptr as usize } , 601usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_scha5))) ; } test_field__scha5 () ; fn test_field_ddiff5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ddiff5) as usize - ptr as usize } , 602usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (ddiff5))) ; } test_field_ddiff5 () ; fn test_field__ddiff5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ddiff5) as usize - ptr as usize } , 608usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_ddiff5))) ; } test_field__ddiff5 () ; fn test_field_sdiff5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sdiff5) as usize - ptr as usize } , 609usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (sdiff5))) ; } test_field_sdiff5 () ; fn test_field__sdiff5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sdiff5) as usize - ptr as usize } , 615usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_sdiff5))) ; } test_field__sdiff5 () ; fn test_field_fwdvl () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . fwdvl) as usize - ptr as usize } , 616usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (fwdvl))) ; } test_field_fwdvl () ; fn test_field__fwdvl () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _fwdvl) as usize - ptr as usize } , 628usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_fwdvl))) ; } test_field__fwdvl () ; fn test_field_ftradmdcha () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ftradmdcha) as usize - ptr as usize } , 629usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (ftradmdcha))) ; } test_field_ftradmdcha () ; fn test_field__ftradmdcha () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ftradmdcha) as usize - ptr as usize } , 641usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_ftradmdcha))) ; } test_field__ftradmdcha () ; fn test_field_ftradmddiff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ftradmddiff) as usize - ptr as usize } , 642usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (ftradmddiff))) ; } test_field_ftradmddiff () ; fn test_field__ftradmddiff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ftradmddiff) as usize - ptr as usize } , 648usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_ftradmddiff))) ; } test_field__ftradmddiff () ; fn test_field_fwsvl () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . fwsvl) as usize - ptr as usize } , 649usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (fwsvl))) ; } test_field_fwsvl () ; fn test_field__fwsvl () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _fwsvl) as usize - ptr as usize } , 661usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_fwsvl))) ; } test_field__fwsvl () ; fn test_field_ftradmscha () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ftradmscha) as usize - ptr as usize } , 662usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (ftradmscha))) ; } test_field_ftradmscha () ; fn test_field__ftradmscha () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ftradmscha) as usize - ptr as usize } , 674usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_ftradmscha))) ; } test_field__ftradmscha () ; fn test_field_ftradmsdiff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ftradmsdiff) as usize - ptr as usize } , 675usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (ftradmsdiff))) ; } test_field_ftradmsdiff () ; fn test_field__ftradmsdiff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ftradmsdiff) as usize - ptr as usize } , 681usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_ftradmsdiff))) ; } test_field__ftradmsdiff () ; fn test_field_vol () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . vol) as usize - ptr as usize } , 682usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (vol))) ; } test_field_vol () ; fn test_field__vol () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _vol) as usize - ptr as usize } , 688usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_vol))) ; } test_field__vol () ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 689usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 695usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; fn test_field_value () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . value) as usize - ptr as usize } , 696usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (value))) ; } test_field_value () ; fn test_field__value () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _value) as usize - ptr as usize } , 708usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_value))) ; } test_field__value () ; fn test_field_jvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jvolume) as usize - ptr as usize } , 709usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (jvolume))) ; } test_field_jvolume () ; fn test_field__jvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jvolume) as usize - ptr as usize } , 721usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_jvolume))) ; } test_field__jvolume () ; fn test_field_highyear () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . highyear) as usize - ptr as usize } , 722usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (highyear))) ; } test_field_highyear () ; fn test_field__highyear () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _highyear) as usize - ptr as usize } , 730usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_highyear))) ; } test_field__highyear () ; fn test_field_highyeardate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . highyeardate) as usize - ptr as usize } , 731usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (highyeardate))) ; } test_field_highyeardate () ; fn test_field__highyeardate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _highyeardate) as usize - ptr as usize } , 739usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_highyeardate))) ; } test_field__highyeardate () ; fn test_field_lowyear () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lowyear) as usize - ptr as usize } , 740usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (lowyear))) ; } test_field_lowyear () ; fn test_field__lowyear () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lowyear) as usize - ptr as usize } , 748usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_lowyear))) ; } test_field__lowyear () ; fn test_field_lowyeardate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lowyeardate) as usize - ptr as usize } , 749usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (lowyeardate))) ; } test_field_lowyeardate () ; fn test_field__lowyeardate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lowyeardate) as usize - ptr as usize } , 757usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_lowyeardate))) ; } test_field__lowyeardate () ; fn test_field_target () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . target) as usize - ptr as usize } , 758usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (target))) ; } test_field_target () ; fn test_field__target () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _target) as usize - ptr as usize } , 766usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_target))) ; } test_field__target () ; fn test_field_capital () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . capital) as usize - ptr as usize } , 767usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (capital))) ; } test_field_capital () ; fn test_field__capital () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _capital) as usize - ptr as usize } , 779usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_capital))) ; } test_field__capital () ; fn test_field_abscnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . abscnt) as usize - ptr as usize } , 780usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (abscnt))) ; } test_field_abscnt () ; fn test_field__abscnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _abscnt) as usize - ptr as usize } , 792usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_abscnt))) ; } test_field__abscnt () ; fn test_field_parprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . parprice) as usize - ptr as usize } , 793usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (parprice))) ; } test_field_parprice () ; fn test_field__parprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _parprice) as usize - ptr as usize } , 801usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_parprice))) ; } test_field__parprice () ; fn test_field_gsmm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . gsmm) as usize - ptr as usize } , 802usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (gsmm))) ; } test_field_gsmm () ; fn test_field__gsmm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _gsmm) as usize - ptr as usize } , 804usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_gsmm))) ; } test_field__gsmm () ; fn test_field_subprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . subprice) as usize - ptr as usize } , 805usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (subprice))) ; } test_field_subprice () ; fn test_field__subprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _subprice) as usize - ptr as usize } , 813usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_subprice))) ; } test_field__subprice () ; fn test_field_total () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . total) as usize - ptr as usize } , 814usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (total))) ; } test_field_total () ; fn test_field__total () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _total) as usize - ptr as usize } , 826usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_total))) ; } test_field__total () ; fn test_field_listdate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . listdate) as usize - ptr as usize } , 827usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (listdate))) ; } test_field_listdate () ; fn test_field__listdate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _listdate) as usize - ptr as usize } , 835usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_listdate))) ; } test_field__listdate () ; fn test_field_name () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . name) as usize - ptr as usize } , 836usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (name))) ; } test_field_name () ; fn test_field__name () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _name) as usize - ptr as usize } , 846usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_name))) ; } test_field__name () ; fn test_field_bfsales () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bfsales) as usize - ptr as usize } , 847usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (bfsales))) ; } test_field_bfsales () ; fn test_field__bfsales () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bfsales) as usize - ptr as usize } , 859usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_bfsales))) ; } test_field__bfsales () ; fn test_field_bfoperatingincome () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bfoperatingincome) as usize - ptr as usize } , 860usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (bfoperatingincome))) ; } test_field_bfoperatingincome () ; fn test_field__bfoperatingincome () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bfoperatingincome) as usize - ptr as usize } , 872usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_bfoperatingincome))) ; } test_field__bfoperatingincome () ; fn test_field_bfordinaryincome () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bfordinaryincome) as usize - ptr as usize } , 873usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (bfordinaryincome))) ; } test_field_bfordinaryincome () ; fn test_field__bfordinaryincome () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bfordinaryincome) as usize - ptr as usize } , 885usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_bfordinaryincome))) ; } test_field__bfordinaryincome () ; fn test_field_bfnetincome () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bfnetincome) as usize - ptr as usize } , 886usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (bfnetincome))) ; } test_field_bfnetincome () ; fn test_field__bfnetincome () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bfnetincome) as usize - ptr as usize } , 898usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_bfnetincome))) ; } test_field__bfnetincome () ; fn test_field_bfeps () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bfeps) as usize - ptr as usize } , 899usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (bfeps))) ; } test_field_bfeps () ; fn test_field__bfeps () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bfeps) as usize - ptr as usize } , 912usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_bfeps))) ; } test_field__bfeps () ; fn test_field_name2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . name2) as usize - ptr as usize } , 913usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (name2))) ; } test_field_name2 () ; fn test_field__name2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _name2) as usize - ptr as usize } , 923usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_name2))) ; } test_field__name2 () ; fn test_field_bfsales2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bfsales2) as usize - ptr as usize } , 924usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (bfsales2))) ; } test_field_bfsales2 () ; fn test_field__bfsales2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bfsales2) as usize - ptr as usize } , 936usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_bfsales2))) ; } test_field__bfsales2 () ; fn test_field_bfoperatingincome2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bfoperatingincome2) as usize - ptr as usize } , 937usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (bfoperatingincome2))) ; } test_field_bfoperatingincome2 () ; fn test_field__bfoperatingincome2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bfoperatingincome2) as usize - ptr as usize } , 949usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_bfoperatingincome2))) ; } test_field__bfoperatingincome2 () ; fn test_field_bfordinaryincome2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bfordinaryincome2) as usize - ptr as usize } , 950usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (bfordinaryincome2))) ; } test_field_bfordinaryincome2 () ; fn test_field__bfordinaryincome2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bfordinaryincome2) as usize - ptr as usize } , 962usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_bfordinaryincome2))) ; } test_field__bfordinaryincome2 () ; fn test_field_bfnetincome2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bfnetincome2) as usize - ptr as usize } , 963usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (bfnetincome2))) ; } test_field_bfnetincome2 () ; fn test_field__bfnetincome2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bfnetincome2) as usize - ptr as usize } , 975usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_bfnetincome2))) ; } test_field__bfnetincome2 () ; fn test_field_bfeps2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bfeps2) as usize - ptr as usize } , 976usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (bfeps2))) ; } test_field_bfeps2 () ; fn test_field__bfeps2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bfeps2) as usize - ptr as usize } , 989usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_bfeps2))) ; } test_field__bfeps2 () ; fn test_field_salert () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . salert) as usize - ptr as usize } , 990usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (salert))) ; } test_field_salert () ; fn test_field__salert () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _salert) as usize - ptr as usize } , 997usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_salert))) ; } test_field__salert () ; fn test_field_opert () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . opert) as usize - ptr as usize } , 998usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (opert))) ; } test_field_opert () ; fn test_field__opert () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _opert) as usize - ptr as usize } , 1005usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_opert))) ; } test_field__opert () ; fn test_field_ordrt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordrt) as usize - ptr as usize } , 1006usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (ordrt))) ; } test_field_ordrt () ; fn test_field__ordrt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ordrt) as usize - ptr as usize } , 1013usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_ordrt))) ; } test_field__ordrt () ; fn test_field_netrt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . netrt) as usize - ptr as usize } , 1014usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (netrt))) ; } test_field_netrt () ; fn test_field__netrt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _netrt) as usize - ptr as usize } , 1021usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_netrt))) ; } test_field__netrt () ; fn test_field_epsrt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . epsrt) as usize - ptr as usize } , 1022usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (epsrt))) ; } test_field_epsrt () ; fn test_field__epsrt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _epsrt) as usize - ptr as usize } , 1029usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_epsrt))) ; } test_field__epsrt () ; fn test_field_info1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . info1) as usize - ptr as usize } , 1030usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (info1))) ; } test_field_info1 () ; fn test_field__info1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _info1) as usize - ptr as usize } , 1040usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_info1))) ; } test_field__info1 () ; fn test_field_info2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . info2) as usize - ptr as usize } , 1041usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (info2))) ; } test_field_info2 () ; fn test_field__info2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _info2) as usize - ptr as usize } , 1051usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_info2))) ; } test_field__info2 () ; fn test_field_info3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . info3) as usize - ptr as usize } , 1052usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (info3))) ; } test_field_info3 () ; fn test_field__info3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _info3) as usize - ptr as usize } , 1062usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_info3))) ; } test_field__info3 () ; fn test_field_info4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . info4) as usize - ptr as usize } , 1063usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (info4))) ; } test_field_info4 () ; fn test_field__info4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _info4) as usize - ptr as usize } , 1075usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_info4))) ; } test_field__info4 () ; fn test_field_janginfo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . janginfo) as usize - ptr as usize } , 1076usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (janginfo))) ; } test_field_janginfo () ; fn test_field__janginfo () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _janginfo) as usize - ptr as usize } , 1086usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_janginfo))) ; } test_field__janginfo () ; fn test_field_t_per () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . t_per) as usize - ptr as usize } , 1087usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (t_per))) ; } test_field_t_per () ; fn test_field__t_per () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _t_per) as usize - ptr as usize } , 1093usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_t_per))) ; } test_field__t_per () ; fn test_field_tonghwa () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tonghwa) as usize - ptr as usize } , 1094usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (tonghwa))) ; } test_field_tonghwa () ; fn test_field__tonghwa () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _tonghwa) as usize - ptr as usize } , 1097usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_tonghwa))) ; } test_field__tonghwa () ; fn test_field_dval1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dval1) as usize - ptr as usize } , 1098usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (dval1))) ; } test_field_dval1 () ; fn test_field__dval1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dval1) as usize - ptr as usize } , 1116usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_dval1))) ; } test_field__dval1 () ; fn test_field_sval1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sval1) as usize - ptr as usize } , 1117usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (sval1))) ; } test_field_sval1 () ; fn test_field__sval1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sval1) as usize - ptr as usize } , 1135usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_sval1))) ; } test_field__sval1 () ; fn test_field_dval2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dval2) as usize - ptr as usize } , 1136usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (dval2))) ; } test_field_dval2 () ; fn test_field__dval2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dval2) as usize - ptr as usize } , 1154usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_dval2))) ; } test_field__dval2 () ; fn test_field_sval2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sval2) as usize - ptr as usize } , 1155usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (sval2))) ; } test_field_sval2 () ; fn test_field__sval2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sval2) as usize - ptr as usize } , 1173usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_sval2))) ; } test_field__sval2 () ; fn test_field_dval3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dval3) as usize - ptr as usize } , 1174usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (dval3))) ; } test_field_dval3 () ; fn test_field__dval3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dval3) as usize - ptr as usize } , 1192usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_dval3))) ; } test_field__dval3 () ; fn test_field_sval3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sval3) as usize - ptr as usize } , 1193usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (sval3))) ; } test_field_sval3 () ; fn test_field__sval3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sval3) as usize - ptr as usize } , 1211usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_sval3))) ; } test_field__sval3 () ; fn test_field_dval4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dval4) as usize - ptr as usize } , 1212usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (dval4))) ; } test_field_dval4 () ; fn test_field__dval4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dval4) as usize - ptr as usize } , 1230usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_dval4))) ; } test_field__dval4 () ; fn test_field_sval4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sval4) as usize - ptr as usize } , 1231usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (sval4))) ; } test_field_sval4 () ; fn test_field__sval4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sval4) as usize - ptr as usize } , 1249usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_sval4))) ; } test_field__sval4 () ; fn test_field_dval5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dval5) as usize - ptr as usize } , 1250usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (dval5))) ; } test_field_dval5 () ; fn test_field__dval5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dval5) as usize - ptr as usize } , 1268usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_dval5))) ; } test_field__dval5 () ; fn test_field_sval5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sval5) as usize - ptr as usize } , 1269usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (sval5))) ; } test_field_sval5 () ; fn test_field__sval5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sval5) as usize - ptr as usize } , 1287usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_sval5))) ; } test_field__sval5 () ; fn test_field_davg1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . davg1) as usize - ptr as usize } , 1288usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (davg1))) ; } test_field_davg1 () ; fn test_field__davg1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _davg1) as usize - ptr as usize } , 1296usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_davg1))) ; } test_field__davg1 () ; fn test_field_savg1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . savg1) as usize - ptr as usize } , 1297usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (savg1))) ; } test_field_savg1 () ; fn test_field__savg1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _savg1) as usize - ptr as usize } , 1305usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_savg1))) ; } test_field__savg1 () ; fn test_field_davg2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . davg2) as usize - ptr as usize } , 1306usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (davg2))) ; } test_field_davg2 () ; fn test_field__davg2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _davg2) as usize - ptr as usize } , 1314usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_davg2))) ; } test_field__davg2 () ; fn test_field_savg2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . savg2) as usize - ptr as usize } , 1315usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (savg2))) ; } test_field_savg2 () ; fn test_field__savg2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _savg2) as usize - ptr as usize } , 1323usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_savg2))) ; } test_field__savg2 () ; fn test_field_davg3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . davg3) as usize - ptr as usize } , 1324usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (davg3))) ; } test_field_davg3 () ; fn test_field__davg3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _davg3) as usize - ptr as usize } , 1332usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_davg3))) ; } test_field__davg3 () ; fn test_field_savg3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . savg3) as usize - ptr as usize } , 1333usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (savg3))) ; } test_field_savg3 () ; fn test_field__savg3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _savg3) as usize - ptr as usize } , 1341usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_savg3))) ; } test_field__savg3 () ; fn test_field_davg4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . davg4) as usize - ptr as usize } , 1342usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (davg4))) ; } test_field_davg4 () ; fn test_field__davg4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _davg4) as usize - ptr as usize } , 1350usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_davg4))) ; } test_field__davg4 () ; fn test_field_savg4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . savg4) as usize - ptr as usize } , 1351usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (savg4))) ; } test_field_savg4 () ; fn test_field__savg4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _savg4) as usize - ptr as usize } , 1359usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_savg4))) ; } test_field__savg4 () ; fn test_field_davg5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . davg5) as usize - ptr as usize } , 1360usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (davg5))) ; } test_field_davg5 () ; fn test_field__davg5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _davg5) as usize - ptr as usize } , 1368usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_davg5))) ; } test_field__davg5 () ; fn test_field_savg5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . savg5) as usize - ptr as usize } , 1369usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (savg5))) ; } test_field_savg5 () ; fn test_field__savg5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _savg5) as usize - ptr as usize } , 1377usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_savg5))) ; } test_field__savg5 () ; fn test_field_ftradmdval () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ftradmdval) as usize - ptr as usize } , 1378usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (ftradmdval))) ; } test_field_ftradmdval () ; fn test_field__ftradmdval () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ftradmdval) as usize - ptr as usize } , 1396usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_ftradmdval))) ; } test_field__ftradmdval () ; fn test_field_ftradmsval () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ftradmsval) as usize - ptr as usize } , 1397usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (ftradmsval))) ; } test_field_ftradmsval () ; fn test_field__ftradmsval () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ftradmsval) as usize - ptr as usize } , 1415usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_ftradmsval))) ; } test_field__ftradmsval () ; fn test_field_ftradmdavg () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ftradmdavg) as usize - ptr as usize } , 1416usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (ftradmdavg))) ; } test_field_ftradmdavg () ; fn test_field__ftradmdavg () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ftradmdavg) as usize - ptr as usize } , 1424usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_ftradmdavg))) ; } test_field__ftradmdavg () ; fn test_field_ftradmsavg () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ftradmsavg) as usize - ptr as usize } , 1425usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (ftradmsavg))) ; } test_field_ftradmsavg () ; fn test_field__ftradmsavg () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ftradmsavg) as usize - ptr as usize } , 1433usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_ftradmsavg))) ; } test_field__ftradmsavg () ; fn test_field_info5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . info5) as usize - ptr as usize } , 1434usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (info5))) ; } test_field_info5 () ; fn test_field__info5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _info5) as usize - ptr as usize } , 1442usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_info5))) ; } test_field__info5 () ; fn test_field_spac_gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . spac_gubun) as usize - ptr as usize } , 1443usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (spac_gubun))) ; } test_field_spac_gubun () ; fn test_field__spac_gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _spac_gubun) as usize - ptr as usize } , 1444usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_spac_gubun))) ; } test_field__spac_gubun () ; fn test_field_issueprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . issueprice) as usize - ptr as usize } , 1445usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (issueprice))) ; } test_field_issueprice () ; fn test_field__issueprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _issueprice) as usize - ptr as usize } , 1453usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_issueprice))) ; } test_field__issueprice () ; fn test_field_alloc_gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . alloc_gubun) as usize - ptr as usize } , 1454usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (alloc_gubun))) ; } test_field_alloc_gubun () ; fn test_field__alloc_gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _alloc_gubun) as usize - ptr as usize } , 1455usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_alloc_gubun))) ; } test_field__alloc_gubun () ; fn test_field_alloc_text () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . alloc_text) as usize - ptr as usize } , 1456usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (alloc_text))) ; } test_field_alloc_text () ; fn test_field__alloc_text () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _alloc_text) as usize - ptr as usize } , 1464usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_alloc_text))) ; } test_field__alloc_text () ; fn test_field_shterm_text () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shterm_text) as usize - ptr as usize } , 1465usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (shterm_text))) ; } test_field_shterm_text () ; fn test_field__shterm_text () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shterm_text) as usize - ptr as usize } , 1475usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_shterm_text))) ; } test_field__shterm_text () ; fn test_field_svi_uplmtprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . svi_uplmtprice) as usize - ptr as usize } , 1476usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (svi_uplmtprice))) ; } test_field_svi_uplmtprice () ; fn test_field__svi_uplmtprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _svi_uplmtprice) as usize - ptr as usize } , 1484usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_svi_uplmtprice))) ; } test_field__svi_uplmtprice () ; fn test_field_svi_dnlmtprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . svi_dnlmtprice) as usize - ptr as usize } , 1485usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (svi_dnlmtprice))) ; } test_field_svi_dnlmtprice () ; fn test_field__svi_dnlmtprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _svi_dnlmtprice) as usize - ptr as usize } , 1493usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_svi_dnlmtprice))) ; } test_field__svi_dnlmtprice () ; fn test_field_low_lqdt_gu () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . low_lqdt_gu) as usize - ptr as usize } , 1494usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (low_lqdt_gu))) ; } test_field_low_lqdt_gu () ; fn test_field__low_lqdt_gu () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _low_lqdt_gu) as usize - ptr as usize } , 1495usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_low_lqdt_gu))) ; } test_field__low_lqdt_gu () ; fn test_field_abnormal_rise_gu () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . abnormal_rise_gu) as usize - ptr as usize } , 1496usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (abnormal_rise_gu))) ; } test_field_abnormal_rise_gu () ; fn test_field__abnormal_rise_gu () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _abnormal_rise_gu) as usize - ptr as usize } , 1497usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_abnormal_rise_gu))) ; } test_field__abnormal_rise_gu () ; fn test_field_lend_text () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lend_text) as usize - ptr as usize } , 1498usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (lend_text))) ; } test_field_lend_text () ; fn test_field__lend_text () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lend_text) as usize - ptr as usize } , 1506usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_lend_text))) ; } test_field__lend_text () ; fn test_field_ty_text () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ty_text) as usize - ptr as usize } , 1507usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (ty_text))) ; } test_field_ty_text () ; fn test_field__ty_text () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1102OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ty_text) as usize - ptr as usize } , 1515usize , concat ! ("Offset of field: " , stringify ! (T1102OutBlock) , "::" , stringify ! (_ty_text))) ; } test_field__ty_text () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T1301InBlock { pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , pub cvolume : [:: std :: os :: raw :: c_char ; 12usize] , pub _cvolume : :: std :: os :: raw :: c_char , pub starttime : [:: std :: os :: raw :: c_char ; 4usize] , pub _starttime : :: std :: os :: raw :: c_char , pub endtime : [:: std :: os :: raw :: c_char ; 4usize] , pub _endtime : :: std :: os :: raw :: c_char , pub cts_time : [:: std :: os :: raw :: c_char ; 10usize] , pub _cts_time : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T1301InBlock () { assert_eq ! (:: std :: mem :: size_of :: < T1301InBlock > () , 41usize , concat ! ("Size of: " , stringify ! (T1301InBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T1301InBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T1301InBlock))) ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T1301InBlock) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 6usize , concat ! ("Offset of field: " , stringify ! (T1301InBlock) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; fn test_field_cvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cvolume) as usize - ptr as usize } , 7usize , concat ! ("Offset of field: " , stringify ! (T1301InBlock) , "::" , stringify ! (cvolume))) ; } test_field_cvolume () ; fn test_field__cvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cvolume) as usize - ptr as usize } , 19usize , concat ! ("Offset of field: " , stringify ! (T1301InBlock) , "::" , stringify ! (_cvolume))) ; } test_field__cvolume () ; fn test_field_starttime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . starttime) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (T1301InBlock) , "::" , stringify ! (starttime))) ; } test_field_starttime () ; fn test_field__starttime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _starttime) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (T1301InBlock) , "::" , stringify ! (_starttime))) ; } test_field__starttime () ; fn test_field_endtime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . endtime) as usize - ptr as usize } , 25usize , concat ! ("Offset of field: " , stringify ! (T1301InBlock) , "::" , stringify ! (endtime))) ; } test_field_endtime () ; fn test_field__endtime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _endtime) as usize - ptr as usize } , 29usize , concat ! ("Offset of field: " , stringify ! (T1301InBlock) , "::" , stringify ! (_endtime))) ; } test_field__endtime () ; fn test_field_cts_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_time) as usize - ptr as usize } , 30usize , concat ! ("Offset of field: " , stringify ! (T1301InBlock) , "::" , stringify ! (cts_time))) ; } test_field_cts_time () ; fn test_field__cts_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cts_time) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (T1301InBlock) , "::" , stringify ! (_cts_time))) ; } test_field__cts_time () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T1301OutBlock { pub cts_time : [:: std :: os :: raw :: c_char ; 10usize] , pub _cts_time : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T1301OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < T1301OutBlock > () , 11usize , concat ! ("Size of: " , stringify ! (T1301OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T1301OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T1301OutBlock))) ; fn test_field_cts_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_time) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T1301OutBlock) , "::" , stringify ! (cts_time))) ; } test_field_cts_time () ; fn test_field__cts_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cts_time) as usize - ptr as usize } , 10usize , concat ! ("Offset of field: " , stringify ! (T1301OutBlock) , "::" , stringify ! (_cts_time))) ; } test_field__cts_time () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T1301OutBlock1 { pub chetime : [:: std :: os :: raw :: c_char ; 10usize] , pub _chetime : :: std :: os :: raw :: c_char , pub price : [:: std :: os :: raw :: c_char ; 8usize] , pub _price : :: std :: os :: raw :: c_char , pub sign : [:: std :: os :: raw :: c_char ; 1usize] , pub _sign : :: std :: os :: raw :: c_char , pub change : [:: std :: os :: raw :: c_char ; 8usize] , pub _change : :: std :: os :: raw :: c_char , pub diff : [:: std :: os :: raw :: c_char ; 6usize] , pub _diff : :: std :: os :: raw :: c_char , pub cvolume : [:: std :: os :: raw :: c_char ; 12usize] , pub _cvolume : :: std :: os :: raw :: c_char , pub chdegree : [:: std :: os :: raw :: c_char ; 8usize] , pub _chdegree : :: std :: os :: raw :: c_char , pub volume : [:: std :: os :: raw :: c_char ; 12usize] , pub _volume : :: std :: os :: raw :: c_char , pub mdvolume : [:: std :: os :: raw :: c_char ; 12usize] , pub _mdvolume : :: std :: os :: raw :: c_char , pub mdchecnt : [:: std :: os :: raw :: c_char ; 8usize] , pub _mdchecnt : :: std :: os :: raw :: c_char , pub msvolume : [:: std :: os :: raw :: c_char ; 12usize] , pub _msvolume : :: std :: os :: raw :: c_char , pub mschecnt : [:: std :: os :: raw :: c_char ; 8usize] , pub _mschecnt : :: std :: os :: raw :: c_char , pub revolume : [:: std :: os :: raw :: c_char ; 12usize] , pub _revolume : :: std :: os :: raw :: c_char , pub rechecnt : [:: std :: os :: raw :: c_char ; 8usize] , pub _rechecnt : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T1301OutBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < T1301OutBlock1 > () , 139usize , concat ! ("Size of: " , stringify ! (T1301OutBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < T1301OutBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (T1301OutBlock1))) ; fn test_field_chetime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . chetime) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T1301OutBlock1) , "::" , stringify ! (chetime))) ; } test_field_chetime () ; fn test_field__chetime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _chetime) as usize - ptr as usize } , 10usize , concat ! ("Offset of field: " , stringify ! (T1301OutBlock1) , "::" , stringify ! (_chetime))) ; } test_field__chetime () ; fn test_field_price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . price) as usize - ptr as usize } , 11usize , concat ! ("Offset of field: " , stringify ! (T1301OutBlock1) , "::" , stringify ! (price))) ; } test_field_price () ; fn test_field__price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _price) as usize - ptr as usize } , 19usize , concat ! ("Offset of field: " , stringify ! (T1301OutBlock1) , "::" , stringify ! (_price))) ; } test_field__price () ; fn test_field_sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sign) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (T1301OutBlock1) , "::" , stringify ! (sign))) ; } test_field_sign () ; fn test_field__sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sign) as usize - ptr as usize } , 21usize , concat ! ("Offset of field: " , stringify ! (T1301OutBlock1) , "::" , stringify ! (_sign))) ; } test_field__sign () ; fn test_field_change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . change) as usize - ptr as usize } , 22usize , concat ! ("Offset of field: " , stringify ! (T1301OutBlock1) , "::" , stringify ! (change))) ; } test_field_change () ; fn test_field__change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _change) as usize - ptr as usize } , 30usize , concat ! ("Offset of field: " , stringify ! (T1301OutBlock1) , "::" , stringify ! (_change))) ; } test_field__change () ; fn test_field_diff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . diff) as usize - ptr as usize } , 31usize , concat ! ("Offset of field: " , stringify ! (T1301OutBlock1) , "::" , stringify ! (diff))) ; } test_field_diff () ; fn test_field__diff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _diff) as usize - ptr as usize } , 37usize , concat ! ("Offset of field: " , stringify ! (T1301OutBlock1) , "::" , stringify ! (_diff))) ; } test_field__diff () ; fn test_field_cvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cvolume) as usize - ptr as usize } , 38usize , concat ! ("Offset of field: " , stringify ! (T1301OutBlock1) , "::" , stringify ! (cvolume))) ; } test_field_cvolume () ; fn test_field__cvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cvolume) as usize - ptr as usize } , 50usize , concat ! ("Offset of field: " , stringify ! (T1301OutBlock1) , "::" , stringify ! (_cvolume))) ; } test_field__cvolume () ; fn test_field_chdegree () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . chdegree) as usize - ptr as usize } , 51usize , concat ! ("Offset of field: " , stringify ! (T1301OutBlock1) , "::" , stringify ! (chdegree))) ; } test_field_chdegree () ; fn test_field__chdegree () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _chdegree) as usize - ptr as usize } , 59usize , concat ! ("Offset of field: " , stringify ! (T1301OutBlock1) , "::" , stringify ! (_chdegree))) ; } test_field__chdegree () ; fn test_field_volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . volume) as usize - ptr as usize } , 60usize , concat ! ("Offset of field: " , stringify ! (T1301OutBlock1) , "::" , stringify ! (volume))) ; } test_field_volume () ; fn test_field__volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _volume) as usize - ptr as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (T1301OutBlock1) , "::" , stringify ! (_volume))) ; } test_field__volume () ; fn test_field_mdvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mdvolume) as usize - ptr as usize } , 73usize , concat ! ("Offset of field: " , stringify ! (T1301OutBlock1) , "::" , stringify ! (mdvolume))) ; } test_field_mdvolume () ; fn test_field__mdvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _mdvolume) as usize - ptr as usize } , 85usize , concat ! ("Offset of field: " , stringify ! (T1301OutBlock1) , "::" , stringify ! (_mdvolume))) ; } test_field__mdvolume () ; fn test_field_mdchecnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mdchecnt) as usize - ptr as usize } , 86usize , concat ! ("Offset of field: " , stringify ! (T1301OutBlock1) , "::" , stringify ! (mdchecnt))) ; } test_field_mdchecnt () ; fn test_field__mdchecnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _mdchecnt) as usize - ptr as usize } , 94usize , concat ! ("Offset of field: " , stringify ! (T1301OutBlock1) , "::" , stringify ! (_mdchecnt))) ; } test_field__mdchecnt () ; fn test_field_msvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . msvolume) as usize - ptr as usize } , 95usize , concat ! ("Offset of field: " , stringify ! (T1301OutBlock1) , "::" , stringify ! (msvolume))) ; } test_field_msvolume () ; fn test_field__msvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _msvolume) as usize - ptr as usize } , 107usize , concat ! ("Offset of field: " , stringify ! (T1301OutBlock1) , "::" , stringify ! (_msvolume))) ; } test_field__msvolume () ; fn test_field_mschecnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mschecnt) as usize - ptr as usize } , 108usize , concat ! ("Offset of field: " , stringify ! (T1301OutBlock1) , "::" , stringify ! (mschecnt))) ; } test_field_mschecnt () ; fn test_field__mschecnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _mschecnt) as usize - ptr as usize } , 116usize , concat ! ("Offset of field: " , stringify ! (T1301OutBlock1) , "::" , stringify ! (_mschecnt))) ; } test_field__mschecnt () ; fn test_field_revolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . revolume) as usize - ptr as usize } , 117usize , concat ! ("Offset of field: " , stringify ! (T1301OutBlock1) , "::" , stringify ! (revolume))) ; } test_field_revolume () ; fn test_field__revolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _revolume) as usize - ptr as usize } , 129usize , concat ! ("Offset of field: " , stringify ! (T1301OutBlock1) , "::" , stringify ! (_revolume))) ; } test_field__revolume () ; fn test_field_rechecnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . rechecnt) as usize - ptr as usize } , 130usize , concat ! ("Offset of field: " , stringify ! (T1301OutBlock1) , "::" , stringify ! (rechecnt))) ; } test_field_rechecnt () ; fn test_field__rechecnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1301OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _rechecnt) as usize - ptr as usize } , 138usize , concat ! ("Offset of field: " , stringify ! (T1301OutBlock1) , "::" , stringify ! (_rechecnt))) ; } test_field__rechecnt () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T1305InBlock { pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , pub dwmcode : [:: std :: os :: raw :: c_char ; 1usize] , pub _dwmcode : :: std :: os :: raw :: c_char , pub date : [:: std :: os :: raw :: c_char ; 8usize] , pub _date : :: std :: os :: raw :: c_char , pub idx : [:: std :: os :: raw :: c_char ; 4usize] , pub _idx : :: std :: os :: raw :: c_char , pub cnt : [:: std :: os :: raw :: c_char ; 4usize] , pub _cnt : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T1305InBlock () { assert_eq ! (:: std :: mem :: size_of :: < T1305InBlock > () , 28usize , concat ! ("Size of: " , stringify ! (T1305InBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T1305InBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T1305InBlock))) ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T1305InBlock) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 6usize , concat ! ("Offset of field: " , stringify ! (T1305InBlock) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; fn test_field_dwmcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dwmcode) as usize - ptr as usize } , 7usize , concat ! ("Offset of field: " , stringify ! (T1305InBlock) , "::" , stringify ! (dwmcode))) ; } test_field_dwmcode () ; fn test_field__dwmcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dwmcode) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (T1305InBlock) , "::" , stringify ! (_dwmcode))) ; } test_field__dwmcode () ; fn test_field_date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . date) as usize - ptr as usize } , 9usize , concat ! ("Offset of field: " , stringify ! (T1305InBlock) , "::" , stringify ! (date))) ; } test_field_date () ; fn test_field__date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _date) as usize - ptr as usize } , 17usize , concat ! ("Offset of field: " , stringify ! (T1305InBlock) , "::" , stringify ! (_date))) ; } test_field__date () ; fn test_field_idx () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . idx) as usize - ptr as usize } , 18usize , concat ! ("Offset of field: " , stringify ! (T1305InBlock) , "::" , stringify ! (idx))) ; } test_field_idx () ; fn test_field__idx () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _idx) as usize - ptr as usize } , 22usize , concat ! ("Offset of field: " , stringify ! (T1305InBlock) , "::" , stringify ! (_idx))) ; } test_field__idx () ; fn test_field_cnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cnt) as usize - ptr as usize } , 23usize , concat ! ("Offset of field: " , stringify ! (T1305InBlock) , "::" , stringify ! (cnt))) ; } test_field_cnt () ; fn test_field__cnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cnt) as usize - ptr as usize } , 27usize , concat ! ("Offset of field: " , stringify ! (T1305InBlock) , "::" , stringify ! (_cnt))) ; } test_field__cnt () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T1305OutBlock { pub cnt : [:: std :: os :: raw :: c_char ; 4usize] , pub _cnt : :: std :: os :: raw :: c_char , pub date : [:: std :: os :: raw :: c_char ; 8usize] , pub _date : :: std :: os :: raw :: c_char , pub idx : [:: std :: os :: raw :: c_char ; 4usize] , pub _idx : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T1305OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < T1305OutBlock > () , 19usize , concat ! ("Size of: " , stringify ! (T1305OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T1305OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T1305OutBlock))) ; fn test_field_cnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock) , "::" , stringify ! (cnt))) ; } test_field_cnt () ; fn test_field__cnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cnt) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock) , "::" , stringify ! (_cnt))) ; } test_field__cnt () ; fn test_field_date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . date) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock) , "::" , stringify ! (date))) ; } test_field_date () ; fn test_field__date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _date) as usize - ptr as usize } , 13usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock) , "::" , stringify ! (_date))) ; } test_field__date () ; fn test_field_idx () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . idx) as usize - ptr as usize } , 14usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock) , "::" , stringify ! (idx))) ; } test_field_idx () ; fn test_field__idx () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _idx) as usize - ptr as usize } , 18usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock) , "::" , stringify ! (_idx))) ; } test_field__idx () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T1305OutBlock1 { pub date : [:: std :: os :: raw :: c_char ; 8usize] , pub _date : :: std :: os :: raw :: c_char , pub open : [:: std :: os :: raw :: c_char ; 8usize] , pub _open : :: std :: os :: raw :: c_char , pub high : [:: std :: os :: raw :: c_char ; 8usize] , pub _high : :: std :: os :: raw :: c_char , pub low : [:: std :: os :: raw :: c_char ; 8usize] , pub _low : :: std :: os :: raw :: c_char , pub close : [:: std :: os :: raw :: c_char ; 8usize] , pub _close : :: std :: os :: raw :: c_char , pub sign : [:: std :: os :: raw :: c_char ; 1usize] , pub _sign : :: std :: os :: raw :: c_char , pub change : [:: std :: os :: raw :: c_char ; 8usize] , pub _change : :: std :: os :: raw :: c_char , pub diff : [:: std :: os :: raw :: c_char ; 6usize] , pub _diff : :: std :: os :: raw :: c_char , pub volume : [:: std :: os :: raw :: c_char ; 12usize] , pub _volume : :: std :: os :: raw :: c_char , pub diff_vol : [:: std :: os :: raw :: c_char ; 10usize] , pub _diff_vol : :: std :: os :: raw :: c_char , pub chdegree : [:: std :: os :: raw :: c_char ; 6usize] , pub _chdegree : :: std :: os :: raw :: c_char , pub sojinrate : [:: std :: os :: raw :: c_char ; 6usize] , pub _sojinrate : :: std :: os :: raw :: c_char , pub changerate : [:: std :: os :: raw :: c_char ; 6usize] , pub _changerate : :: std :: os :: raw :: c_char , pub fpvolume : [:: std :: os :: raw :: c_char ; 12usize] , pub _fpvolume : :: std :: os :: raw :: c_char , pub covolume : [:: std :: os :: raw :: c_char ; 12usize] , pub _covolume : :: std :: os :: raw :: c_char , pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , pub value : [:: std :: os :: raw :: c_char ; 12usize] , pub _value : :: std :: os :: raw :: c_char , pub ppvolume : [:: std :: os :: raw :: c_char ; 12usize] , pub _ppvolume : :: std :: os :: raw :: c_char , pub o_sign : [:: std :: os :: raw :: c_char ; 1usize] , pub _o_sign : :: std :: os :: raw :: c_char , pub o_change : [:: std :: os :: raw :: c_char ; 8usize] , pub _o_change : :: std :: os :: raw :: c_char , pub o_diff : [:: std :: os :: raw :: c_char ; 6usize] , pub _o_diff : :: std :: os :: raw :: c_char , pub h_sign : [:: std :: os :: raw :: c_char ; 1usize] , pub _h_sign : :: std :: os :: raw :: c_char , pub h_change : [:: std :: os :: raw :: c_char ; 8usize] , pub _h_change : :: std :: os :: raw :: c_char , pub h_diff : [:: std :: os :: raw :: c_char ; 6usize] , pub _h_diff : :: std :: os :: raw :: c_char , pub l_sign : [:: std :: os :: raw :: c_char ; 1usize] , pub _l_sign : :: std :: os :: raw :: c_char , pub l_change : [:: std :: os :: raw :: c_char ; 8usize] , pub _l_change : :: std :: os :: raw :: c_char , pub l_diff : [:: std :: os :: raw :: c_char ; 6usize] , pub _l_diff : :: std :: os :: raw :: c_char , pub marketcap : [:: std :: os :: raw :: c_char ; 12usize] , pub _marketcap : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T1305OutBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < T1305OutBlock1 > () , 234usize , concat ! ("Size of: " , stringify ! (T1305OutBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < T1305OutBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (T1305OutBlock1))) ; fn test_field_date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . date) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (date))) ; } test_field_date () ; fn test_field__date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _date) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (_date))) ; } test_field__date () ; fn test_field_open () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . open) as usize - ptr as usize } , 9usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (open))) ; } test_field_open () ; fn test_field__open () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _open) as usize - ptr as usize } , 17usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (_open))) ; } test_field__open () ; fn test_field_high () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . high) as usize - ptr as usize } , 18usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (high))) ; } test_field_high () ; fn test_field__high () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _high) as usize - ptr as usize } , 26usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (_high))) ; } test_field__high () ; fn test_field_low () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . low) as usize - ptr as usize } , 27usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (low))) ; } test_field_low () ; fn test_field__low () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _low) as usize - ptr as usize } , 35usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (_low))) ; } test_field__low () ; fn test_field_close () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . close) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (close))) ; } test_field_close () ; fn test_field__close () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _close) as usize - ptr as usize } , 44usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (_close))) ; } test_field__close () ; fn test_field_sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sign) as usize - ptr as usize } , 45usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (sign))) ; } test_field_sign () ; fn test_field__sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sign) as usize - ptr as usize } , 46usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (_sign))) ; } test_field__sign () ; fn test_field_change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . change) as usize - ptr as usize } , 47usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (change))) ; } test_field_change () ; fn test_field__change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _change) as usize - ptr as usize } , 55usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (_change))) ; } test_field__change () ; fn test_field_diff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . diff) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (diff))) ; } test_field_diff () ; fn test_field__diff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _diff) as usize - ptr as usize } , 62usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (_diff))) ; } test_field__diff () ; fn test_field_volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . volume) as usize - ptr as usize } , 63usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (volume))) ; } test_field_volume () ; fn test_field__volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _volume) as usize - ptr as usize } , 75usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (_volume))) ; } test_field__volume () ; fn test_field_diff_vol () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . diff_vol) as usize - ptr as usize } , 76usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (diff_vol))) ; } test_field_diff_vol () ; fn test_field__diff_vol () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _diff_vol) as usize - ptr as usize } , 86usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (_diff_vol))) ; } test_field__diff_vol () ; fn test_field_chdegree () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . chdegree) as usize - ptr as usize } , 87usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (chdegree))) ; } test_field_chdegree () ; fn test_field__chdegree () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _chdegree) as usize - ptr as usize } , 93usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (_chdegree))) ; } test_field__chdegree () ; fn test_field_sojinrate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sojinrate) as usize - ptr as usize } , 94usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (sojinrate))) ; } test_field_sojinrate () ; fn test_field__sojinrate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sojinrate) as usize - ptr as usize } , 100usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (_sojinrate))) ; } test_field__sojinrate () ; fn test_field_changerate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . changerate) as usize - ptr as usize } , 101usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (changerate))) ; } test_field_changerate () ; fn test_field__changerate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _changerate) as usize - ptr as usize } , 107usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (_changerate))) ; } test_field__changerate () ; fn test_field_fpvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . fpvolume) as usize - ptr as usize } , 108usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (fpvolume))) ; } test_field_fpvolume () ; fn test_field__fpvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _fpvolume) as usize - ptr as usize } , 120usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (_fpvolume))) ; } test_field__fpvolume () ; fn test_field_covolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . covolume) as usize - ptr as usize } , 121usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (covolume))) ; } test_field_covolume () ; fn test_field__covolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _covolume) as usize - ptr as usize } , 133usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (_covolume))) ; } test_field__covolume () ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 134usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 140usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; fn test_field_value () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . value) as usize - ptr as usize } , 141usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (value))) ; } test_field_value () ; fn test_field__value () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _value) as usize - ptr as usize } , 153usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (_value))) ; } test_field__value () ; fn test_field_ppvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ppvolume) as usize - ptr as usize } , 154usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (ppvolume))) ; } test_field_ppvolume () ; fn test_field__ppvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ppvolume) as usize - ptr as usize } , 166usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (_ppvolume))) ; } test_field__ppvolume () ; fn test_field_o_sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . o_sign) as usize - ptr as usize } , 167usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (o_sign))) ; } test_field_o_sign () ; fn test_field__o_sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _o_sign) as usize - ptr as usize } , 168usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (_o_sign))) ; } test_field__o_sign () ; fn test_field_o_change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . o_change) as usize - ptr as usize } , 169usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (o_change))) ; } test_field_o_change () ; fn test_field__o_change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _o_change) as usize - ptr as usize } , 177usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (_o_change))) ; } test_field__o_change () ; fn test_field_o_diff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . o_diff) as usize - ptr as usize } , 178usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (o_diff))) ; } test_field_o_diff () ; fn test_field__o_diff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _o_diff) as usize - ptr as usize } , 184usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (_o_diff))) ; } test_field__o_diff () ; fn test_field_h_sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . h_sign) as usize - ptr as usize } , 185usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (h_sign))) ; } test_field_h_sign () ; fn test_field__h_sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _h_sign) as usize - ptr as usize } , 186usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (_h_sign))) ; } test_field__h_sign () ; fn test_field_h_change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . h_change) as usize - ptr as usize } , 187usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (h_change))) ; } test_field_h_change () ; fn test_field__h_change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _h_change) as usize - ptr as usize } , 195usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (_h_change))) ; } test_field__h_change () ; fn test_field_h_diff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . h_diff) as usize - ptr as usize } , 196usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (h_diff))) ; } test_field_h_diff () ; fn test_field__h_diff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _h_diff) as usize - ptr as usize } , 202usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (_h_diff))) ; } test_field__h_diff () ; fn test_field_l_sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . l_sign) as usize - ptr as usize } , 203usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (l_sign))) ; } test_field_l_sign () ; fn test_field__l_sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _l_sign) as usize - ptr as usize } , 204usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (_l_sign))) ; } test_field__l_sign () ; fn test_field_l_change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . l_change) as usize - ptr as usize } , 205usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (l_change))) ; } test_field_l_change () ; fn test_field__l_change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _l_change) as usize - ptr as usize } , 213usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (_l_change))) ; } test_field__l_change () ; fn test_field_l_diff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . l_diff) as usize - ptr as usize } , 214usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (l_diff))) ; } test_field_l_diff () ; fn test_field__l_diff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _l_diff) as usize - ptr as usize } , 220usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (_l_diff))) ; } test_field__l_diff () ; fn test_field_marketcap () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . marketcap) as usize - ptr as usize } , 221usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (marketcap))) ; } test_field_marketcap () ; fn test_field__marketcap () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1305OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _marketcap) as usize - ptr as usize } , 233usize , concat ! ("Offset of field: " , stringify ! (T1305OutBlock1) , "::" , stringify ! (_marketcap))) ; } test_field__marketcap () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T1310InBlock { pub daygb : [:: std :: os :: raw :: c_char ; 1usize] , pub _daygb : :: std :: os :: raw :: c_char , pub timegb : [:: std :: os :: raw :: c_char ; 1usize] , pub _timegb : :: std :: os :: raw :: c_char , pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , pub endtime : [:: std :: os :: raw :: c_char ; 4usize] , pub _endtime : :: std :: os :: raw :: c_char , pub cts_time : [:: std :: os :: raw :: c_char ; 10usize] , pub _cts_time : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T1310InBlock () { assert_eq ! (:: std :: mem :: size_of :: < T1310InBlock > () , 27usize , concat ! ("Size of: " , stringify ! (T1310InBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T1310InBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T1310InBlock))) ; fn test_field_daygb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . daygb) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T1310InBlock) , "::" , stringify ! (daygb))) ; } test_field_daygb () ; fn test_field__daygb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _daygb) as usize - ptr as usize } , 1usize , concat ! ("Offset of field: " , stringify ! (T1310InBlock) , "::" , stringify ! (_daygb))) ; } test_field__daygb () ; fn test_field_timegb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . timegb) as usize - ptr as usize } , 2usize , concat ! ("Offset of field: " , stringify ! (T1310InBlock) , "::" , stringify ! (timegb))) ; } test_field_timegb () ; fn test_field__timegb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _timegb) as usize - ptr as usize } , 3usize , concat ! ("Offset of field: " , stringify ! (T1310InBlock) , "::" , stringify ! (_timegb))) ; } test_field__timegb () ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (T1310InBlock) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 10usize , concat ! ("Offset of field: " , stringify ! (T1310InBlock) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; fn test_field_endtime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . endtime) as usize - ptr as usize } , 11usize , concat ! ("Offset of field: " , stringify ! (T1310InBlock) , "::" , stringify ! (endtime))) ; } test_field_endtime () ; fn test_field__endtime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _endtime) as usize - ptr as usize } , 15usize , concat ! ("Offset of field: " , stringify ! (T1310InBlock) , "::" , stringify ! (_endtime))) ; } test_field__endtime () ; fn test_field_cts_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_time) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (T1310InBlock) , "::" , stringify ! (cts_time))) ; } test_field_cts_time () ; fn test_field__cts_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cts_time) as usize - ptr as usize } , 26usize , concat ! ("Offset of field: " , stringify ! (T1310InBlock) , "::" , stringify ! (_cts_time))) ; } test_field__cts_time () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T1310OutBlock { pub cts_time : [:: std :: os :: raw :: c_char ; 10usize] , pub _cts_time : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T1310OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < T1310OutBlock > () , 11usize , concat ! ("Size of: " , stringify ! (T1310OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T1310OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T1310OutBlock))) ; fn test_field_cts_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_time) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T1310OutBlock) , "::" , stringify ! (cts_time))) ; } test_field_cts_time () ; fn test_field__cts_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cts_time) as usize - ptr as usize } , 10usize , concat ! ("Offset of field: " , stringify ! (T1310OutBlock) , "::" , stringify ! (_cts_time))) ; } test_field__cts_time () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T1310OutBlock1 { pub chetime : [:: std :: os :: raw :: c_char ; 10usize] , pub _chetime : :: std :: os :: raw :: c_char , pub price : [:: std :: os :: raw :: c_char ; 8usize] , pub _price : :: std :: os :: raw :: c_char , pub sign : [:: std :: os :: raw :: c_char ; 1usize] , pub _sign : :: std :: os :: raw :: c_char , pub change : [:: std :: os :: raw :: c_char ; 8usize] , pub _change : :: std :: os :: raw :: c_char , pub diff : [:: std :: os :: raw :: c_char ; 6usize] , pub _diff : :: std :: os :: raw :: c_char , pub cvolume : [:: std :: os :: raw :: c_char ; 12usize] , pub _cvolume : :: std :: os :: raw :: c_char , pub chdegree : [:: std :: os :: raw :: c_char ; 8usize] , pub _chdegree : :: std :: os :: raw :: c_char , pub volume : [:: std :: os :: raw :: c_char ; 12usize] , pub _volume : :: std :: os :: raw :: c_char , pub mdvolume : [:: std :: os :: raw :: c_char ; 12usize] , pub _mdvolume : :: std :: os :: raw :: c_char , pub mdchecnt : [:: std :: os :: raw :: c_char ; 8usize] , pub _mdchecnt : :: std :: os :: raw :: c_char , pub msvolume : [:: std :: os :: raw :: c_char ; 12usize] , pub _msvolume : :: std :: os :: raw :: c_char , pub mschecnt : [:: std :: os :: raw :: c_char ; 8usize] , pub _mschecnt : :: std :: os :: raw :: c_char , pub revolume : [:: std :: os :: raw :: c_char ; 12usize] , pub _revolume : :: std :: os :: raw :: c_char , pub rechecnt : [:: std :: os :: raw :: c_char ; 8usize] , pub _rechecnt : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T1310OutBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < T1310OutBlock1 > () , 139usize , concat ! ("Size of: " , stringify ! (T1310OutBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < T1310OutBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (T1310OutBlock1))) ; fn test_field_chetime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . chetime) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T1310OutBlock1) , "::" , stringify ! (chetime))) ; } test_field_chetime () ; fn test_field__chetime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _chetime) as usize - ptr as usize } , 10usize , concat ! ("Offset of field: " , stringify ! (T1310OutBlock1) , "::" , stringify ! (_chetime))) ; } test_field__chetime () ; fn test_field_price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . price) as usize - ptr as usize } , 11usize , concat ! ("Offset of field: " , stringify ! (T1310OutBlock1) , "::" , stringify ! (price))) ; } test_field_price () ; fn test_field__price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _price) as usize - ptr as usize } , 19usize , concat ! ("Offset of field: " , stringify ! (T1310OutBlock1) , "::" , stringify ! (_price))) ; } test_field__price () ; fn test_field_sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sign) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (T1310OutBlock1) , "::" , stringify ! (sign))) ; } test_field_sign () ; fn test_field__sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sign) as usize - ptr as usize } , 21usize , concat ! ("Offset of field: " , stringify ! (T1310OutBlock1) , "::" , stringify ! (_sign))) ; } test_field__sign () ; fn test_field_change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . change) as usize - ptr as usize } , 22usize , concat ! ("Offset of field: " , stringify ! (T1310OutBlock1) , "::" , stringify ! (change))) ; } test_field_change () ; fn test_field__change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _change) as usize - ptr as usize } , 30usize , concat ! ("Offset of field: " , stringify ! (T1310OutBlock1) , "::" , stringify ! (_change))) ; } test_field__change () ; fn test_field_diff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . diff) as usize - ptr as usize } , 31usize , concat ! ("Offset of field: " , stringify ! (T1310OutBlock1) , "::" , stringify ! (diff))) ; } test_field_diff () ; fn test_field__diff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _diff) as usize - ptr as usize } , 37usize , concat ! ("Offset of field: " , stringify ! (T1310OutBlock1) , "::" , stringify ! (_diff))) ; } test_field__diff () ; fn test_field_cvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cvolume) as usize - ptr as usize } , 38usize , concat ! ("Offset of field: " , stringify ! (T1310OutBlock1) , "::" , stringify ! (cvolume))) ; } test_field_cvolume () ; fn test_field__cvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cvolume) as usize - ptr as usize } , 50usize , concat ! ("Offset of field: " , stringify ! (T1310OutBlock1) , "::" , stringify ! (_cvolume))) ; } test_field__cvolume () ; fn test_field_chdegree () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . chdegree) as usize - ptr as usize } , 51usize , concat ! ("Offset of field: " , stringify ! (T1310OutBlock1) , "::" , stringify ! (chdegree))) ; } test_field_chdegree () ; fn test_field__chdegree () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _chdegree) as usize - ptr as usize } , 59usize , concat ! ("Offset of field: " , stringify ! (T1310OutBlock1) , "::" , stringify ! (_chdegree))) ; } test_field__chdegree () ; fn test_field_volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . volume) as usize - ptr as usize } , 60usize , concat ! ("Offset of field: " , stringify ! (T1310OutBlock1) , "::" , stringify ! (volume))) ; } test_field_volume () ; fn test_field__volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _volume) as usize - ptr as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (T1310OutBlock1) , "::" , stringify ! (_volume))) ; } test_field__volume () ; fn test_field_mdvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mdvolume) as usize - ptr as usize } , 73usize , concat ! ("Offset of field: " , stringify ! (T1310OutBlock1) , "::" , stringify ! (mdvolume))) ; } test_field_mdvolume () ; fn test_field__mdvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _mdvolume) as usize - ptr as usize } , 85usize , concat ! ("Offset of field: " , stringify ! (T1310OutBlock1) , "::" , stringify ! (_mdvolume))) ; } test_field__mdvolume () ; fn test_field_mdchecnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mdchecnt) as usize - ptr as usize } , 86usize , concat ! ("Offset of field: " , stringify ! (T1310OutBlock1) , "::" , stringify ! (mdchecnt))) ; } test_field_mdchecnt () ; fn test_field__mdchecnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _mdchecnt) as usize - ptr as usize } , 94usize , concat ! ("Offset of field: " , stringify ! (T1310OutBlock1) , "::" , stringify ! (_mdchecnt))) ; } test_field__mdchecnt () ; fn test_field_msvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . msvolume) as usize - ptr as usize } , 95usize , concat ! ("Offset of field: " , stringify ! (T1310OutBlock1) , "::" , stringify ! (msvolume))) ; } test_field_msvolume () ; fn test_field__msvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _msvolume) as usize - ptr as usize } , 107usize , concat ! ("Offset of field: " , stringify ! (T1310OutBlock1) , "::" , stringify ! (_msvolume))) ; } test_field__msvolume () ; fn test_field_mschecnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mschecnt) as usize - ptr as usize } , 108usize , concat ! ("Offset of field: " , stringify ! (T1310OutBlock1) , "::" , stringify ! (mschecnt))) ; } test_field_mschecnt () ; fn test_field__mschecnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _mschecnt) as usize - ptr as usize } , 116usize , concat ! ("Offset of field: " , stringify ! (T1310OutBlock1) , "::" , stringify ! (_mschecnt))) ; } test_field__mschecnt () ; fn test_field_revolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . revolume) as usize - ptr as usize } , 117usize , concat ! ("Offset of field: " , stringify ! (T1310OutBlock1) , "::" , stringify ! (revolume))) ; } test_field_revolume () ; fn test_field__revolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _revolume) as usize - ptr as usize } , 129usize , concat ! ("Offset of field: " , stringify ! (T1310OutBlock1) , "::" , stringify ! (_revolume))) ; } test_field__revolume () ; fn test_field_rechecnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . rechecnt) as usize - ptr as usize } , 130usize , concat ! ("Offset of field: " , stringify ! (T1310OutBlock1) , "::" , stringify ! (rechecnt))) ; } test_field_rechecnt () ; fn test_field__rechecnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1310OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _rechecnt) as usize - ptr as usize } , 138usize , concat ! ("Offset of field: " , stringify ! (T1310OutBlock1) , "::" , stringify ! (_rechecnt))) ; } test_field__rechecnt () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T1404InBlock { pub gubun : [:: std :: os :: raw :: c_char ; 1usize] , pub _gubun : :: std :: os :: raw :: c_char , pub jongchk : [:: std :: os :: raw :: c_char ; 1usize] , pub _jongchk : :: std :: os :: raw :: c_char , pub cts_shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _cts_shcode : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T1404InBlock () { assert_eq ! (:: std :: mem :: size_of :: < T1404InBlock > () , 11usize , concat ! ("Size of: " , stringify ! (T1404InBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T1404InBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T1404InBlock))) ; fn test_field_gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . gubun) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T1404InBlock) , "::" , stringify ! (gubun))) ; } test_field_gubun () ; fn test_field__gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _gubun) as usize - ptr as usize } , 1usize , concat ! ("Offset of field: " , stringify ! (T1404InBlock) , "::" , stringify ! (_gubun))) ; } test_field__gubun () ; fn test_field_jongchk () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jongchk) as usize - ptr as usize } , 2usize , concat ! ("Offset of field: " , stringify ! (T1404InBlock) , "::" , stringify ! (jongchk))) ; } test_field_jongchk () ; fn test_field__jongchk () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jongchk) as usize - ptr as usize } , 3usize , concat ! ("Offset of field: " , stringify ! (T1404InBlock) , "::" , stringify ! (_jongchk))) ; } test_field__jongchk () ; fn test_field_cts_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_shcode) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (T1404InBlock) , "::" , stringify ! (cts_shcode))) ; } test_field_cts_shcode () ; fn test_field__cts_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cts_shcode) as usize - ptr as usize } , 10usize , concat ! ("Offset of field: " , stringify ! (T1404InBlock) , "::" , stringify ! (_cts_shcode))) ; } test_field__cts_shcode () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T1404OutBlock { pub cts_shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _cts_shcode : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T1404OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < T1404OutBlock > () , 7usize , concat ! ("Size of: " , stringify ! (T1404OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T1404OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T1404OutBlock))) ; fn test_field_cts_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_shcode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T1404OutBlock) , "::" , stringify ! (cts_shcode))) ; } test_field_cts_shcode () ; fn test_field__cts_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cts_shcode) as usize - ptr as usize } , 6usize , concat ! ("Offset of field: " , stringify ! (T1404OutBlock) , "::" , stringify ! (_cts_shcode))) ; } test_field__cts_shcode () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T1404OutBlock1 { pub hname : [:: std :: os :: raw :: c_char ; 20usize] , pub _hname : :: std :: os :: raw :: c_char , pub price : [:: std :: os :: raw :: c_char ; 8usize] , pub _price : :: std :: os :: raw :: c_char , pub sign : [:: std :: os :: raw :: c_char ; 1usize] , pub _sign : :: std :: os :: raw :: c_char , pub change : [:: std :: os :: raw :: c_char ; 8usize] , pub _change : :: std :: os :: raw :: c_char , pub diff : [:: std :: os :: raw :: c_char ; 6usize] , pub _diff : :: std :: os :: raw :: c_char , pub volume : [:: std :: os :: raw :: c_char ; 12usize] , pub _volume : :: std :: os :: raw :: c_char , pub date : [:: std :: os :: raw :: c_char ; 8usize] , pub _date : :: std :: os :: raw :: c_char , pub tprice : [:: std :: os :: raw :: c_char ; 8usize] , pub _tprice : :: std :: os :: raw :: c_char , pub tchange : [:: std :: os :: raw :: c_char ; 8usize] , pub _tchange : :: std :: os :: raw :: c_char , pub tdiff : [:: std :: os :: raw :: c_char ; 6usize] , pub _tdiff : :: std :: os :: raw :: c_char , pub reason : [:: std :: os :: raw :: c_char ; 4usize] , pub _reason : :: std :: os :: raw :: c_char , pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , pub edate : [:: std :: os :: raw :: c_char ; 8usize] , pub _edate : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T1404OutBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < T1404OutBlock1 > () , 116usize , concat ! ("Size of: " , stringify ! (T1404OutBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < T1404OutBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (T1404OutBlock1))) ; fn test_field_hname () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . hname) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T1404OutBlock1) , "::" , stringify ! (hname))) ; } test_field_hname () ; fn test_field__hname () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _hname) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (T1404OutBlock1) , "::" , stringify ! (_hname))) ; } test_field__hname () ; fn test_field_price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . price) as usize - ptr as usize } , 21usize , concat ! ("Offset of field: " , stringify ! (T1404OutBlock1) , "::" , stringify ! (price))) ; } test_field_price () ; fn test_field__price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _price) as usize - ptr as usize } , 29usize , concat ! ("Offset of field: " , stringify ! (T1404OutBlock1) , "::" , stringify ! (_price))) ; } test_field__price () ; fn test_field_sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sign) as usize - ptr as usize } , 30usize , concat ! ("Offset of field: " , stringify ! (T1404OutBlock1) , "::" , stringify ! (sign))) ; } test_field_sign () ; fn test_field__sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sign) as usize - ptr as usize } , 31usize , concat ! ("Offset of field: " , stringify ! (T1404OutBlock1) , "::" , stringify ! (_sign))) ; } test_field__sign () ; fn test_field_change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . change) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (T1404OutBlock1) , "::" , stringify ! (change))) ; } test_field_change () ; fn test_field__change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _change) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (T1404OutBlock1) , "::" , stringify ! (_change))) ; } test_field__change () ; fn test_field_diff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . diff) as usize - ptr as usize } , 41usize , concat ! ("Offset of field: " , stringify ! (T1404OutBlock1) , "::" , stringify ! (diff))) ; } test_field_diff () ; fn test_field__diff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _diff) as usize - ptr as usize } , 47usize , concat ! ("Offset of field: " , stringify ! (T1404OutBlock1) , "::" , stringify ! (_diff))) ; } test_field__diff () ; fn test_field_volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . volume) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (T1404OutBlock1) , "::" , stringify ! (volume))) ; } test_field_volume () ; fn test_field__volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _volume) as usize - ptr as usize } , 60usize , concat ! ("Offset of field: " , stringify ! (T1404OutBlock1) , "::" , stringify ! (_volume))) ; } test_field__volume () ; fn test_field_date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . date) as usize - ptr as usize } , 61usize , concat ! ("Offset of field: " , stringify ! (T1404OutBlock1) , "::" , stringify ! (date))) ; } test_field_date () ; fn test_field__date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _date) as usize - ptr as usize } , 69usize , concat ! ("Offset of field: " , stringify ! (T1404OutBlock1) , "::" , stringify ! (_date))) ; } test_field__date () ; fn test_field_tprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tprice) as usize - ptr as usize } , 70usize , concat ! ("Offset of field: " , stringify ! (T1404OutBlock1) , "::" , stringify ! (tprice))) ; } test_field_tprice () ; fn test_field__tprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _tprice) as usize - ptr as usize } , 78usize , concat ! ("Offset of field: " , stringify ! (T1404OutBlock1) , "::" , stringify ! (_tprice))) ; } test_field__tprice () ; fn test_field_tchange () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tchange) as usize - ptr as usize } , 79usize , concat ! ("Offset of field: " , stringify ! (T1404OutBlock1) , "::" , stringify ! (tchange))) ; } test_field_tchange () ; fn test_field__tchange () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _tchange) as usize - ptr as usize } , 87usize , concat ! ("Offset of field: " , stringify ! (T1404OutBlock1) , "::" , stringify ! (_tchange))) ; } test_field__tchange () ; fn test_field_tdiff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tdiff) as usize - ptr as usize } , 88usize , concat ! ("Offset of field: " , stringify ! (T1404OutBlock1) , "::" , stringify ! (tdiff))) ; } test_field_tdiff () ; fn test_field__tdiff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _tdiff) as usize - ptr as usize } , 94usize , concat ! ("Offset of field: " , stringify ! (T1404OutBlock1) , "::" , stringify ! (_tdiff))) ; } test_field__tdiff () ; fn test_field_reason () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . reason) as usize - ptr as usize } , 95usize , concat ! ("Offset of field: " , stringify ! (T1404OutBlock1) , "::" , stringify ! (reason))) ; } test_field_reason () ; fn test_field__reason () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _reason) as usize - ptr as usize } , 99usize , concat ! ("Offset of field: " , stringify ! (T1404OutBlock1) , "::" , stringify ! (_reason))) ; } test_field__reason () ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 100usize , concat ! ("Offset of field: " , stringify ! (T1404OutBlock1) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 106usize , concat ! ("Offset of field: " , stringify ! (T1404OutBlock1) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; fn test_field_edate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . edate) as usize - ptr as usize } , 107usize , concat ! ("Offset of field: " , stringify ! (T1404OutBlock1) , "::" , stringify ! (edate))) ; } test_field_edate () ; fn test_field__edate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1404OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _edate) as usize - ptr as usize } , 115usize , concat ! ("Offset of field: " , stringify ! (T1404OutBlock1) , "::" , stringify ! (_edate))) ; } test_field__edate () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T1405InBlock { pub gubun : [:: std :: os :: raw :: c_char ; 1usize] , pub _gubun : :: std :: os :: raw :: c_char , pub jongchk : [:: std :: os :: raw :: c_char ; 1usize] , pub _jongchk : :: std :: os :: raw :: c_char , pub cts_shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _cts_shcode : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T1405InBlock () { assert_eq ! (:: std :: mem :: size_of :: < T1405InBlock > () , 11usize , concat ! ("Size of: " , stringify ! (T1405InBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T1405InBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T1405InBlock))) ; fn test_field_gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1405InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . gubun) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T1405InBlock) , "::" , stringify ! (gubun))) ; } test_field_gubun () ; fn test_field__gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1405InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _gubun) as usize - ptr as usize } , 1usize , concat ! ("Offset of field: " , stringify ! (T1405InBlock) , "::" , stringify ! (_gubun))) ; } test_field__gubun () ; fn test_field_jongchk () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1405InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jongchk) as usize - ptr as usize } , 2usize , concat ! ("Offset of field: " , stringify ! (T1405InBlock) , "::" , stringify ! (jongchk))) ; } test_field_jongchk () ; fn test_field__jongchk () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1405InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jongchk) as usize - ptr as usize } , 3usize , concat ! ("Offset of field: " , stringify ! (T1405InBlock) , "::" , stringify ! (_jongchk))) ; } test_field__jongchk () ; fn test_field_cts_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1405InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_shcode) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (T1405InBlock) , "::" , stringify ! (cts_shcode))) ; } test_field_cts_shcode () ; fn test_field__cts_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1405InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cts_shcode) as usize - ptr as usize } , 10usize , concat ! ("Offset of field: " , stringify ! (T1405InBlock) , "::" , stringify ! (_cts_shcode))) ; } test_field__cts_shcode () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T1405OutBlock { pub cts_shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _cts_shcode : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T1405OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < T1405OutBlock > () , 7usize , concat ! ("Size of: " , stringify ! (T1405OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T1405OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T1405OutBlock))) ; fn test_field_cts_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1405OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_shcode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T1405OutBlock) , "::" , stringify ! (cts_shcode))) ; } test_field_cts_shcode () ; fn test_field__cts_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1405OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cts_shcode) as usize - ptr as usize } , 6usize , concat ! ("Offset of field: " , stringify ! (T1405OutBlock) , "::" , stringify ! (_cts_shcode))) ; } test_field__cts_shcode () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T1405OutBlock1 { pub hname : [:: std :: os :: raw :: c_char ; 20usize] , pub _hname : :: std :: os :: raw :: c_char , pub price : [:: std :: os :: raw :: c_char ; 8usize] , pub _price : :: std :: os :: raw :: c_char , pub sign : [:: std :: os :: raw :: c_char ; 1usize] , pub _sign : :: std :: os :: raw :: c_char , pub change : [:: std :: os :: raw :: c_char ; 8usize] , pub _change : :: std :: os :: raw :: c_char , pub diff : [:: std :: os :: raw :: c_char ; 6usize] , pub _diff : :: std :: os :: raw :: c_char , pub volume : [:: std :: os :: raw :: c_char ; 12usize] , pub _volume : :: std :: os :: raw :: c_char , pub date : [:: std :: os :: raw :: c_char ; 8usize] , pub _date : :: std :: os :: raw :: c_char , pub edate : [:: std :: os :: raw :: c_char ; 8usize] , pub _edate : :: std :: os :: raw :: c_char , pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T1405OutBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < T1405OutBlock1 > () , 86usize , concat ! ("Size of: " , stringify ! (T1405OutBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < T1405OutBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (T1405OutBlock1))) ; fn test_field_hname () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1405OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . hname) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T1405OutBlock1) , "::" , stringify ! (hname))) ; } test_field_hname () ; fn test_field__hname () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1405OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _hname) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (T1405OutBlock1) , "::" , stringify ! (_hname))) ; } test_field__hname () ; fn test_field_price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1405OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . price) as usize - ptr as usize } , 21usize , concat ! ("Offset of field: " , stringify ! (T1405OutBlock1) , "::" , stringify ! (price))) ; } test_field_price () ; fn test_field__price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1405OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _price) as usize - ptr as usize } , 29usize , concat ! ("Offset of field: " , stringify ! (T1405OutBlock1) , "::" , stringify ! (_price))) ; } test_field__price () ; fn test_field_sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1405OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sign) as usize - ptr as usize } , 30usize , concat ! ("Offset of field: " , stringify ! (T1405OutBlock1) , "::" , stringify ! (sign))) ; } test_field_sign () ; fn test_field__sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1405OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sign) as usize - ptr as usize } , 31usize , concat ! ("Offset of field: " , stringify ! (T1405OutBlock1) , "::" , stringify ! (_sign))) ; } test_field__sign () ; fn test_field_change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1405OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . change) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (T1405OutBlock1) , "::" , stringify ! (change))) ; } test_field_change () ; fn test_field__change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1405OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _change) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (T1405OutBlock1) , "::" , stringify ! (_change))) ; } test_field__change () ; fn test_field_diff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1405OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . diff) as usize - ptr as usize } , 41usize , concat ! ("Offset of field: " , stringify ! (T1405OutBlock1) , "::" , stringify ! (diff))) ; } test_field_diff () ; fn test_field__diff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1405OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _diff) as usize - ptr as usize } , 47usize , concat ! ("Offset of field: " , stringify ! (T1405OutBlock1) , "::" , stringify ! (_diff))) ; } test_field__diff () ; fn test_field_volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1405OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . volume) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (T1405OutBlock1) , "::" , stringify ! (volume))) ; } test_field_volume () ; fn test_field__volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1405OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _volume) as usize - ptr as usize } , 60usize , concat ! ("Offset of field: " , stringify ! (T1405OutBlock1) , "::" , stringify ! (_volume))) ; } test_field__volume () ; fn test_field_date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1405OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . date) as usize - ptr as usize } , 61usize , concat ! ("Offset of field: " , stringify ! (T1405OutBlock1) , "::" , stringify ! (date))) ; } test_field_date () ; fn test_field__date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1405OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _date) as usize - ptr as usize } , 69usize , concat ! ("Offset of field: " , stringify ! (T1405OutBlock1) , "::" , stringify ! (_date))) ; } test_field__date () ; fn test_field_edate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1405OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . edate) as usize - ptr as usize } , 70usize , concat ! ("Offset of field: " , stringify ! (T1405OutBlock1) , "::" , stringify ! (edate))) ; } test_field_edate () ; fn test_field__edate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1405OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _edate) as usize - ptr as usize } , 78usize , concat ! ("Offset of field: " , stringify ! (T1405OutBlock1) , "::" , stringify ! (_edate))) ; } test_field__edate () ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1405OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 79usize , concat ! ("Offset of field: " , stringify ! (T1405OutBlock1) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1405OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 85usize , concat ! ("Offset of field: " , stringify ! (T1405OutBlock1) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T1901InBlock { pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T1901InBlock () { assert_eq ! (:: std :: mem :: size_of :: < T1901InBlock > () , 7usize , concat ! ("Size of: " , stringify ! (T1901InBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T1901InBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T1901InBlock))) ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T1901InBlock) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 6usize , concat ! ("Offset of field: " , stringify ! (T1901InBlock) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T1901OutBlock { pub hname : [:: std :: os :: raw :: c_char ; 20usize] , pub _hname : :: std :: os :: raw :: c_char , pub price : [:: std :: os :: raw :: c_char ; 8usize] , pub _price : :: std :: os :: raw :: c_char , pub sign : [:: std :: os :: raw :: c_char ; 1usize] , pub _sign : :: std :: os :: raw :: c_char , pub change : [:: std :: os :: raw :: c_char ; 8usize] , pub _change : :: std :: os :: raw :: c_char , pub diff : [:: std :: os :: raw :: c_char ; 6usize] , pub _diff : :: std :: os :: raw :: c_char , pub volume : [:: std :: os :: raw :: c_char ; 12usize] , pub _volume : :: std :: os :: raw :: c_char , pub recprice : [:: std :: os :: raw :: c_char ; 8usize] , pub _recprice : :: std :: os :: raw :: c_char , pub avg : [:: std :: os :: raw :: c_char ; 8usize] , pub _avg : :: std :: os :: raw :: c_char , pub uplmtprice : [:: std :: os :: raw :: c_char ; 8usize] , pub _uplmtprice : :: std :: os :: raw :: c_char , pub dnlmtprice : [:: std :: os :: raw :: c_char ; 8usize] , pub _dnlmtprice : :: std :: os :: raw :: c_char , pub jnilvolume : [:: std :: os :: raw :: c_char ; 12usize] , pub _jnilvolume : :: std :: os :: raw :: c_char , pub volumediff : [:: std :: os :: raw :: c_char ; 12usize] , pub _volumediff : :: std :: os :: raw :: c_char , pub open : [:: std :: os :: raw :: c_char ; 8usize] , pub _open : :: std :: os :: raw :: c_char , pub opentime : [:: std :: os :: raw :: c_char ; 6usize] , pub _opentime : :: std :: os :: raw :: c_char , pub high : [:: std :: os :: raw :: c_char ; 8usize] , pub _high : :: std :: os :: raw :: c_char , pub hightime : [:: std :: os :: raw :: c_char ; 6usize] , pub _hightime : :: std :: os :: raw :: c_char , pub low : [:: std :: os :: raw :: c_char ; 8usize] , pub _low : :: std :: os :: raw :: c_char , pub lowtime : [:: std :: os :: raw :: c_char ; 6usize] , pub _lowtime : :: std :: os :: raw :: c_char , pub high52w : [:: std :: os :: raw :: c_char ; 8usize] , pub _high52w : :: std :: os :: raw :: c_char , pub high52wdate : [:: std :: os :: raw :: c_char ; 8usize] , pub _high52wdate : :: std :: os :: raw :: c_char , pub low52w : [:: std :: os :: raw :: c_char ; 8usize] , pub _low52w : :: std :: os :: raw :: c_char , pub low52wdate : [:: std :: os :: raw :: c_char ; 8usize] , pub _low52wdate : :: std :: os :: raw :: c_char , pub exhratio : [:: std :: os :: raw :: c_char ; 6usize] , pub _exhratio : :: std :: os :: raw :: c_char , pub flmtvol : [:: std :: os :: raw :: c_char ; 12usize] , pub _flmtvol : :: std :: os :: raw :: c_char , pub per : [:: std :: os :: raw :: c_char ; 6usize] , pub _per : :: std :: os :: raw :: c_char , pub listing : [:: std :: os :: raw :: c_char ; 12usize] , pub _listing : :: std :: os :: raw :: c_char , pub jkrate : [:: std :: os :: raw :: c_char ; 8usize] , pub _jkrate : :: std :: os :: raw :: c_char , pub vol : [:: std :: os :: raw :: c_char ; 6usize] , pub _vol : :: std :: os :: raw :: c_char , pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , pub value : [:: std :: os :: raw :: c_char ; 12usize] , pub _value : :: std :: os :: raw :: c_char , pub highyear : [:: std :: os :: raw :: c_char ; 8usize] , pub _highyear : :: std :: os :: raw :: c_char , pub highyeardate : [:: std :: os :: raw :: c_char ; 8usize] , pub _highyeardate : :: std :: os :: raw :: c_char , pub lowyear : [:: std :: os :: raw :: c_char ; 8usize] , pub _lowyear : :: std :: os :: raw :: c_char , pub lowyeardate : [:: std :: os :: raw :: c_char ; 8usize] , pub _lowyeardate : :: std :: os :: raw :: c_char , pub upname : [:: std :: os :: raw :: c_char ; 20usize] , pub _upname : :: std :: os :: raw :: c_char , pub upcode : [:: std :: os :: raw :: c_char ; 3usize] , pub _upcode : :: std :: os :: raw :: c_char , pub upprice : [:: std :: os :: raw :: c_char ; 7usize] , pub _upprice : :: std :: os :: raw :: c_char , pub upsign : [:: std :: os :: raw :: c_char ; 1usize] , pub _upsign : :: std :: os :: raw :: c_char , pub upchange : [:: std :: os :: raw :: c_char ; 6usize] , pub _upchange : :: std :: os :: raw :: c_char , pub updiff : [:: std :: os :: raw :: c_char ; 6usize] , pub _updiff : :: std :: os :: raw :: c_char , pub futname : [:: std :: os :: raw :: c_char ; 20usize] , pub _futname : :: std :: os :: raw :: c_char , pub futcode : [:: std :: os :: raw :: c_char ; 8usize] , pub _futcode : :: std :: os :: raw :: c_char , pub futprice : [:: std :: os :: raw :: c_char ; 6usize] , pub _futprice : :: std :: os :: raw :: c_char , pub futsign : [:: std :: os :: raw :: c_char ; 1usize] , pub _futsign : :: std :: os :: raw :: c_char , pub futchange : [:: std :: os :: raw :: c_char ; 6usize] , pub _futchange : :: std :: os :: raw :: c_char , pub futdiff : [:: std :: os :: raw :: c_char ; 6usize] , pub _futdiff : :: std :: os :: raw :: c_char , pub nav : [:: std :: os :: raw :: c_char ; 8usize] , pub _nav : :: std :: os :: raw :: c_char , pub navsign : [:: std :: os :: raw :: c_char ; 1usize] , pub _navsign : :: std :: os :: raw :: c_char , pub navchange : [:: std :: os :: raw :: c_char ; 8usize] , pub _navchange : :: std :: os :: raw :: c_char , pub navdiff : [:: std :: os :: raw :: c_char ; 6usize] , pub _navdiff : :: std :: os :: raw :: c_char , pub cocrate : [:: std :: os :: raw :: c_char ; 6usize] , pub _cocrate : :: std :: os :: raw :: c_char , pub kasis : [:: std :: os :: raw :: c_char ; 6usize] , pub _kasis : :: std :: os :: raw :: c_char , pub subprice : [:: std :: os :: raw :: c_char ; 10usize] , pub _subprice : :: std :: os :: raw :: c_char , pub offerno1 : [:: std :: os :: raw :: c_char ; 6usize] , pub _offerno1 : :: std :: os :: raw :: c_char , pub bidno1 : [:: std :: os :: raw :: c_char ; 6usize] , pub _bidno1 : :: std :: os :: raw :: c_char , pub dvol1 : [:: std :: os :: raw :: c_char ; 8usize] , pub _dvol1 : :: std :: os :: raw :: c_char , pub svol1 : [:: std :: os :: raw :: c_char ; 8usize] , pub _svol1 : :: std :: os :: raw :: c_char , pub dcha1 : [:: std :: os :: raw :: c_char ; 8usize] , pub _dcha1 : :: std :: os :: raw :: c_char , pub scha1 : [:: std :: os :: raw :: c_char ; 8usize] , pub _scha1 : :: std :: os :: raw :: c_char , pub ddiff1 : [:: std :: os :: raw :: c_char ; 6usize] , pub _ddiff1 : :: std :: os :: raw :: c_char , pub sdiff1 : [:: std :: os :: raw :: c_char ; 6usize] , pub _sdiff1 : :: std :: os :: raw :: c_char , pub offerno2 : [:: std :: os :: raw :: c_char ; 6usize] , pub _offerno2 : :: std :: os :: raw :: c_char , pub bidno2 : [:: std :: os :: raw :: c_char ; 6usize] , pub _bidno2 : :: std :: os :: raw :: c_char , pub dvol2 : [:: std :: os :: raw :: c_char ; 8usize] , pub _dvol2 : :: std :: os :: raw :: c_char , pub svol2 : [:: std :: os :: raw :: c_char ; 8usize] , pub _svol2 : :: std :: os :: raw :: c_char , pub dcha2 : [:: std :: os :: raw :: c_char ; 8usize] , pub _dcha2 : :: std :: os :: raw :: c_char , pub scha2 : [:: std :: os :: raw :: c_char ; 8usize] , pub _scha2 : :: std :: os :: raw :: c_char , pub ddiff2 : [:: std :: os :: raw :: c_char ; 6usize] , pub _ddiff2 : :: std :: os :: raw :: c_char , pub sdiff2 : [:: std :: os :: raw :: c_char ; 6usize] , pub _sdiff2 : :: std :: os :: raw :: c_char , pub offerno3 : [:: std :: os :: raw :: c_char ; 6usize] , pub _offerno3 : :: std :: os :: raw :: c_char , pub bidno3 : [:: std :: os :: raw :: c_char ; 6usize] , pub _bidno3 : :: std :: os :: raw :: c_char , pub dvol3 : [:: std :: os :: raw :: c_char ; 8usize] , pub _dvol3 : :: std :: os :: raw :: c_char , pub svol3 : [:: std :: os :: raw :: c_char ; 8usize] , pub _svol3 : :: std :: os :: raw :: c_char , pub dcha3 : [:: std :: os :: raw :: c_char ; 8usize] , pub _dcha3 : :: std :: os :: raw :: c_char , pub scha3 : [:: std :: os :: raw :: c_char ; 8usize] , pub _scha3 : :: std :: os :: raw :: c_char , pub ddiff3 : [:: std :: os :: raw :: c_char ; 6usize] , pub _ddiff3 : :: std :: os :: raw :: c_char , pub sdiff3 : [:: std :: os :: raw :: c_char ; 6usize] , pub _sdiff3 : :: std :: os :: raw :: c_char , pub offerno4 : [:: std :: os :: raw :: c_char ; 6usize] , pub _offerno4 : :: std :: os :: raw :: c_char , pub bidno4 : [:: std :: os :: raw :: c_char ; 6usize] , pub _bidno4 : :: std :: os :: raw :: c_char , pub dvol4 : [:: std :: os :: raw :: c_char ; 8usize] , pub _dvol4 : :: std :: os :: raw :: c_char , pub svol4 : [:: std :: os :: raw :: c_char ; 8usize] , pub _svol4 : :: std :: os :: raw :: c_char , pub dcha4 : [:: std :: os :: raw :: c_char ; 8usize] , pub _dcha4 : :: std :: os :: raw :: c_char , pub scha4 : [:: std :: os :: raw :: c_char ; 8usize] , pub _scha4 : :: std :: os :: raw :: c_char , pub ddiff4 : [:: std :: os :: raw :: c_char ; 6usize] , pub _ddiff4 : :: std :: os :: raw :: c_char , pub sdiff4 : [:: std :: os :: raw :: c_char ; 6usize] , pub _sdiff4 : :: std :: os :: raw :: c_char , pub offerno5 : [:: std :: os :: raw :: c_char ; 6usize] , pub _offerno5 : :: std :: os :: raw :: c_char , pub bidno5 : [:: std :: os :: raw :: c_char ; 6usize] , pub _bidno5 : :: std :: os :: raw :: c_char , pub dvol5 : [:: std :: os :: raw :: c_char ; 8usize] , pub _dvol5 : :: std :: os :: raw :: c_char , pub svol5 : [:: std :: os :: raw :: c_char ; 8usize] , pub _svol5 : :: std :: os :: raw :: c_char , pub dcha5 : [:: std :: os :: raw :: c_char ; 8usize] , pub _dcha5 : :: std :: os :: raw :: c_char , pub scha5 : [:: std :: os :: raw :: c_char ; 8usize] , pub _scha5 : :: std :: os :: raw :: c_char , pub ddiff5 : [:: std :: os :: raw :: c_char ; 6usize] , pub _ddiff5 : :: std :: os :: raw :: c_char , pub sdiff5 : [:: std :: os :: raw :: c_char ; 6usize] , pub _sdiff5 : :: std :: os :: raw :: c_char , pub fwdvl : [:: std :: os :: raw :: c_char ; 12usize] , pub _fwdvl : :: std :: os :: raw :: c_char , pub ftradmdcha : [:: std :: os :: raw :: c_char ; 12usize] , pub _ftradmdcha : :: std :: os :: raw :: c_char , pub ftradmddiff : [:: std :: os :: raw :: c_char ; 6usize] , pub _ftradmddiff : :: std :: os :: raw :: c_char , pub fwsvl : [:: std :: os :: raw :: c_char ; 12usize] , pub _fwsvl : :: std :: os :: raw :: c_char , pub ftradmscha : [:: std :: os :: raw :: c_char ; 12usize] , pub _ftradmscha : :: std :: os :: raw :: c_char , pub ftradmsdiff : [:: std :: os :: raw :: c_char ; 6usize] , pub _ftradmsdiff : :: std :: os :: raw :: c_char , pub upname2 : [:: std :: os :: raw :: c_char ; 20usize] , pub _upname2 : :: std :: os :: raw :: c_char , pub upcode2 : [:: std :: os :: raw :: c_char ; 3usize] , pub _upcode2 : :: std :: os :: raw :: c_char , pub upprice2 : [:: std :: os :: raw :: c_char ; 7usize] , pub _upprice2 : :: std :: os :: raw :: c_char , pub jnilnav : [:: std :: os :: raw :: c_char ; 8usize] , pub _jnilnav : :: std :: os :: raw :: c_char , pub jnilnavsign : [:: std :: os :: raw :: c_char ; 1usize] , pub _jnilnavsign : :: std :: os :: raw :: c_char , pub jnilnavchange : [:: std :: os :: raw :: c_char ; 8usize] , pub _jnilnavchange : :: std :: os :: raw :: c_char , pub jnilnavdiff : [:: std :: os :: raw :: c_char ; 6usize] , pub _jnilnavdiff : :: std :: os :: raw :: c_char , pub etftotcap : [:: std :: os :: raw :: c_char ; 12usize] , pub _etftotcap : :: std :: os :: raw :: c_char , pub spread : [:: std :: os :: raw :: c_char ; 6usize] , pub _spread : :: std :: os :: raw :: c_char , pub leverage : [:: std :: os :: raw :: c_char ; 2usize] , pub _leverage : :: std :: os :: raw :: c_char , pub taxgubun : [:: std :: os :: raw :: c_char ; 1usize] , pub _taxgubun : :: std :: os :: raw :: c_char , pub opcom_nmk : [:: std :: os :: raw :: c_char ; 20usize] , pub _opcom_nmk : :: std :: os :: raw :: c_char , pub lp_nm1 : [:: std :: os :: raw :: c_char ; 20usize] , pub _lp_nm1 : :: std :: os :: raw :: c_char , pub lp_nm2 : [:: std :: os :: raw :: c_char ; 20usize] , pub _lp_nm2 : :: std :: os :: raw :: c_char , pub lp_nm3 : [:: std :: os :: raw :: c_char ; 20usize] , pub _lp_nm3 : :: std :: os :: raw :: c_char , pub lp_nm4 : [:: std :: os :: raw :: c_char ; 20usize] , pub _lp_nm4 : :: std :: os :: raw :: c_char , pub lp_nm5 : [:: std :: os :: raw :: c_char ; 20usize] , pub _lp_nm5 : :: std :: os :: raw :: c_char , pub etf_cp : [:: std :: os :: raw :: c_char ; 10usize] , pub _etf_cp : :: std :: os :: raw :: c_char , pub etf_kind : [:: std :: os :: raw :: c_char ; 10usize] , pub _etf_kind : :: std :: os :: raw :: c_char , pub vi_gubun : [:: std :: os :: raw :: c_char ; 10usize] , pub _vi_gubun : :: std :: os :: raw :: c_char , pub etn_kind_cd : [:: std :: os :: raw :: c_char ; 20usize] , pub _etn_kind_cd : :: std :: os :: raw :: c_char , pub lastymd : [:: std :: os :: raw :: c_char ; 8usize] , pub _lastymd : :: std :: os :: raw :: c_char , pub payday : [:: std :: os :: raw :: c_char ; 8usize] , pub _payday : :: std :: os :: raw :: c_char , pub lastdate : [:: std :: os :: raw :: c_char ; 8usize] , pub _lastdate : :: std :: os :: raw :: c_char , pub issuernmk : [:: std :: os :: raw :: c_char ; 20usize] , pub _issuernmk : :: std :: os :: raw :: c_char , pub last_sdate : [:: std :: os :: raw :: c_char ; 8usize] , pub _last_sdate : :: std :: os :: raw :: c_char , pub last_edate : [:: std :: os :: raw :: c_char ; 8usize] , pub _last_edate : :: std :: os :: raw :: c_char , pub lp_holdvol : [:: std :: os :: raw :: c_char ; 12usize] , pub _lp_holdvol : :: std :: os :: raw :: c_char , pub listdate : [:: std :: os :: raw :: c_char ; 8usize] , pub _listdate : :: std :: os :: raw :: c_char , pub etp_gb : [:: std :: os :: raw :: c_char ; 1usize] , pub _etp_gb : :: std :: os :: raw :: c_char , pub etn_elback_yn : [:: std :: os :: raw :: c_char ; 1usize] , pub _etn_elback_yn : :: std :: os :: raw :: c_char , pub settletype : [:: std :: os :: raw :: c_char ; 2usize] , pub _settletype : :: std :: os :: raw :: c_char , pub idx_asset_class1 : [:: std :: os :: raw :: c_char ; 2usize] , pub _idx_asset_class1 : :: std :: os :: raw :: c_char , pub ty_text : [:: std :: os :: raw :: c_char ; 8usize] , pub _ty_text : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T1901OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < T1901OutBlock > () , 1231usize , concat ! ("Size of: " , stringify ! (T1901OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T1901OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T1901OutBlock))) ; fn test_field_hname () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . hname) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (hname))) ; } test_field_hname () ; fn test_field__hname () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _hname) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_hname))) ; } test_field__hname () ; fn test_field_price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . price) as usize - ptr as usize } , 21usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (price))) ; } test_field_price () ; fn test_field__price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _price) as usize - ptr as usize } , 29usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_price))) ; } test_field__price () ; fn test_field_sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sign) as usize - ptr as usize } , 30usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (sign))) ; } test_field_sign () ; fn test_field__sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sign) as usize - ptr as usize } , 31usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_sign))) ; } test_field__sign () ; fn test_field_change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . change) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (change))) ; } test_field_change () ; fn test_field__change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _change) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_change))) ; } test_field__change () ; fn test_field_diff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . diff) as usize - ptr as usize } , 41usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (diff))) ; } test_field_diff () ; fn test_field__diff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _diff) as usize - ptr as usize } , 47usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_diff))) ; } test_field__diff () ; fn test_field_volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . volume) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (volume))) ; } test_field_volume () ; fn test_field__volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _volume) as usize - ptr as usize } , 60usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_volume))) ; } test_field__volume () ; fn test_field_recprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . recprice) as usize - ptr as usize } , 61usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (recprice))) ; } test_field_recprice () ; fn test_field__recprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _recprice) as usize - ptr as usize } , 69usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_recprice))) ; } test_field__recprice () ; fn test_field_avg () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . avg) as usize - ptr as usize } , 70usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (avg))) ; } test_field_avg () ; fn test_field__avg () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _avg) as usize - ptr as usize } , 78usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_avg))) ; } test_field__avg () ; fn test_field_uplmtprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . uplmtprice) as usize - ptr as usize } , 79usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (uplmtprice))) ; } test_field_uplmtprice () ; fn test_field__uplmtprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _uplmtprice) as usize - ptr as usize } , 87usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_uplmtprice))) ; } test_field__uplmtprice () ; fn test_field_dnlmtprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dnlmtprice) as usize - ptr as usize } , 88usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (dnlmtprice))) ; } test_field_dnlmtprice () ; fn test_field__dnlmtprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dnlmtprice) as usize - ptr as usize } , 96usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_dnlmtprice))) ; } test_field__dnlmtprice () ; fn test_field_jnilvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jnilvolume) as usize - ptr as usize } , 97usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (jnilvolume))) ; } test_field_jnilvolume () ; fn test_field__jnilvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jnilvolume) as usize - ptr as usize } , 109usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_jnilvolume))) ; } test_field__jnilvolume () ; fn test_field_volumediff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . volumediff) as usize - ptr as usize } , 110usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (volumediff))) ; } test_field_volumediff () ; fn test_field__volumediff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _volumediff) as usize - ptr as usize } , 122usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_volumediff))) ; } test_field__volumediff () ; fn test_field_open () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . open) as usize - ptr as usize } , 123usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (open))) ; } test_field_open () ; fn test_field__open () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _open) as usize - ptr as usize } , 131usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_open))) ; } test_field__open () ; fn test_field_opentime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . opentime) as usize - ptr as usize } , 132usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (opentime))) ; } test_field_opentime () ; fn test_field__opentime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _opentime) as usize - ptr as usize } , 138usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_opentime))) ; } test_field__opentime () ; fn test_field_high () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . high) as usize - ptr as usize } , 139usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (high))) ; } test_field_high () ; fn test_field__high () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _high) as usize - ptr as usize } , 147usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_high))) ; } test_field__high () ; fn test_field_hightime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . hightime) as usize - ptr as usize } , 148usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (hightime))) ; } test_field_hightime () ; fn test_field__hightime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _hightime) as usize - ptr as usize } , 154usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_hightime))) ; } test_field__hightime () ; fn test_field_low () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . low) as usize - ptr as usize } , 155usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (low))) ; } test_field_low () ; fn test_field__low () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _low) as usize - ptr as usize } , 163usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_low))) ; } test_field__low () ; fn test_field_lowtime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lowtime) as usize - ptr as usize } , 164usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (lowtime))) ; } test_field_lowtime () ; fn test_field__lowtime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lowtime) as usize - ptr as usize } , 170usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_lowtime))) ; } test_field__lowtime () ; fn test_field_high52w () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . high52w) as usize - ptr as usize } , 171usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (high52w))) ; } test_field_high52w () ; fn test_field__high52w () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _high52w) as usize - ptr as usize } , 179usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_high52w))) ; } test_field__high52w () ; fn test_field_high52wdate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . high52wdate) as usize - ptr as usize } , 180usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (high52wdate))) ; } test_field_high52wdate () ; fn test_field__high52wdate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _high52wdate) as usize - ptr as usize } , 188usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_high52wdate))) ; } test_field__high52wdate () ; fn test_field_low52w () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . low52w) as usize - ptr as usize } , 189usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (low52w))) ; } test_field_low52w () ; fn test_field__low52w () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _low52w) as usize - ptr as usize } , 197usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_low52w))) ; } test_field__low52w () ; fn test_field_low52wdate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . low52wdate) as usize - ptr as usize } , 198usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (low52wdate))) ; } test_field_low52wdate () ; fn test_field__low52wdate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _low52wdate) as usize - ptr as usize } , 206usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_low52wdate))) ; } test_field__low52wdate () ; fn test_field_exhratio () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . exhratio) as usize - ptr as usize } , 207usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (exhratio))) ; } test_field_exhratio () ; fn test_field__exhratio () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _exhratio) as usize - ptr as usize } , 213usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_exhratio))) ; } test_field__exhratio () ; fn test_field_flmtvol () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . flmtvol) as usize - ptr as usize } , 214usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (flmtvol))) ; } test_field_flmtvol () ; fn test_field__flmtvol () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _flmtvol) as usize - ptr as usize } , 226usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_flmtvol))) ; } test_field__flmtvol () ; fn test_field_per () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . per) as usize - ptr as usize } , 227usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (per))) ; } test_field_per () ; fn test_field__per () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _per) as usize - ptr as usize } , 233usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_per))) ; } test_field__per () ; fn test_field_listing () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . listing) as usize - ptr as usize } , 234usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (listing))) ; } test_field_listing () ; fn test_field__listing () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _listing) as usize - ptr as usize } , 246usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_listing))) ; } test_field__listing () ; fn test_field_jkrate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jkrate) as usize - ptr as usize } , 247usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (jkrate))) ; } test_field_jkrate () ; fn test_field__jkrate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jkrate) as usize - ptr as usize } , 255usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_jkrate))) ; } test_field__jkrate () ; fn test_field_vol () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . vol) as usize - ptr as usize } , 256usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (vol))) ; } test_field_vol () ; fn test_field__vol () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _vol) as usize - ptr as usize } , 262usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_vol))) ; } test_field__vol () ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 263usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 269usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; fn test_field_value () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . value) as usize - ptr as usize } , 270usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (value))) ; } test_field_value () ; fn test_field__value () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _value) as usize - ptr as usize } , 282usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_value))) ; } test_field__value () ; fn test_field_highyear () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . highyear) as usize - ptr as usize } , 283usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (highyear))) ; } test_field_highyear () ; fn test_field__highyear () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _highyear) as usize - ptr as usize } , 291usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_highyear))) ; } test_field__highyear () ; fn test_field_highyeardate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . highyeardate) as usize - ptr as usize } , 292usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (highyeardate))) ; } test_field_highyeardate () ; fn test_field__highyeardate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _highyeardate) as usize - ptr as usize } , 300usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_highyeardate))) ; } test_field__highyeardate () ; fn test_field_lowyear () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lowyear) as usize - ptr as usize } , 301usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (lowyear))) ; } test_field_lowyear () ; fn test_field__lowyear () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lowyear) as usize - ptr as usize } , 309usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_lowyear))) ; } test_field__lowyear () ; fn test_field_lowyeardate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lowyeardate) as usize - ptr as usize } , 310usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (lowyeardate))) ; } test_field_lowyeardate () ; fn test_field__lowyeardate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lowyeardate) as usize - ptr as usize } , 318usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_lowyeardate))) ; } test_field__lowyeardate () ; fn test_field_upname () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . upname) as usize - ptr as usize } , 319usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (upname))) ; } test_field_upname () ; fn test_field__upname () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _upname) as usize - ptr as usize } , 339usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_upname))) ; } test_field__upname () ; fn test_field_upcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . upcode) as usize - ptr as usize } , 340usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (upcode))) ; } test_field_upcode () ; fn test_field__upcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _upcode) as usize - ptr as usize } , 343usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_upcode))) ; } test_field__upcode () ; fn test_field_upprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . upprice) as usize - ptr as usize } , 344usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (upprice))) ; } test_field_upprice () ; fn test_field__upprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _upprice) as usize - ptr as usize } , 351usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_upprice))) ; } test_field__upprice () ; fn test_field_upsign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . upsign) as usize - ptr as usize } , 352usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (upsign))) ; } test_field_upsign () ; fn test_field__upsign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _upsign) as usize - ptr as usize } , 353usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_upsign))) ; } test_field__upsign () ; fn test_field_upchange () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . upchange) as usize - ptr as usize } , 354usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (upchange))) ; } test_field_upchange () ; fn test_field__upchange () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _upchange) as usize - ptr as usize } , 360usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_upchange))) ; } test_field__upchange () ; fn test_field_updiff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . updiff) as usize - ptr as usize } , 361usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (updiff))) ; } test_field_updiff () ; fn test_field__updiff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _updiff) as usize - ptr as usize } , 367usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_updiff))) ; } test_field__updiff () ; fn test_field_futname () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . futname) as usize - ptr as usize } , 368usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (futname))) ; } test_field_futname () ; fn test_field__futname () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _futname) as usize - ptr as usize } , 388usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_futname))) ; } test_field__futname () ; fn test_field_futcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . futcode) as usize - ptr as usize } , 389usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (futcode))) ; } test_field_futcode () ; fn test_field__futcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _futcode) as usize - ptr as usize } , 397usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_futcode))) ; } test_field__futcode () ; fn test_field_futprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . futprice) as usize - ptr as usize } , 398usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (futprice))) ; } test_field_futprice () ; fn test_field__futprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _futprice) as usize - ptr as usize } , 404usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_futprice))) ; } test_field__futprice () ; fn test_field_futsign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . futsign) as usize - ptr as usize } , 405usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (futsign))) ; } test_field_futsign () ; fn test_field__futsign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _futsign) as usize - ptr as usize } , 406usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_futsign))) ; } test_field__futsign () ; fn test_field_futchange () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . futchange) as usize - ptr as usize } , 407usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (futchange))) ; } test_field_futchange () ; fn test_field__futchange () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _futchange) as usize - ptr as usize } , 413usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_futchange))) ; } test_field__futchange () ; fn test_field_futdiff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . futdiff) as usize - ptr as usize } , 414usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (futdiff))) ; } test_field_futdiff () ; fn test_field__futdiff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _futdiff) as usize - ptr as usize } , 420usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_futdiff))) ; } test_field__futdiff () ; fn test_field_nav () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . nav) as usize - ptr as usize } , 421usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (nav))) ; } test_field_nav () ; fn test_field__nav () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _nav) as usize - ptr as usize } , 429usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_nav))) ; } test_field__nav () ; fn test_field_navsign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . navsign) as usize - ptr as usize } , 430usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (navsign))) ; } test_field_navsign () ; fn test_field__navsign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _navsign) as usize - ptr as usize } , 431usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_navsign))) ; } test_field__navsign () ; fn test_field_navchange () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . navchange) as usize - ptr as usize } , 432usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (navchange))) ; } test_field_navchange () ; fn test_field__navchange () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _navchange) as usize - ptr as usize } , 440usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_navchange))) ; } test_field__navchange () ; fn test_field_navdiff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . navdiff) as usize - ptr as usize } , 441usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (navdiff))) ; } test_field_navdiff () ; fn test_field__navdiff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _navdiff) as usize - ptr as usize } , 447usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_navdiff))) ; } test_field__navdiff () ; fn test_field_cocrate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cocrate) as usize - ptr as usize } , 448usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (cocrate))) ; } test_field_cocrate () ; fn test_field__cocrate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cocrate) as usize - ptr as usize } , 454usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_cocrate))) ; } test_field__cocrate () ; fn test_field_kasis () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . kasis) as usize - ptr as usize } , 455usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (kasis))) ; } test_field_kasis () ; fn test_field__kasis () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _kasis) as usize - ptr as usize } , 461usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_kasis))) ; } test_field__kasis () ; fn test_field_subprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . subprice) as usize - ptr as usize } , 462usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (subprice))) ; } test_field_subprice () ; fn test_field__subprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _subprice) as usize - ptr as usize } , 472usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_subprice))) ; } test_field__subprice () ; fn test_field_offerno1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerno1) as usize - ptr as usize } , 473usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (offerno1))) ; } test_field_offerno1 () ; fn test_field__offerno1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerno1) as usize - ptr as usize } , 479usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_offerno1))) ; } test_field__offerno1 () ; fn test_field_bidno1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidno1) as usize - ptr as usize } , 480usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (bidno1))) ; } test_field_bidno1 () ; fn test_field__bidno1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidno1) as usize - ptr as usize } , 486usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_bidno1))) ; } test_field__bidno1 () ; fn test_field_dvol1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dvol1) as usize - ptr as usize } , 487usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (dvol1))) ; } test_field_dvol1 () ; fn test_field__dvol1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dvol1) as usize - ptr as usize } , 495usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_dvol1))) ; } test_field__dvol1 () ; fn test_field_svol1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . svol1) as usize - ptr as usize } , 496usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (svol1))) ; } test_field_svol1 () ; fn test_field__svol1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _svol1) as usize - ptr as usize } , 504usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_svol1))) ; } test_field__svol1 () ; fn test_field_dcha1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dcha1) as usize - ptr as usize } , 505usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (dcha1))) ; } test_field_dcha1 () ; fn test_field__dcha1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dcha1) as usize - ptr as usize } , 513usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_dcha1))) ; } test_field__dcha1 () ; fn test_field_scha1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . scha1) as usize - ptr as usize } , 514usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (scha1))) ; } test_field_scha1 () ; fn test_field__scha1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _scha1) as usize - ptr as usize } , 522usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_scha1))) ; } test_field__scha1 () ; fn test_field_ddiff1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ddiff1) as usize - ptr as usize } , 523usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (ddiff1))) ; } test_field_ddiff1 () ; fn test_field__ddiff1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ddiff1) as usize - ptr as usize } , 529usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_ddiff1))) ; } test_field__ddiff1 () ; fn test_field_sdiff1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sdiff1) as usize - ptr as usize } , 530usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (sdiff1))) ; } test_field_sdiff1 () ; fn test_field__sdiff1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sdiff1) as usize - ptr as usize } , 536usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_sdiff1))) ; } test_field__sdiff1 () ; fn test_field_offerno2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerno2) as usize - ptr as usize } , 537usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (offerno2))) ; } test_field_offerno2 () ; fn test_field__offerno2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerno2) as usize - ptr as usize } , 543usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_offerno2))) ; } test_field__offerno2 () ; fn test_field_bidno2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidno2) as usize - ptr as usize } , 544usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (bidno2))) ; } test_field_bidno2 () ; fn test_field__bidno2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidno2) as usize - ptr as usize } , 550usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_bidno2))) ; } test_field__bidno2 () ; fn test_field_dvol2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dvol2) as usize - ptr as usize } , 551usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (dvol2))) ; } test_field_dvol2 () ; fn test_field__dvol2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dvol2) as usize - ptr as usize } , 559usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_dvol2))) ; } test_field__dvol2 () ; fn test_field_svol2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . svol2) as usize - ptr as usize } , 560usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (svol2))) ; } test_field_svol2 () ; fn test_field__svol2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _svol2) as usize - ptr as usize } , 568usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_svol2))) ; } test_field__svol2 () ; fn test_field_dcha2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dcha2) as usize - ptr as usize } , 569usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (dcha2))) ; } test_field_dcha2 () ; fn test_field__dcha2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dcha2) as usize - ptr as usize } , 577usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_dcha2))) ; } test_field__dcha2 () ; fn test_field_scha2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . scha2) as usize - ptr as usize } , 578usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (scha2))) ; } test_field_scha2 () ; fn test_field__scha2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _scha2) as usize - ptr as usize } , 586usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_scha2))) ; } test_field__scha2 () ; fn test_field_ddiff2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ddiff2) as usize - ptr as usize } , 587usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (ddiff2))) ; } test_field_ddiff2 () ; fn test_field__ddiff2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ddiff2) as usize - ptr as usize } , 593usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_ddiff2))) ; } test_field__ddiff2 () ; fn test_field_sdiff2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sdiff2) as usize - ptr as usize } , 594usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (sdiff2))) ; } test_field_sdiff2 () ; fn test_field__sdiff2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sdiff2) as usize - ptr as usize } , 600usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_sdiff2))) ; } test_field__sdiff2 () ; fn test_field_offerno3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerno3) as usize - ptr as usize } , 601usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (offerno3))) ; } test_field_offerno3 () ; fn test_field__offerno3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerno3) as usize - ptr as usize } , 607usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_offerno3))) ; } test_field__offerno3 () ; fn test_field_bidno3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidno3) as usize - ptr as usize } , 608usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (bidno3))) ; } test_field_bidno3 () ; fn test_field__bidno3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidno3) as usize - ptr as usize } , 614usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_bidno3))) ; } test_field__bidno3 () ; fn test_field_dvol3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dvol3) as usize - ptr as usize } , 615usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (dvol3))) ; } test_field_dvol3 () ; fn test_field__dvol3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dvol3) as usize - ptr as usize } , 623usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_dvol3))) ; } test_field__dvol3 () ; fn test_field_svol3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . svol3) as usize - ptr as usize } , 624usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (svol3))) ; } test_field_svol3 () ; fn test_field__svol3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _svol3) as usize - ptr as usize } , 632usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_svol3))) ; } test_field__svol3 () ; fn test_field_dcha3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dcha3) as usize - ptr as usize } , 633usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (dcha3))) ; } test_field_dcha3 () ; fn test_field__dcha3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dcha3) as usize - ptr as usize } , 641usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_dcha3))) ; } test_field__dcha3 () ; fn test_field_scha3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . scha3) as usize - ptr as usize } , 642usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (scha3))) ; } test_field_scha3 () ; fn test_field__scha3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _scha3) as usize - ptr as usize } , 650usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_scha3))) ; } test_field__scha3 () ; fn test_field_ddiff3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ddiff3) as usize - ptr as usize } , 651usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (ddiff3))) ; } test_field_ddiff3 () ; fn test_field__ddiff3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ddiff3) as usize - ptr as usize } , 657usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_ddiff3))) ; } test_field__ddiff3 () ; fn test_field_sdiff3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sdiff3) as usize - ptr as usize } , 658usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (sdiff3))) ; } test_field_sdiff3 () ; fn test_field__sdiff3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sdiff3) as usize - ptr as usize } , 664usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_sdiff3))) ; } test_field__sdiff3 () ; fn test_field_offerno4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerno4) as usize - ptr as usize } , 665usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (offerno4))) ; } test_field_offerno4 () ; fn test_field__offerno4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerno4) as usize - ptr as usize } , 671usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_offerno4))) ; } test_field__offerno4 () ; fn test_field_bidno4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidno4) as usize - ptr as usize } , 672usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (bidno4))) ; } test_field_bidno4 () ; fn test_field__bidno4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidno4) as usize - ptr as usize } , 678usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_bidno4))) ; } test_field__bidno4 () ; fn test_field_dvol4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dvol4) as usize - ptr as usize } , 679usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (dvol4))) ; } test_field_dvol4 () ; fn test_field__dvol4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dvol4) as usize - ptr as usize } , 687usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_dvol4))) ; } test_field__dvol4 () ; fn test_field_svol4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . svol4) as usize - ptr as usize } , 688usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (svol4))) ; } test_field_svol4 () ; fn test_field__svol4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _svol4) as usize - ptr as usize } , 696usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_svol4))) ; } test_field__svol4 () ; fn test_field_dcha4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dcha4) as usize - ptr as usize } , 697usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (dcha4))) ; } test_field_dcha4 () ; fn test_field__dcha4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dcha4) as usize - ptr as usize } , 705usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_dcha4))) ; } test_field__dcha4 () ; fn test_field_scha4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . scha4) as usize - ptr as usize } , 706usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (scha4))) ; } test_field_scha4 () ; fn test_field__scha4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _scha4) as usize - ptr as usize } , 714usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_scha4))) ; } test_field__scha4 () ; fn test_field_ddiff4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ddiff4) as usize - ptr as usize } , 715usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (ddiff4))) ; } test_field_ddiff4 () ; fn test_field__ddiff4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ddiff4) as usize - ptr as usize } , 721usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_ddiff4))) ; } test_field__ddiff4 () ; fn test_field_sdiff4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sdiff4) as usize - ptr as usize } , 722usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (sdiff4))) ; } test_field_sdiff4 () ; fn test_field__sdiff4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sdiff4) as usize - ptr as usize } , 728usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_sdiff4))) ; } test_field__sdiff4 () ; fn test_field_offerno5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerno5) as usize - ptr as usize } , 729usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (offerno5))) ; } test_field_offerno5 () ; fn test_field__offerno5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerno5) as usize - ptr as usize } , 735usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_offerno5))) ; } test_field__offerno5 () ; fn test_field_bidno5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidno5) as usize - ptr as usize } , 736usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (bidno5))) ; } test_field_bidno5 () ; fn test_field__bidno5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidno5) as usize - ptr as usize } , 742usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_bidno5))) ; } test_field__bidno5 () ; fn test_field_dvol5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dvol5) as usize - ptr as usize } , 743usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (dvol5))) ; } test_field_dvol5 () ; fn test_field__dvol5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dvol5) as usize - ptr as usize } , 751usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_dvol5))) ; } test_field__dvol5 () ; fn test_field_svol5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . svol5) as usize - ptr as usize } , 752usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (svol5))) ; } test_field_svol5 () ; fn test_field__svol5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _svol5) as usize - ptr as usize } , 760usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_svol5))) ; } test_field__svol5 () ; fn test_field_dcha5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dcha5) as usize - ptr as usize } , 761usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (dcha5))) ; } test_field_dcha5 () ; fn test_field__dcha5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dcha5) as usize - ptr as usize } , 769usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_dcha5))) ; } test_field__dcha5 () ; fn test_field_scha5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . scha5) as usize - ptr as usize } , 770usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (scha5))) ; } test_field_scha5 () ; fn test_field__scha5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _scha5) as usize - ptr as usize } , 778usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_scha5))) ; } test_field__scha5 () ; fn test_field_ddiff5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ddiff5) as usize - ptr as usize } , 779usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (ddiff5))) ; } test_field_ddiff5 () ; fn test_field__ddiff5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ddiff5) as usize - ptr as usize } , 785usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_ddiff5))) ; } test_field__ddiff5 () ; fn test_field_sdiff5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sdiff5) as usize - ptr as usize } , 786usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (sdiff5))) ; } test_field_sdiff5 () ; fn test_field__sdiff5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sdiff5) as usize - ptr as usize } , 792usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_sdiff5))) ; } test_field__sdiff5 () ; fn test_field_fwdvl () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . fwdvl) as usize - ptr as usize } , 793usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (fwdvl))) ; } test_field_fwdvl () ; fn test_field__fwdvl () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _fwdvl) as usize - ptr as usize } , 805usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_fwdvl))) ; } test_field__fwdvl () ; fn test_field_ftradmdcha () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ftradmdcha) as usize - ptr as usize } , 806usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (ftradmdcha))) ; } test_field_ftradmdcha () ; fn test_field__ftradmdcha () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ftradmdcha) as usize - ptr as usize } , 818usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_ftradmdcha))) ; } test_field__ftradmdcha () ; fn test_field_ftradmddiff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ftradmddiff) as usize - ptr as usize } , 819usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (ftradmddiff))) ; } test_field_ftradmddiff () ; fn test_field__ftradmddiff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ftradmddiff) as usize - ptr as usize } , 825usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_ftradmddiff))) ; } test_field__ftradmddiff () ; fn test_field_fwsvl () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . fwsvl) as usize - ptr as usize } , 826usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (fwsvl))) ; } test_field_fwsvl () ; fn test_field__fwsvl () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _fwsvl) as usize - ptr as usize } , 838usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_fwsvl))) ; } test_field__fwsvl () ; fn test_field_ftradmscha () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ftradmscha) as usize - ptr as usize } , 839usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (ftradmscha))) ; } test_field_ftradmscha () ; fn test_field__ftradmscha () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ftradmscha) as usize - ptr as usize } , 851usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_ftradmscha))) ; } test_field__ftradmscha () ; fn test_field_ftradmsdiff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ftradmsdiff) as usize - ptr as usize } , 852usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (ftradmsdiff))) ; } test_field_ftradmsdiff () ; fn test_field__ftradmsdiff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ftradmsdiff) as usize - ptr as usize } , 858usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_ftradmsdiff))) ; } test_field__ftradmsdiff () ; fn test_field_upname2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . upname2) as usize - ptr as usize } , 859usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (upname2))) ; } test_field_upname2 () ; fn test_field__upname2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _upname2) as usize - ptr as usize } , 879usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_upname2))) ; } test_field__upname2 () ; fn test_field_upcode2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . upcode2) as usize - ptr as usize } , 880usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (upcode2))) ; } test_field_upcode2 () ; fn test_field__upcode2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _upcode2) as usize - ptr as usize } , 883usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_upcode2))) ; } test_field__upcode2 () ; fn test_field_upprice2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . upprice2) as usize - ptr as usize } , 884usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (upprice2))) ; } test_field_upprice2 () ; fn test_field__upprice2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _upprice2) as usize - ptr as usize } , 891usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_upprice2))) ; } test_field__upprice2 () ; fn test_field_jnilnav () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jnilnav) as usize - ptr as usize } , 892usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (jnilnav))) ; } test_field_jnilnav () ; fn test_field__jnilnav () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jnilnav) as usize - ptr as usize } , 900usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_jnilnav))) ; } test_field__jnilnav () ; fn test_field_jnilnavsign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jnilnavsign) as usize - ptr as usize } , 901usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (jnilnavsign))) ; } test_field_jnilnavsign () ; fn test_field__jnilnavsign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jnilnavsign) as usize - ptr as usize } , 902usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_jnilnavsign))) ; } test_field__jnilnavsign () ; fn test_field_jnilnavchange () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jnilnavchange) as usize - ptr as usize } , 903usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (jnilnavchange))) ; } test_field_jnilnavchange () ; fn test_field__jnilnavchange () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jnilnavchange) as usize - ptr as usize } , 911usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_jnilnavchange))) ; } test_field__jnilnavchange () ; fn test_field_jnilnavdiff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jnilnavdiff) as usize - ptr as usize } , 912usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (jnilnavdiff))) ; } test_field_jnilnavdiff () ; fn test_field__jnilnavdiff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jnilnavdiff) as usize - ptr as usize } , 918usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_jnilnavdiff))) ; } test_field__jnilnavdiff () ; fn test_field_etftotcap () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . etftotcap) as usize - ptr as usize } , 919usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (etftotcap))) ; } test_field_etftotcap () ; fn test_field__etftotcap () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _etftotcap) as usize - ptr as usize } , 931usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_etftotcap))) ; } test_field__etftotcap () ; fn test_field_spread () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . spread) as usize - ptr as usize } , 932usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (spread))) ; } test_field_spread () ; fn test_field__spread () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _spread) as usize - ptr as usize } , 938usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_spread))) ; } test_field__spread () ; fn test_field_leverage () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . leverage) as usize - ptr as usize } , 939usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (leverage))) ; } test_field_leverage () ; fn test_field__leverage () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _leverage) as usize - ptr as usize } , 941usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_leverage))) ; } test_field__leverage () ; fn test_field_taxgubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . taxgubun) as usize - ptr as usize } , 942usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (taxgubun))) ; } test_field_taxgubun () ; fn test_field__taxgubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _taxgubun) as usize - ptr as usize } , 943usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_taxgubun))) ; } test_field__taxgubun () ; fn test_field_opcom_nmk () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . opcom_nmk) as usize - ptr as usize } , 944usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (opcom_nmk))) ; } test_field_opcom_nmk () ; fn test_field__opcom_nmk () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _opcom_nmk) as usize - ptr as usize } , 964usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_opcom_nmk))) ; } test_field__opcom_nmk () ; fn test_field_lp_nm1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lp_nm1) as usize - ptr as usize } , 965usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (lp_nm1))) ; } test_field_lp_nm1 () ; fn test_field__lp_nm1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lp_nm1) as usize - ptr as usize } , 985usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_lp_nm1))) ; } test_field__lp_nm1 () ; fn test_field_lp_nm2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lp_nm2) as usize - ptr as usize } , 986usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (lp_nm2))) ; } test_field_lp_nm2 () ; fn test_field__lp_nm2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lp_nm2) as usize - ptr as usize } , 1006usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_lp_nm2))) ; } test_field__lp_nm2 () ; fn test_field_lp_nm3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lp_nm3) as usize - ptr as usize } , 1007usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (lp_nm3))) ; } test_field_lp_nm3 () ; fn test_field__lp_nm3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lp_nm3) as usize - ptr as usize } , 1027usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_lp_nm3))) ; } test_field__lp_nm3 () ; fn test_field_lp_nm4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lp_nm4) as usize - ptr as usize } , 1028usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (lp_nm4))) ; } test_field_lp_nm4 () ; fn test_field__lp_nm4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lp_nm4) as usize - ptr as usize } , 1048usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_lp_nm4))) ; } test_field__lp_nm4 () ; fn test_field_lp_nm5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lp_nm5) as usize - ptr as usize } , 1049usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (lp_nm5))) ; } test_field_lp_nm5 () ; fn test_field__lp_nm5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lp_nm5) as usize - ptr as usize } , 1069usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_lp_nm5))) ; } test_field__lp_nm5 () ; fn test_field_etf_cp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . etf_cp) as usize - ptr as usize } , 1070usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (etf_cp))) ; } test_field_etf_cp () ; fn test_field__etf_cp () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _etf_cp) as usize - ptr as usize } , 1080usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_etf_cp))) ; } test_field__etf_cp () ; fn test_field_etf_kind () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . etf_kind) as usize - ptr as usize } , 1081usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (etf_kind))) ; } test_field_etf_kind () ; fn test_field__etf_kind () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _etf_kind) as usize - ptr as usize } , 1091usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_etf_kind))) ; } test_field__etf_kind () ; fn test_field_vi_gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . vi_gubun) as usize - ptr as usize } , 1092usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (vi_gubun))) ; } test_field_vi_gubun () ; fn test_field__vi_gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _vi_gubun) as usize - ptr as usize } , 1102usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_vi_gubun))) ; } test_field__vi_gubun () ; fn test_field_etn_kind_cd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . etn_kind_cd) as usize - ptr as usize } , 1103usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (etn_kind_cd))) ; } test_field_etn_kind_cd () ; fn test_field__etn_kind_cd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _etn_kind_cd) as usize - ptr as usize } , 1123usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_etn_kind_cd))) ; } test_field__etn_kind_cd () ; fn test_field_lastymd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lastymd) as usize - ptr as usize } , 1124usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (lastymd))) ; } test_field_lastymd () ; fn test_field__lastymd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lastymd) as usize - ptr as usize } , 1132usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_lastymd))) ; } test_field__lastymd () ; fn test_field_payday () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . payday) as usize - ptr as usize } , 1133usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (payday))) ; } test_field_payday () ; fn test_field__payday () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _payday) as usize - ptr as usize } , 1141usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_payday))) ; } test_field__payday () ; fn test_field_lastdate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lastdate) as usize - ptr as usize } , 1142usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (lastdate))) ; } test_field_lastdate () ; fn test_field__lastdate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lastdate) as usize - ptr as usize } , 1150usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_lastdate))) ; } test_field__lastdate () ; fn test_field_issuernmk () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . issuernmk) as usize - ptr as usize } , 1151usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (issuernmk))) ; } test_field_issuernmk () ; fn test_field__issuernmk () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _issuernmk) as usize - ptr as usize } , 1171usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_issuernmk))) ; } test_field__issuernmk () ; fn test_field_last_sdate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . last_sdate) as usize - ptr as usize } , 1172usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (last_sdate))) ; } test_field_last_sdate () ; fn test_field__last_sdate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _last_sdate) as usize - ptr as usize } , 1180usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_last_sdate))) ; } test_field__last_sdate () ; fn test_field_last_edate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . last_edate) as usize - ptr as usize } , 1181usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (last_edate))) ; } test_field_last_edate () ; fn test_field__last_edate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _last_edate) as usize - ptr as usize } , 1189usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_last_edate))) ; } test_field__last_edate () ; fn test_field_lp_holdvol () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lp_holdvol) as usize - ptr as usize } , 1190usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (lp_holdvol))) ; } test_field_lp_holdvol () ; fn test_field__lp_holdvol () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lp_holdvol) as usize - ptr as usize } , 1202usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_lp_holdvol))) ; } test_field__lp_holdvol () ; fn test_field_listdate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . listdate) as usize - ptr as usize } , 1203usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (listdate))) ; } test_field_listdate () ; fn test_field__listdate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _listdate) as usize - ptr as usize } , 1211usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_listdate))) ; } test_field__listdate () ; fn test_field_etp_gb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . etp_gb) as usize - ptr as usize } , 1212usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (etp_gb))) ; } test_field_etp_gb () ; fn test_field__etp_gb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _etp_gb) as usize - ptr as usize } , 1213usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_etp_gb))) ; } test_field__etp_gb () ; fn test_field_etn_elback_yn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . etn_elback_yn) as usize - ptr as usize } , 1214usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (etn_elback_yn))) ; } test_field_etn_elback_yn () ; fn test_field__etn_elback_yn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _etn_elback_yn) as usize - ptr as usize } , 1215usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_etn_elback_yn))) ; } test_field__etn_elback_yn () ; fn test_field_settletype () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . settletype) as usize - ptr as usize } , 1216usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (settletype))) ; } test_field_settletype () ; fn test_field__settletype () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _settletype) as usize - ptr as usize } , 1218usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_settletype))) ; } test_field__settletype () ; fn test_field_idx_asset_class1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . idx_asset_class1) as usize - ptr as usize } , 1219usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (idx_asset_class1))) ; } test_field_idx_asset_class1 () ; fn test_field__idx_asset_class1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _idx_asset_class1) as usize - ptr as usize } , 1221usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_idx_asset_class1))) ; } test_field__idx_asset_class1 () ; fn test_field_ty_text () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ty_text) as usize - ptr as usize } , 1222usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (ty_text))) ; } test_field_ty_text () ; fn test_field__ty_text () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1901OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ty_text) as usize - ptr as usize } , 1230usize , concat ! ("Offset of field: " , stringify ! (T1901OutBlock) , "::" , stringify ! (_ty_text))) ; } test_field__ty_text () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T1902InBlock { pub shCode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , pub time : [:: std :: os :: raw :: c_char ; 6usize] , pub _time : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T1902InBlock () { assert_eq ! (:: std :: mem :: size_of :: < T1902InBlock > () , 14usize , concat ! ("Size of: " , stringify ! (T1902InBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T1902InBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T1902InBlock))) ; fn test_field_shCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T1902InBlock) , "::" , stringify ! (shCode))) ; } test_field_shCode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 6usize , concat ! ("Offset of field: " , stringify ! (T1902InBlock) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; fn test_field_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . time) as usize - ptr as usize } , 7usize , concat ! ("Offset of field: " , stringify ! (T1902InBlock) , "::" , stringify ! (time))) ; } test_field_time () ; fn test_field__time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _time) as usize - ptr as usize } , 13usize , concat ! ("Offset of field: " , stringify ! (T1902InBlock) , "::" , stringify ! (_time))) ; } test_field__time () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T1902OutBlock { pub time : [:: std :: os :: raw :: c_char ; 6usize] , pub _time : :: std :: os :: raw :: c_char , pub hName : [:: std :: os :: raw :: c_char ; 20usize] , pub _hname : :: std :: os :: raw :: c_char , pub upName : [:: std :: os :: raw :: c_char ; 20usize] , pub _upname : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T1902OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < T1902OutBlock > () , 49usize , concat ! ("Size of: " , stringify ! (T1902OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T1902OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T1902OutBlock))) ; fn test_field_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . time) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock) , "::" , stringify ! (time))) ; } test_field_time () ; fn test_field__time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _time) as usize - ptr as usize } , 6usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock) , "::" , stringify ! (_time))) ; } test_field__time () ; fn test_field_hName () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . hName) as usize - ptr as usize } , 7usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock) , "::" , stringify ! (hName))) ; } test_field_hName () ; fn test_field__hname () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _hname) as usize - ptr as usize } , 27usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock) , "::" , stringify ! (_hname))) ; } test_field__hname () ; fn test_field_upName () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . upName) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock) , "::" , stringify ! (upName))) ; } test_field_upName () ; fn test_field__upname () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _upname) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock) , "::" , stringify ! (_upname))) ; } test_field__upname () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T1902OutBlock1 { pub time : [:: std :: os :: raw :: c_char ; 8usize] , pub _time : :: std :: os :: raw :: c_char , pub price : [:: std :: os :: raw :: c_char ; 8usize] , pub _price : :: std :: os :: raw :: c_char , pub sign : [:: std :: os :: raw :: c_char ; 1usize] , pub _sign : :: std :: os :: raw :: c_char , pub change : [:: std :: os :: raw :: c_char ; 8usize] , pub _change : :: std :: os :: raw :: c_char , pub volume : [:: std :: os :: raw :: c_char ; 12usize] , pub _volume : :: std :: os :: raw :: c_char , pub navDiff : [:: std :: os :: raw :: c_char ; 9usize] , pub _navdiff : :: std :: os :: raw :: c_char , pub nav : [:: std :: os :: raw :: c_char ; 9usize] , pub _nav : :: std :: os :: raw :: c_char , pub navChange : [:: std :: os :: raw :: c_char ; 9usize] , pub _navchange : :: std :: os :: raw :: c_char , pub crate_ : [:: std :: os :: raw :: c_char ; 9usize] , pub _crate : :: std :: os :: raw :: c_char , pub grate : [:: std :: os :: raw :: c_char ; 9usize] , pub _grate : :: std :: os :: raw :: c_char , pub jisu : [:: std :: os :: raw :: c_char ; 8usize] , pub _jisu : :: std :: os :: raw :: c_char , pub jiChange : [:: std :: os :: raw :: c_char ; 8usize] , pub _jichange : :: std :: os :: raw :: c_char , pub jiRate : [:: std :: os :: raw :: c_char ; 8usize] , pub _jirate : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T1902OutBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < T1902OutBlock1 > () , 119usize , concat ! ("Size of: " , stringify ! (T1902OutBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < T1902OutBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (T1902OutBlock1))) ; fn test_field_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . time) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock1) , "::" , stringify ! (time))) ; } test_field_time () ; fn test_field__time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _time) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock1) , "::" , stringify ! (_time))) ; } test_field__time () ; fn test_field_price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . price) as usize - ptr as usize } , 9usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock1) , "::" , stringify ! (price))) ; } test_field_price () ; fn test_field__price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _price) as usize - ptr as usize } , 17usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock1) , "::" , stringify ! (_price))) ; } test_field__price () ; fn test_field_sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sign) as usize - ptr as usize } , 18usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock1) , "::" , stringify ! (sign))) ; } test_field_sign () ; fn test_field__sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sign) as usize - ptr as usize } , 19usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock1) , "::" , stringify ! (_sign))) ; } test_field__sign () ; fn test_field_change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . change) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock1) , "::" , stringify ! (change))) ; } test_field_change () ; fn test_field__change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _change) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock1) , "::" , stringify ! (_change))) ; } test_field__change () ; fn test_field_volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . volume) as usize - ptr as usize } , 29usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock1) , "::" , stringify ! (volume))) ; } test_field_volume () ; fn test_field__volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _volume) as usize - ptr as usize } , 41usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock1) , "::" , stringify ! (_volume))) ; } test_field__volume () ; fn test_field_navDiff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . navDiff) as usize - ptr as usize } , 42usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock1) , "::" , stringify ! (navDiff))) ; } test_field_navDiff () ; fn test_field__navdiff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _navdiff) as usize - ptr as usize } , 51usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock1) , "::" , stringify ! (_navdiff))) ; } test_field__navdiff () ; fn test_field_nav () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . nav) as usize - ptr as usize } , 52usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock1) , "::" , stringify ! (nav))) ; } test_field_nav () ; fn test_field__nav () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _nav) as usize - ptr as usize } , 61usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock1) , "::" , stringify ! (_nav))) ; } test_field__nav () ; fn test_field_navChange () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . navChange) as usize - ptr as usize } , 62usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock1) , "::" , stringify ! (navChange))) ; } test_field_navChange () ; fn test_field__navchange () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _navchange) as usize - ptr as usize } , 71usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock1) , "::" , stringify ! (_navchange))) ; } test_field__navchange () ; fn test_field_crate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . crate_) as usize - ptr as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock1) , "::" , stringify ! (crate_))) ; } test_field_crate () ; fn test_field__crate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _crate) as usize - ptr as usize } , 81usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock1) , "::" , stringify ! (_crate))) ; } test_field__crate () ; fn test_field_grate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . grate) as usize - ptr as usize } , 82usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock1) , "::" , stringify ! (grate))) ; } test_field_grate () ; fn test_field__grate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _grate) as usize - ptr as usize } , 91usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock1) , "::" , stringify ! (_grate))) ; } test_field__grate () ; fn test_field_jisu () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jisu) as usize - ptr as usize } , 92usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock1) , "::" , stringify ! (jisu))) ; } test_field_jisu () ; fn test_field__jisu () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jisu) as usize - ptr as usize } , 100usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock1) , "::" , stringify ! (_jisu))) ; } test_field__jisu () ; fn test_field_jiChange () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jiChange) as usize - ptr as usize } , 101usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock1) , "::" , stringify ! (jiChange))) ; } test_field_jiChange () ; fn test_field__jichange () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jichange) as usize - ptr as usize } , 109usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock1) , "::" , stringify ! (_jichange))) ; } test_field__jichange () ; fn test_field_jiRate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jiRate) as usize - ptr as usize } , 110usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock1) , "::" , stringify ! (jiRate))) ; } test_field_jiRate () ; fn test_field__jirate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1902OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jirate) as usize - ptr as usize } , 118usize , concat ! ("Offset of field: " , stringify ! (T1902OutBlock1) , "::" , stringify ! (_jirate))) ; } test_field__jirate () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T1906InBlock { pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T1906InBlock () { assert_eq ! (:: std :: mem :: size_of :: < T1906InBlock > () , 7usize , concat ! ("Size of: " , stringify ! (T1906InBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T1906InBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T1906InBlock))) ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T1906InBlock) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 6usize , concat ! ("Offset of field: " , stringify ! (T1906InBlock) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T1906OutBlock { pub hname : [:: std :: os :: raw :: c_char ; 20usize] , pub _hname : :: std :: os :: raw :: c_char , pub price : [:: std :: os :: raw :: c_char ; 8usize] , pub _price : :: std :: os :: raw :: c_char , pub sign : [:: std :: os :: raw :: c_char ; 1usize] , pub _sign : :: std :: os :: raw :: c_char , pub change : [:: std :: os :: raw :: c_char ; 8usize] , pub _change : :: std :: os :: raw :: c_char , pub diff : [:: std :: os :: raw :: c_char ; 6usize] , pub _diff : :: std :: os :: raw :: c_char , pub volume : [:: std :: os :: raw :: c_char ; 12usize] , pub _volume : :: std :: os :: raw :: c_char , pub lp_offerrem1 : [:: std :: os :: raw :: c_char ; 12usize] , pub _lp_offerrem1 : :: std :: os :: raw :: c_char , pub lp_bidrem1 : [:: std :: os :: raw :: c_char ; 12usize] , pub _lp_bidrem1 : :: std :: os :: raw :: c_char , pub lp_offerrem2 : [:: std :: os :: raw :: c_char ; 12usize] , pub _lp_offerrem2 : :: std :: os :: raw :: c_char , pub lp_bidrem2 : [:: std :: os :: raw :: c_char ; 12usize] , pub _lp_bidrem2 : :: std :: os :: raw :: c_char , pub lp_offerrem3 : [:: std :: os :: raw :: c_char ; 12usize] , pub _lp_offerrem3 : :: std :: os :: raw :: c_char , pub lp_bidrem3 : [:: std :: os :: raw :: c_char ; 12usize] , pub _lp_bidrem3 : :: std :: os :: raw :: c_char , pub lp_offerrem4 : [:: std :: os :: raw :: c_char ; 12usize] , pub _lp_offerrem4 : :: std :: os :: raw :: c_char , pub lp_bidrem4 : [:: std :: os :: raw :: c_char ; 12usize] , pub _lp_bidrem4 : :: std :: os :: raw :: c_char , pub lp_offerrem5 : [:: std :: os :: raw :: c_char ; 12usize] , pub _lp_offerrem5 : :: std :: os :: raw :: c_char , pub lp_bidrem5 : [:: std :: os :: raw :: c_char ; 12usize] , pub _lp_bidrem5 : :: std :: os :: raw :: c_char , pub lp_offerrem6 : [:: std :: os :: raw :: c_char ; 12usize] , pub _lp_offerrem6 : :: std :: os :: raw :: c_char , pub lp_bidrem6 : [:: std :: os :: raw :: c_char ; 12usize] , pub _lp_bidrem6 : :: std :: os :: raw :: c_char , pub lp_offerrem7 : [:: std :: os :: raw :: c_char ; 12usize] , pub _lp_offerrem7 : :: std :: os :: raw :: c_char , pub lp_bidrem7 : [:: std :: os :: raw :: c_char ; 12usize] , pub _lp_bidrem7 : :: std :: os :: raw :: c_char , pub lp_offerrem8 : [:: std :: os :: raw :: c_char ; 12usize] , pub _lp_offerrem8 : :: std :: os :: raw :: c_char , pub lp_bidrem8 : [:: std :: os :: raw :: c_char ; 12usize] , pub _lp_bidrem8 : :: std :: os :: raw :: c_char , pub lp_offerrem9 : [:: std :: os :: raw :: c_char ; 12usize] , pub _lp_offerrem9 : :: std :: os :: raw :: c_char , pub lp_bidrem9 : [:: std :: os :: raw :: c_char ; 12usize] , pub _lp_bidrem9 : :: std :: os :: raw :: c_char , pub lp_offerrem10 : [:: std :: os :: raw :: c_char ; 12usize] , pub _lp_offerrem10 : :: std :: os :: raw :: c_char , pub lp_bidrem10 : [:: std :: os :: raw :: c_char ; 12usize] , pub _lp_bidrem10 : :: std :: os :: raw :: c_char , pub jnilclose : [:: std :: os :: raw :: c_char ; 8usize] , pub _jnilclose : :: std :: os :: raw :: c_char , pub offerho1 : [:: std :: os :: raw :: c_char ; 8usize] , pub _offerho1 : :: std :: os :: raw :: c_char , pub bidho1 : [:: std :: os :: raw :: c_char ; 8usize] , pub _bidho1 : :: std :: os :: raw :: c_char , pub offerrem1 : [:: std :: os :: raw :: c_char ; 12usize] , pub _offerrem1 : :: std :: os :: raw :: c_char , pub bidrem1 : [:: std :: os :: raw :: c_char ; 12usize] , pub _bidrem1 : :: std :: os :: raw :: c_char , pub preoffercha1 : [:: std :: os :: raw :: c_char ; 12usize] , pub _preoffercha1 : :: std :: os :: raw :: c_char , pub prebidcha1 : [:: std :: os :: raw :: c_char ; 12usize] , pub _prebidcha1 : :: std :: os :: raw :: c_char , pub offerho2 : [:: std :: os :: raw :: c_char ; 8usize] , pub _offerho2 : :: std :: os :: raw :: c_char , pub bidho2 : [:: std :: os :: raw :: c_char ; 8usize] , pub _bidho2 : :: std :: os :: raw :: c_char , pub offerrem2 : [:: std :: os :: raw :: c_char ; 12usize] , pub _offerrem2 : :: std :: os :: raw :: c_char , pub bidrem2 : [:: std :: os :: raw :: c_char ; 12usize] , pub _bidrem2 : :: std :: os :: raw :: c_char , pub preoffercha2 : [:: std :: os :: raw :: c_char ; 12usize] , pub _preoffercha2 : :: std :: os :: raw :: c_char , pub prebidcha2 : [:: std :: os :: raw :: c_char ; 12usize] , pub _prebidcha2 : :: std :: os :: raw :: c_char , pub offerho3 : [:: std :: os :: raw :: c_char ; 8usize] , pub _offerho3 : :: std :: os :: raw :: c_char , pub bidho3 : [:: std :: os :: raw :: c_char ; 8usize] , pub _bidho3 : :: std :: os :: raw :: c_char , pub offerrem3 : [:: std :: os :: raw :: c_char ; 12usize] , pub _offerrem3 : :: std :: os :: raw :: c_char , pub bidrem3 : [:: std :: os :: raw :: c_char ; 12usize] , pub _bidrem3 : :: std :: os :: raw :: c_char , pub preoffercha3 : [:: std :: os :: raw :: c_char ; 12usize] , pub _preoffercha3 : :: std :: os :: raw :: c_char , pub prebidcha3 : [:: std :: os :: raw :: c_char ; 12usize] , pub _prebidcha3 : :: std :: os :: raw :: c_char , pub offerho4 : [:: std :: os :: raw :: c_char ; 8usize] , pub _offerho4 : :: std :: os :: raw :: c_char , pub bidho4 : [:: std :: os :: raw :: c_char ; 8usize] , pub _bidho4 : :: std :: os :: raw :: c_char , pub offerrem4 : [:: std :: os :: raw :: c_char ; 12usize] , pub _offerrem4 : :: std :: os :: raw :: c_char , pub bidrem4 : [:: std :: os :: raw :: c_char ; 12usize] , pub _bidrem4 : :: std :: os :: raw :: c_char , pub preoffercha4 : [:: std :: os :: raw :: c_char ; 12usize] , pub _preoffercha4 : :: std :: os :: raw :: c_char , pub prebidcha4 : [:: std :: os :: raw :: c_char ; 12usize] , pub _prebidcha4 : :: std :: os :: raw :: c_char , pub offerho5 : [:: std :: os :: raw :: c_char ; 8usize] , pub _offerho5 : :: std :: os :: raw :: c_char , pub bidho5 : [:: std :: os :: raw :: c_char ; 8usize] , pub _bidho5 : :: std :: os :: raw :: c_char , pub offerrem5 : [:: std :: os :: raw :: c_char ; 12usize] , pub _offerrem5 : :: std :: os :: raw :: c_char , pub bidrem5 : [:: std :: os :: raw :: c_char ; 12usize] , pub _bidrem5 : :: std :: os :: raw :: c_char , pub preoffercha5 : [:: std :: os :: raw :: c_char ; 12usize] , pub _preoffercha5 : :: std :: os :: raw :: c_char , pub prebidcha5 : [:: std :: os :: raw :: c_char ; 12usize] , pub _prebidcha5 : :: std :: os :: raw :: c_char , pub offerho6 : [:: std :: os :: raw :: c_char ; 8usize] , pub _offerho6 : :: std :: os :: raw :: c_char , pub bidho6 : [:: std :: os :: raw :: c_char ; 8usize] , pub _bidho6 : :: std :: os :: raw :: c_char , pub offerrem6 : [:: std :: os :: raw :: c_char ; 12usize] , pub _offerrem6 : :: std :: os :: raw :: c_char , pub bidrem6 : [:: std :: os :: raw :: c_char ; 12usize] , pub _bidrem6 : :: std :: os :: raw :: c_char , pub preoffercha6 : [:: std :: os :: raw :: c_char ; 12usize] , pub _preoffercha6 : :: std :: os :: raw :: c_char , pub prebidcha6 : [:: std :: os :: raw :: c_char ; 12usize] , pub _prebidcha6 : :: std :: os :: raw :: c_char , pub offerho7 : [:: std :: os :: raw :: c_char ; 8usize] , pub _offerho7 : :: std :: os :: raw :: c_char , pub bidho7 : [:: std :: os :: raw :: c_char ; 8usize] , pub _bidho7 : :: std :: os :: raw :: c_char , pub offerrem7 : [:: std :: os :: raw :: c_char ; 12usize] , pub _offerrem7 : :: std :: os :: raw :: c_char , pub bidrem7 : [:: std :: os :: raw :: c_char ; 12usize] , pub _bidrem7 : :: std :: os :: raw :: c_char , pub preoffercha7 : [:: std :: os :: raw :: c_char ; 12usize] , pub _preoffercha7 : :: std :: os :: raw :: c_char , pub prebidcha7 : [:: std :: os :: raw :: c_char ; 12usize] , pub _prebidcha7 : :: std :: os :: raw :: c_char , pub offerho8 : [:: std :: os :: raw :: c_char ; 8usize] , pub _offerho8 : :: std :: os :: raw :: c_char , pub bidho8 : [:: std :: os :: raw :: c_char ; 8usize] , pub _bidho8 : :: std :: os :: raw :: c_char , pub offerrem8 : [:: std :: os :: raw :: c_char ; 12usize] , pub _offerrem8 : :: std :: os :: raw :: c_char , pub bidrem8 : [:: std :: os :: raw :: c_char ; 12usize] , pub _bidrem8 : :: std :: os :: raw :: c_char , pub preoffercha8 : [:: std :: os :: raw :: c_char ; 12usize] , pub _preoffercha8 : :: std :: os :: raw :: c_char , pub prebidcha8 : [:: std :: os :: raw :: c_char ; 12usize] , pub _prebidcha8 : :: std :: os :: raw :: c_char , pub offerho9 : [:: std :: os :: raw :: c_char ; 8usize] , pub _offerho9 : :: std :: os :: raw :: c_char , pub bidho9 : [:: std :: os :: raw :: c_char ; 8usize] , pub _bidho9 : :: std :: os :: raw :: c_char , pub offerrem9 : [:: std :: os :: raw :: c_char ; 12usize] , pub _offerrem9 : :: std :: os :: raw :: c_char , pub bidrem9 : [:: std :: os :: raw :: c_char ; 12usize] , pub _bidrem9 : :: std :: os :: raw :: c_char , pub preoffercha9 : [:: std :: os :: raw :: c_char ; 12usize] , pub _preoffercha9 : :: std :: os :: raw :: c_char , pub prebidcha9 : [:: std :: os :: raw :: c_char ; 12usize] , pub _prebidcha9 : :: std :: os :: raw :: c_char , pub offerho10 : [:: std :: os :: raw :: c_char ; 8usize] , pub _offerho10 : :: std :: os :: raw :: c_char , pub bidho10 : [:: std :: os :: raw :: c_char ; 8usize] , pub _bidho10 : :: std :: os :: raw :: c_char , pub offerrem10 : [:: std :: os :: raw :: c_char ; 12usize] , pub _offerrem10 : :: std :: os :: raw :: c_char , pub bidrem10 : [:: std :: os :: raw :: c_char ; 12usize] , pub _bidrem10 : :: std :: os :: raw :: c_char , pub preoffercha10 : [:: std :: os :: raw :: c_char ; 12usize] , pub _preoffercha10 : :: std :: os :: raw :: c_char , pub prebidcha10 : [:: std :: os :: raw :: c_char ; 12usize] , pub _prebidcha10 : :: std :: os :: raw :: c_char , pub offer : [:: std :: os :: raw :: c_char ; 12usize] , pub _offer : :: std :: os :: raw :: c_char , pub bid : [:: std :: os :: raw :: c_char ; 12usize] , pub _bid : :: std :: os :: raw :: c_char , pub preoffercha : [:: std :: os :: raw :: c_char ; 12usize] , pub _preoffercha : :: std :: os :: raw :: c_char , pub prebidcha : [:: std :: os :: raw :: c_char ; 12usize] , pub _prebidcha : :: std :: os :: raw :: c_char , pub hotime : [:: std :: os :: raw :: c_char ; 8usize] , pub _hotime : :: std :: os :: raw :: c_char , pub yeprice : [:: std :: os :: raw :: c_char ; 8usize] , pub _yeprice : :: std :: os :: raw :: c_char , pub yevolume : [:: std :: os :: raw :: c_char ; 12usize] , pub _yevolume : :: std :: os :: raw :: c_char , pub yesign : [:: std :: os :: raw :: c_char ; 1usize] , pub _yesign : :: std :: os :: raw :: c_char , pub yechange : [:: std :: os :: raw :: c_char ; 8usize] , pub _yechange : :: std :: os :: raw :: c_char , pub yediff : [:: std :: os :: raw :: c_char ; 6usize] , pub _yediff : :: std :: os :: raw :: c_char , pub tmoffer : [:: std :: os :: raw :: c_char ; 12usize] , pub _tmoffer : :: std :: os :: raw :: c_char , pub tmbid : [:: std :: os :: raw :: c_char ; 12usize] , pub _tmbid : :: std :: os :: raw :: c_char , pub ho_status : [:: std :: os :: raw :: c_char ; 1usize] , pub _ho_status : :: std :: os :: raw :: c_char , pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , pub uplmtprice : [:: std :: os :: raw :: c_char ; 8usize] , pub _uplmtprice : :: std :: os :: raw :: c_char , pub dnlmtprice : [:: std :: os :: raw :: c_char ; 8usize] , pub _dnlmtprice : :: std :: os :: raw :: c_char , pub open : [:: std :: os :: raw :: c_char ; 8usize] , pub _open : :: std :: os :: raw :: c_char , pub high : [:: std :: os :: raw :: c_char ; 8usize] , pub _high : :: std :: os :: raw :: c_char , pub low : [:: std :: os :: raw :: c_char ; 8usize] , pub _low : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T1906OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < T1906OutBlock > () , 1211usize , concat ! ("Size of: " , stringify ! (T1906OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T1906OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T1906OutBlock))) ; fn test_field_hname () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . hname) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (hname))) ; } test_field_hname () ; fn test_field__hname () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _hname) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_hname))) ; } test_field__hname () ; fn test_field_price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . price) as usize - ptr as usize } , 21usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (price))) ; } test_field_price () ; fn test_field__price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _price) as usize - ptr as usize } , 29usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_price))) ; } test_field__price () ; fn test_field_sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sign) as usize - ptr as usize } , 30usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (sign))) ; } test_field_sign () ; fn test_field__sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sign) as usize - ptr as usize } , 31usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_sign))) ; } test_field__sign () ; fn test_field_change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . change) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (change))) ; } test_field_change () ; fn test_field__change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _change) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_change))) ; } test_field__change () ; fn test_field_diff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . diff) as usize - ptr as usize } , 41usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (diff))) ; } test_field_diff () ; fn test_field__diff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _diff) as usize - ptr as usize } , 47usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_diff))) ; } test_field__diff () ; fn test_field_volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . volume) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (volume))) ; } test_field_volume () ; fn test_field__volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _volume) as usize - ptr as usize } , 60usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_volume))) ; } test_field__volume () ; fn test_field_lp_offerrem1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lp_offerrem1) as usize - ptr as usize } , 61usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (lp_offerrem1))) ; } test_field_lp_offerrem1 () ; fn test_field__lp_offerrem1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lp_offerrem1) as usize - ptr as usize } , 73usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_lp_offerrem1))) ; } test_field__lp_offerrem1 () ; fn test_field_lp_bidrem1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lp_bidrem1) as usize - ptr as usize } , 74usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (lp_bidrem1))) ; } test_field_lp_bidrem1 () ; fn test_field__lp_bidrem1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lp_bidrem1) as usize - ptr as usize } , 86usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_lp_bidrem1))) ; } test_field__lp_bidrem1 () ; fn test_field_lp_offerrem2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lp_offerrem2) as usize - ptr as usize } , 87usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (lp_offerrem2))) ; } test_field_lp_offerrem2 () ; fn test_field__lp_offerrem2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lp_offerrem2) as usize - ptr as usize } , 99usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_lp_offerrem2))) ; } test_field__lp_offerrem2 () ; fn test_field_lp_bidrem2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lp_bidrem2) as usize - ptr as usize } , 100usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (lp_bidrem2))) ; } test_field_lp_bidrem2 () ; fn test_field__lp_bidrem2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lp_bidrem2) as usize - ptr as usize } , 112usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_lp_bidrem2))) ; } test_field__lp_bidrem2 () ; fn test_field_lp_offerrem3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lp_offerrem3) as usize - ptr as usize } , 113usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (lp_offerrem3))) ; } test_field_lp_offerrem3 () ; fn test_field__lp_offerrem3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lp_offerrem3) as usize - ptr as usize } , 125usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_lp_offerrem3))) ; } test_field__lp_offerrem3 () ; fn test_field_lp_bidrem3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lp_bidrem3) as usize - ptr as usize } , 126usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (lp_bidrem3))) ; } test_field_lp_bidrem3 () ; fn test_field__lp_bidrem3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lp_bidrem3) as usize - ptr as usize } , 138usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_lp_bidrem3))) ; } test_field__lp_bidrem3 () ; fn test_field_lp_offerrem4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lp_offerrem4) as usize - ptr as usize } , 139usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (lp_offerrem4))) ; } test_field_lp_offerrem4 () ; fn test_field__lp_offerrem4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lp_offerrem4) as usize - ptr as usize } , 151usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_lp_offerrem4))) ; } test_field__lp_offerrem4 () ; fn test_field_lp_bidrem4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lp_bidrem4) as usize - ptr as usize } , 152usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (lp_bidrem4))) ; } test_field_lp_bidrem4 () ; fn test_field__lp_bidrem4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lp_bidrem4) as usize - ptr as usize } , 164usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_lp_bidrem4))) ; } test_field__lp_bidrem4 () ; fn test_field_lp_offerrem5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lp_offerrem5) as usize - ptr as usize } , 165usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (lp_offerrem5))) ; } test_field_lp_offerrem5 () ; fn test_field__lp_offerrem5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lp_offerrem5) as usize - ptr as usize } , 177usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_lp_offerrem5))) ; } test_field__lp_offerrem5 () ; fn test_field_lp_bidrem5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lp_bidrem5) as usize - ptr as usize } , 178usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (lp_bidrem5))) ; } test_field_lp_bidrem5 () ; fn test_field__lp_bidrem5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lp_bidrem5) as usize - ptr as usize } , 190usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_lp_bidrem5))) ; } test_field__lp_bidrem5 () ; fn test_field_lp_offerrem6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lp_offerrem6) as usize - ptr as usize } , 191usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (lp_offerrem6))) ; } test_field_lp_offerrem6 () ; fn test_field__lp_offerrem6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lp_offerrem6) as usize - ptr as usize } , 203usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_lp_offerrem6))) ; } test_field__lp_offerrem6 () ; fn test_field_lp_bidrem6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lp_bidrem6) as usize - ptr as usize } , 204usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (lp_bidrem6))) ; } test_field_lp_bidrem6 () ; fn test_field__lp_bidrem6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lp_bidrem6) as usize - ptr as usize } , 216usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_lp_bidrem6))) ; } test_field__lp_bidrem6 () ; fn test_field_lp_offerrem7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lp_offerrem7) as usize - ptr as usize } , 217usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (lp_offerrem7))) ; } test_field_lp_offerrem7 () ; fn test_field__lp_offerrem7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lp_offerrem7) as usize - ptr as usize } , 229usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_lp_offerrem7))) ; } test_field__lp_offerrem7 () ; fn test_field_lp_bidrem7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lp_bidrem7) as usize - ptr as usize } , 230usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (lp_bidrem7))) ; } test_field_lp_bidrem7 () ; fn test_field__lp_bidrem7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lp_bidrem7) as usize - ptr as usize } , 242usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_lp_bidrem7))) ; } test_field__lp_bidrem7 () ; fn test_field_lp_offerrem8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lp_offerrem8) as usize - ptr as usize } , 243usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (lp_offerrem8))) ; } test_field_lp_offerrem8 () ; fn test_field__lp_offerrem8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lp_offerrem8) as usize - ptr as usize } , 255usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_lp_offerrem8))) ; } test_field__lp_offerrem8 () ; fn test_field_lp_bidrem8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lp_bidrem8) as usize - ptr as usize } , 256usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (lp_bidrem8))) ; } test_field_lp_bidrem8 () ; fn test_field__lp_bidrem8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lp_bidrem8) as usize - ptr as usize } , 268usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_lp_bidrem8))) ; } test_field__lp_bidrem8 () ; fn test_field_lp_offerrem9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lp_offerrem9) as usize - ptr as usize } , 269usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (lp_offerrem9))) ; } test_field_lp_offerrem9 () ; fn test_field__lp_offerrem9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lp_offerrem9) as usize - ptr as usize } , 281usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_lp_offerrem9))) ; } test_field__lp_offerrem9 () ; fn test_field_lp_bidrem9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lp_bidrem9) as usize - ptr as usize } , 282usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (lp_bidrem9))) ; } test_field_lp_bidrem9 () ; fn test_field__lp_bidrem9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lp_bidrem9) as usize - ptr as usize } , 294usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_lp_bidrem9))) ; } test_field__lp_bidrem9 () ; fn test_field_lp_offerrem10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lp_offerrem10) as usize - ptr as usize } , 295usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (lp_offerrem10))) ; } test_field_lp_offerrem10 () ; fn test_field__lp_offerrem10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lp_offerrem10) as usize - ptr as usize } , 307usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_lp_offerrem10))) ; } test_field__lp_offerrem10 () ; fn test_field_lp_bidrem10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lp_bidrem10) as usize - ptr as usize } , 308usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (lp_bidrem10))) ; } test_field_lp_bidrem10 () ; fn test_field__lp_bidrem10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lp_bidrem10) as usize - ptr as usize } , 320usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_lp_bidrem10))) ; } test_field__lp_bidrem10 () ; fn test_field_jnilclose () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jnilclose) as usize - ptr as usize } , 321usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (jnilclose))) ; } test_field_jnilclose () ; fn test_field__jnilclose () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jnilclose) as usize - ptr as usize } , 329usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_jnilclose))) ; } test_field__jnilclose () ; fn test_field_offerho1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho1) as usize - ptr as usize } , 330usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (offerho1))) ; } test_field_offerho1 () ; fn test_field__offerho1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho1) as usize - ptr as usize } , 338usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_offerho1))) ; } test_field__offerho1 () ; fn test_field_bidho1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho1) as usize - ptr as usize } , 339usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (bidho1))) ; } test_field_bidho1 () ; fn test_field__bidho1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho1) as usize - ptr as usize } , 347usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_bidho1))) ; } test_field__bidho1 () ; fn test_field_offerrem1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem1) as usize - ptr as usize } , 348usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (offerrem1))) ; } test_field_offerrem1 () ; fn test_field__offerrem1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem1) as usize - ptr as usize } , 360usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_offerrem1))) ; } test_field__offerrem1 () ; fn test_field_bidrem1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem1) as usize - ptr as usize } , 361usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (bidrem1))) ; } test_field_bidrem1 () ; fn test_field__bidrem1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem1) as usize - ptr as usize } , 373usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_bidrem1))) ; } test_field__bidrem1 () ; fn test_field_preoffercha1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . preoffercha1) as usize - ptr as usize } , 374usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (preoffercha1))) ; } test_field_preoffercha1 () ; fn test_field__preoffercha1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _preoffercha1) as usize - ptr as usize } , 386usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_preoffercha1))) ; } test_field__preoffercha1 () ; fn test_field_prebidcha1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prebidcha1) as usize - ptr as usize } , 387usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (prebidcha1))) ; } test_field_prebidcha1 () ; fn test_field__prebidcha1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _prebidcha1) as usize - ptr as usize } , 399usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_prebidcha1))) ; } test_field__prebidcha1 () ; fn test_field_offerho2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho2) as usize - ptr as usize } , 400usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (offerho2))) ; } test_field_offerho2 () ; fn test_field__offerho2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho2) as usize - ptr as usize } , 408usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_offerho2))) ; } test_field__offerho2 () ; fn test_field_bidho2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho2) as usize - ptr as usize } , 409usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (bidho2))) ; } test_field_bidho2 () ; fn test_field__bidho2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho2) as usize - ptr as usize } , 417usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_bidho2))) ; } test_field__bidho2 () ; fn test_field_offerrem2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem2) as usize - ptr as usize } , 418usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (offerrem2))) ; } test_field_offerrem2 () ; fn test_field__offerrem2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem2) as usize - ptr as usize } , 430usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_offerrem2))) ; } test_field__offerrem2 () ; fn test_field_bidrem2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem2) as usize - ptr as usize } , 431usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (bidrem2))) ; } test_field_bidrem2 () ; fn test_field__bidrem2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem2) as usize - ptr as usize } , 443usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_bidrem2))) ; } test_field__bidrem2 () ; fn test_field_preoffercha2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . preoffercha2) as usize - ptr as usize } , 444usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (preoffercha2))) ; } test_field_preoffercha2 () ; fn test_field__preoffercha2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _preoffercha2) as usize - ptr as usize } , 456usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_preoffercha2))) ; } test_field__preoffercha2 () ; fn test_field_prebidcha2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prebidcha2) as usize - ptr as usize } , 457usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (prebidcha2))) ; } test_field_prebidcha2 () ; fn test_field__prebidcha2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _prebidcha2) as usize - ptr as usize } , 469usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_prebidcha2))) ; } test_field__prebidcha2 () ; fn test_field_offerho3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho3) as usize - ptr as usize } , 470usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (offerho3))) ; } test_field_offerho3 () ; fn test_field__offerho3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho3) as usize - ptr as usize } , 478usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_offerho3))) ; } test_field__offerho3 () ; fn test_field_bidho3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho3) as usize - ptr as usize } , 479usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (bidho3))) ; } test_field_bidho3 () ; fn test_field__bidho3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho3) as usize - ptr as usize } , 487usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_bidho3))) ; } test_field__bidho3 () ; fn test_field_offerrem3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem3) as usize - ptr as usize } , 488usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (offerrem3))) ; } test_field_offerrem3 () ; fn test_field__offerrem3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem3) as usize - ptr as usize } , 500usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_offerrem3))) ; } test_field__offerrem3 () ; fn test_field_bidrem3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem3) as usize - ptr as usize } , 501usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (bidrem3))) ; } test_field_bidrem3 () ; fn test_field__bidrem3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem3) as usize - ptr as usize } , 513usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_bidrem3))) ; } test_field__bidrem3 () ; fn test_field_preoffercha3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . preoffercha3) as usize - ptr as usize } , 514usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (preoffercha3))) ; } test_field_preoffercha3 () ; fn test_field__preoffercha3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _preoffercha3) as usize - ptr as usize } , 526usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_preoffercha3))) ; } test_field__preoffercha3 () ; fn test_field_prebidcha3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prebidcha3) as usize - ptr as usize } , 527usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (prebidcha3))) ; } test_field_prebidcha3 () ; fn test_field__prebidcha3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _prebidcha3) as usize - ptr as usize } , 539usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_prebidcha3))) ; } test_field__prebidcha3 () ; fn test_field_offerho4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho4) as usize - ptr as usize } , 540usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (offerho4))) ; } test_field_offerho4 () ; fn test_field__offerho4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho4) as usize - ptr as usize } , 548usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_offerho4))) ; } test_field__offerho4 () ; fn test_field_bidho4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho4) as usize - ptr as usize } , 549usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (bidho4))) ; } test_field_bidho4 () ; fn test_field__bidho4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho4) as usize - ptr as usize } , 557usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_bidho4))) ; } test_field__bidho4 () ; fn test_field_offerrem4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem4) as usize - ptr as usize } , 558usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (offerrem4))) ; } test_field_offerrem4 () ; fn test_field__offerrem4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem4) as usize - ptr as usize } , 570usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_offerrem4))) ; } test_field__offerrem4 () ; fn test_field_bidrem4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem4) as usize - ptr as usize } , 571usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (bidrem4))) ; } test_field_bidrem4 () ; fn test_field__bidrem4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem4) as usize - ptr as usize } , 583usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_bidrem4))) ; } test_field__bidrem4 () ; fn test_field_preoffercha4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . preoffercha4) as usize - ptr as usize } , 584usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (preoffercha4))) ; } test_field_preoffercha4 () ; fn test_field__preoffercha4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _preoffercha4) as usize - ptr as usize } , 596usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_preoffercha4))) ; } test_field__preoffercha4 () ; fn test_field_prebidcha4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prebidcha4) as usize - ptr as usize } , 597usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (prebidcha4))) ; } test_field_prebidcha4 () ; fn test_field__prebidcha4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _prebidcha4) as usize - ptr as usize } , 609usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_prebidcha4))) ; } test_field__prebidcha4 () ; fn test_field_offerho5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho5) as usize - ptr as usize } , 610usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (offerho5))) ; } test_field_offerho5 () ; fn test_field__offerho5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho5) as usize - ptr as usize } , 618usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_offerho5))) ; } test_field__offerho5 () ; fn test_field_bidho5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho5) as usize - ptr as usize } , 619usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (bidho5))) ; } test_field_bidho5 () ; fn test_field__bidho5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho5) as usize - ptr as usize } , 627usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_bidho5))) ; } test_field__bidho5 () ; fn test_field_offerrem5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem5) as usize - ptr as usize } , 628usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (offerrem5))) ; } test_field_offerrem5 () ; fn test_field__offerrem5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem5) as usize - ptr as usize } , 640usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_offerrem5))) ; } test_field__offerrem5 () ; fn test_field_bidrem5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem5) as usize - ptr as usize } , 641usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (bidrem5))) ; } test_field_bidrem5 () ; fn test_field__bidrem5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem5) as usize - ptr as usize } , 653usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_bidrem5))) ; } test_field__bidrem5 () ; fn test_field_preoffercha5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . preoffercha5) as usize - ptr as usize } , 654usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (preoffercha5))) ; } test_field_preoffercha5 () ; fn test_field__preoffercha5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _preoffercha5) as usize - ptr as usize } , 666usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_preoffercha5))) ; } test_field__preoffercha5 () ; fn test_field_prebidcha5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prebidcha5) as usize - ptr as usize } , 667usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (prebidcha5))) ; } test_field_prebidcha5 () ; fn test_field__prebidcha5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _prebidcha5) as usize - ptr as usize } , 679usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_prebidcha5))) ; } test_field__prebidcha5 () ; fn test_field_offerho6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho6) as usize - ptr as usize } , 680usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (offerho6))) ; } test_field_offerho6 () ; fn test_field__offerho6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho6) as usize - ptr as usize } , 688usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_offerho6))) ; } test_field__offerho6 () ; fn test_field_bidho6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho6) as usize - ptr as usize } , 689usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (bidho6))) ; } test_field_bidho6 () ; fn test_field__bidho6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho6) as usize - ptr as usize } , 697usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_bidho6))) ; } test_field__bidho6 () ; fn test_field_offerrem6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem6) as usize - ptr as usize } , 698usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (offerrem6))) ; } test_field_offerrem6 () ; fn test_field__offerrem6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem6) as usize - ptr as usize } , 710usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_offerrem6))) ; } test_field__offerrem6 () ; fn test_field_bidrem6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem6) as usize - ptr as usize } , 711usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (bidrem6))) ; } test_field_bidrem6 () ; fn test_field__bidrem6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem6) as usize - ptr as usize } , 723usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_bidrem6))) ; } test_field__bidrem6 () ; fn test_field_preoffercha6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . preoffercha6) as usize - ptr as usize } , 724usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (preoffercha6))) ; } test_field_preoffercha6 () ; fn test_field__preoffercha6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _preoffercha6) as usize - ptr as usize } , 736usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_preoffercha6))) ; } test_field__preoffercha6 () ; fn test_field_prebidcha6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prebidcha6) as usize - ptr as usize } , 737usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (prebidcha6))) ; } test_field_prebidcha6 () ; fn test_field__prebidcha6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _prebidcha6) as usize - ptr as usize } , 749usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_prebidcha6))) ; } test_field__prebidcha6 () ; fn test_field_offerho7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho7) as usize - ptr as usize } , 750usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (offerho7))) ; } test_field_offerho7 () ; fn test_field__offerho7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho7) as usize - ptr as usize } , 758usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_offerho7))) ; } test_field__offerho7 () ; fn test_field_bidho7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho7) as usize - ptr as usize } , 759usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (bidho7))) ; } test_field_bidho7 () ; fn test_field__bidho7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho7) as usize - ptr as usize } , 767usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_bidho7))) ; } test_field__bidho7 () ; fn test_field_offerrem7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem7) as usize - ptr as usize } , 768usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (offerrem7))) ; } test_field_offerrem7 () ; fn test_field__offerrem7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem7) as usize - ptr as usize } , 780usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_offerrem7))) ; } test_field__offerrem7 () ; fn test_field_bidrem7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem7) as usize - ptr as usize } , 781usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (bidrem7))) ; } test_field_bidrem7 () ; fn test_field__bidrem7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem7) as usize - ptr as usize } , 793usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_bidrem7))) ; } test_field__bidrem7 () ; fn test_field_preoffercha7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . preoffercha7) as usize - ptr as usize } , 794usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (preoffercha7))) ; } test_field_preoffercha7 () ; fn test_field__preoffercha7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _preoffercha7) as usize - ptr as usize } , 806usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_preoffercha7))) ; } test_field__preoffercha7 () ; fn test_field_prebidcha7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prebidcha7) as usize - ptr as usize } , 807usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (prebidcha7))) ; } test_field_prebidcha7 () ; fn test_field__prebidcha7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _prebidcha7) as usize - ptr as usize } , 819usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_prebidcha7))) ; } test_field__prebidcha7 () ; fn test_field_offerho8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho8) as usize - ptr as usize } , 820usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (offerho8))) ; } test_field_offerho8 () ; fn test_field__offerho8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho8) as usize - ptr as usize } , 828usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_offerho8))) ; } test_field__offerho8 () ; fn test_field_bidho8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho8) as usize - ptr as usize } , 829usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (bidho8))) ; } test_field_bidho8 () ; fn test_field__bidho8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho8) as usize - ptr as usize } , 837usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_bidho8))) ; } test_field__bidho8 () ; fn test_field_offerrem8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem8) as usize - ptr as usize } , 838usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (offerrem8))) ; } test_field_offerrem8 () ; fn test_field__offerrem8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem8) as usize - ptr as usize } , 850usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_offerrem8))) ; } test_field__offerrem8 () ; fn test_field_bidrem8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem8) as usize - ptr as usize } , 851usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (bidrem8))) ; } test_field_bidrem8 () ; fn test_field__bidrem8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem8) as usize - ptr as usize } , 863usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_bidrem8))) ; } test_field__bidrem8 () ; fn test_field_preoffercha8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . preoffercha8) as usize - ptr as usize } , 864usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (preoffercha8))) ; } test_field_preoffercha8 () ; fn test_field__preoffercha8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _preoffercha8) as usize - ptr as usize } , 876usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_preoffercha8))) ; } test_field__preoffercha8 () ; fn test_field_prebidcha8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prebidcha8) as usize - ptr as usize } , 877usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (prebidcha8))) ; } test_field_prebidcha8 () ; fn test_field__prebidcha8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _prebidcha8) as usize - ptr as usize } , 889usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_prebidcha8))) ; } test_field__prebidcha8 () ; fn test_field_offerho9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho9) as usize - ptr as usize } , 890usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (offerho9))) ; } test_field_offerho9 () ; fn test_field__offerho9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho9) as usize - ptr as usize } , 898usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_offerho9))) ; } test_field__offerho9 () ; fn test_field_bidho9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho9) as usize - ptr as usize } , 899usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (bidho9))) ; } test_field_bidho9 () ; fn test_field__bidho9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho9) as usize - ptr as usize } , 907usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_bidho9))) ; } test_field__bidho9 () ; fn test_field_offerrem9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem9) as usize - ptr as usize } , 908usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (offerrem9))) ; } test_field_offerrem9 () ; fn test_field__offerrem9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem9) as usize - ptr as usize } , 920usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_offerrem9))) ; } test_field__offerrem9 () ; fn test_field_bidrem9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem9) as usize - ptr as usize } , 921usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (bidrem9))) ; } test_field_bidrem9 () ; fn test_field__bidrem9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem9) as usize - ptr as usize } , 933usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_bidrem9))) ; } test_field__bidrem9 () ; fn test_field_preoffercha9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . preoffercha9) as usize - ptr as usize } , 934usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (preoffercha9))) ; } test_field_preoffercha9 () ; fn test_field__preoffercha9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _preoffercha9) as usize - ptr as usize } , 946usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_preoffercha9))) ; } test_field__preoffercha9 () ; fn test_field_prebidcha9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prebidcha9) as usize - ptr as usize } , 947usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (prebidcha9))) ; } test_field_prebidcha9 () ; fn test_field__prebidcha9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _prebidcha9) as usize - ptr as usize } , 959usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_prebidcha9))) ; } test_field__prebidcha9 () ; fn test_field_offerho10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho10) as usize - ptr as usize } , 960usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (offerho10))) ; } test_field_offerho10 () ; fn test_field__offerho10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho10) as usize - ptr as usize } , 968usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_offerho10))) ; } test_field__offerho10 () ; fn test_field_bidho10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho10) as usize - ptr as usize } , 969usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (bidho10))) ; } test_field_bidho10 () ; fn test_field__bidho10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho10) as usize - ptr as usize } , 977usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_bidho10))) ; } test_field__bidho10 () ; fn test_field_offerrem10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem10) as usize - ptr as usize } , 978usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (offerrem10))) ; } test_field_offerrem10 () ; fn test_field__offerrem10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem10) as usize - ptr as usize } , 990usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_offerrem10))) ; } test_field__offerrem10 () ; fn test_field_bidrem10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem10) as usize - ptr as usize } , 991usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (bidrem10))) ; } test_field_bidrem10 () ; fn test_field__bidrem10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem10) as usize - ptr as usize } , 1003usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_bidrem10))) ; } test_field__bidrem10 () ; fn test_field_preoffercha10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . preoffercha10) as usize - ptr as usize } , 1004usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (preoffercha10))) ; } test_field_preoffercha10 () ; fn test_field__preoffercha10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _preoffercha10) as usize - ptr as usize } , 1016usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_preoffercha10))) ; } test_field__preoffercha10 () ; fn test_field_prebidcha10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prebidcha10) as usize - ptr as usize } , 1017usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (prebidcha10))) ; } test_field_prebidcha10 () ; fn test_field__prebidcha10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _prebidcha10) as usize - ptr as usize } , 1029usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_prebidcha10))) ; } test_field__prebidcha10 () ; fn test_field_offer () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offer) as usize - ptr as usize } , 1030usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (offer))) ; } test_field_offer () ; fn test_field__offer () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offer) as usize - ptr as usize } , 1042usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_offer))) ; } test_field__offer () ; fn test_field_bid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bid) as usize - ptr as usize } , 1043usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (bid))) ; } test_field_bid () ; fn test_field__bid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bid) as usize - ptr as usize } , 1055usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_bid))) ; } test_field__bid () ; fn test_field_preoffercha () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . preoffercha) as usize - ptr as usize } , 1056usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (preoffercha))) ; } test_field_preoffercha () ; fn test_field__preoffercha () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _preoffercha) as usize - ptr as usize } , 1068usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_preoffercha))) ; } test_field__preoffercha () ; fn test_field_prebidcha () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . prebidcha) as usize - ptr as usize } , 1069usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (prebidcha))) ; } test_field_prebidcha () ; fn test_field__prebidcha () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _prebidcha) as usize - ptr as usize } , 1081usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_prebidcha))) ; } test_field__prebidcha () ; fn test_field_hotime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . hotime) as usize - ptr as usize } , 1082usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (hotime))) ; } test_field_hotime () ; fn test_field__hotime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _hotime) as usize - ptr as usize } , 1090usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_hotime))) ; } test_field__hotime () ; fn test_field_yeprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . yeprice) as usize - ptr as usize } , 1091usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (yeprice))) ; } test_field_yeprice () ; fn test_field__yeprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _yeprice) as usize - ptr as usize } , 1099usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_yeprice))) ; } test_field__yeprice () ; fn test_field_yevolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . yevolume) as usize - ptr as usize } , 1100usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (yevolume))) ; } test_field_yevolume () ; fn test_field__yevolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _yevolume) as usize - ptr as usize } , 1112usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_yevolume))) ; } test_field__yevolume () ; fn test_field_yesign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . yesign) as usize - ptr as usize } , 1113usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (yesign))) ; } test_field_yesign () ; fn test_field__yesign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _yesign) as usize - ptr as usize } , 1114usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_yesign))) ; } test_field__yesign () ; fn test_field_yechange () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . yechange) as usize - ptr as usize } , 1115usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (yechange))) ; } test_field_yechange () ; fn test_field__yechange () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _yechange) as usize - ptr as usize } , 1123usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_yechange))) ; } test_field__yechange () ; fn test_field_yediff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . yediff) as usize - ptr as usize } , 1124usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (yediff))) ; } test_field_yediff () ; fn test_field__yediff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _yediff) as usize - ptr as usize } , 1130usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_yediff))) ; } test_field__yediff () ; fn test_field_tmoffer () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tmoffer) as usize - ptr as usize } , 1131usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (tmoffer))) ; } test_field_tmoffer () ; fn test_field__tmoffer () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _tmoffer) as usize - ptr as usize } , 1143usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_tmoffer))) ; } test_field__tmoffer () ; fn test_field_tmbid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tmbid) as usize - ptr as usize } , 1144usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (tmbid))) ; } test_field_tmbid () ; fn test_field__tmbid () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _tmbid) as usize - ptr as usize } , 1156usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_tmbid))) ; } test_field__tmbid () ; fn test_field_ho_status () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ho_status) as usize - ptr as usize } , 1157usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (ho_status))) ; } test_field_ho_status () ; fn test_field__ho_status () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ho_status) as usize - ptr as usize } , 1158usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_ho_status))) ; } test_field__ho_status () ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 1159usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 1165usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; fn test_field_uplmtprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . uplmtprice) as usize - ptr as usize } , 1166usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (uplmtprice))) ; } test_field_uplmtprice () ; fn test_field__uplmtprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _uplmtprice) as usize - ptr as usize } , 1174usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_uplmtprice))) ; } test_field__uplmtprice () ; fn test_field_dnlmtprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dnlmtprice) as usize - ptr as usize } , 1175usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (dnlmtprice))) ; } test_field_dnlmtprice () ; fn test_field__dnlmtprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dnlmtprice) as usize - ptr as usize } , 1183usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_dnlmtprice))) ; } test_field__dnlmtprice () ; fn test_field_open () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . open) as usize - ptr as usize } , 1184usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (open))) ; } test_field_open () ; fn test_field__open () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _open) as usize - ptr as usize } , 1192usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_open))) ; } test_field__open () ; fn test_field_high () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . high) as usize - ptr as usize } , 1193usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (high))) ; } test_field_high () ; fn test_field__high () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _high) as usize - ptr as usize } , 1201usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_high))) ; } test_field__high () ; fn test_field_low () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . low) as usize - ptr as usize } , 1202usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (low))) ; } test_field_low () ; fn test_field__low () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T1906OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _low) as usize - ptr as usize } , 1210usize , concat ! ("Offset of field: " , stringify ! (T1906OutBlock) , "::" , stringify ! (_low))) ; } test_field__low () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T3320InBlock { pub gicode : [:: std :: os :: raw :: c_char ; 7usize] , pub _gicode : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T3320InBlock () { assert_eq ! (:: std :: mem :: size_of :: < T3320InBlock > () , 8usize , concat ! ("Size of: " , stringify ! (T3320InBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T3320InBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T3320InBlock))) ; fn test_field_gicode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . gicode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T3320InBlock) , "::" , stringify ! (gicode))) ; } test_field_gicode () ; fn test_field__gicode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _gicode) as usize - ptr as usize } , 7usize , concat ! ("Offset of field: " , stringify ! (T3320InBlock) , "::" , stringify ! (_gicode))) ; } test_field__gicode () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T3320OutBlock { pub upgubunnm : [:: std :: os :: raw :: c_char ; 20usize] , pub _upgubunnm : :: std :: os :: raw :: c_char , pub sijangcd : [:: std :: os :: raw :: c_char ; 1usize] , pub _sijangcd : :: std :: os :: raw :: c_char , pub marketnm : [:: std :: os :: raw :: c_char ; 10usize] , pub _marketnm : :: std :: os :: raw :: c_char , pub company : [:: std :: os :: raw :: c_char ; 100usize] , pub _company : :: std :: os :: raw :: c_char , pub baddress : [:: std :: os :: raw :: c_char ; 100usize] , pub _baddress : :: std :: os :: raw :: c_char , pub btelno : [:: std :: os :: raw :: c_char ; 20usize] , pub _btelno : :: std :: os :: raw :: c_char , pub gsyyyy : [:: std :: os :: raw :: c_char ; 4usize] , pub _gsyyyy : :: std :: os :: raw :: c_char , pub gsmm : [:: std :: os :: raw :: c_char ; 2usize] , pub _gsmm : :: std :: os :: raw :: c_char , pub gsym : [:: std :: os :: raw :: c_char ; 6usize] , pub _gsym : :: std :: os :: raw :: c_char , pub lstprice : [:: std :: os :: raw :: c_char ; 12usize] , pub _lstprice : :: std :: os :: raw :: c_char , pub gstock : [:: std :: os :: raw :: c_char ; 12usize] , pub _gstock : :: std :: os :: raw :: c_char , pub homeurl : [:: std :: os :: raw :: c_char ; 50usize] , pub _homeurl : :: std :: os :: raw :: c_char , pub grdnm : [:: std :: os :: raw :: c_char ; 30usize] , pub _grdnm : :: std :: os :: raw :: c_char , pub foreignratio : [:: std :: os :: raw :: c_char ; 6usize] , pub _foreignratio : :: std :: os :: raw :: c_char , pub irtel : [:: std :: os :: raw :: c_char ; 30usize] , pub _irtel : :: std :: os :: raw :: c_char , pub capital : [:: std :: os :: raw :: c_char ; 12usize] , pub _capital : :: std :: os :: raw :: c_char , pub sigavalue : [:: std :: os :: raw :: c_char ; 12usize] , pub _sigavalue : :: std :: os :: raw :: c_char , pub cashsis : [:: std :: os :: raw :: c_char ; 12usize] , pub _cashsis : :: std :: os :: raw :: c_char , pub cashrate : [:: std :: os :: raw :: c_char ; 13usize] , pub _cashrate : :: std :: os :: raw :: c_char , pub price : [:: std :: os :: raw :: c_char ; 8usize] , pub _price : :: std :: os :: raw :: c_char , pub jnilclose : [:: std :: os :: raw :: c_char ; 8usize] , pub _jnilclose : :: std :: os :: raw :: c_char , pub padding_added : [:: std :: os :: raw :: c_char ; 6usize] , } # [test] fn bindgen_test_layout_T3320OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < T3320OutBlock > () , 495usize , concat ! ("Size of: " , stringify ! (T3320OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T3320OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T3320OutBlock))) ; fn test_field_upgubunnm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . upgubunnm) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (upgubunnm))) ; } test_field_upgubunnm () ; fn test_field__upgubunnm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _upgubunnm) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (_upgubunnm))) ; } test_field__upgubunnm () ; fn test_field_sijangcd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sijangcd) as usize - ptr as usize } , 21usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (sijangcd))) ; } test_field_sijangcd () ; fn test_field__sijangcd () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sijangcd) as usize - ptr as usize } , 22usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (_sijangcd))) ; } test_field__sijangcd () ; fn test_field_marketnm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . marketnm) as usize - ptr as usize } , 23usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (marketnm))) ; } test_field_marketnm () ; fn test_field__marketnm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _marketnm) as usize - ptr as usize } , 33usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (_marketnm))) ; } test_field__marketnm () ; fn test_field_company () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . company) as usize - ptr as usize } , 34usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (company))) ; } test_field_company () ; fn test_field__company () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _company) as usize - ptr as usize } , 134usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (_company))) ; } test_field__company () ; fn test_field_baddress () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . baddress) as usize - ptr as usize } , 135usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (baddress))) ; } test_field_baddress () ; fn test_field__baddress () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _baddress) as usize - ptr as usize } , 235usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (_baddress))) ; } test_field__baddress () ; fn test_field_btelno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . btelno) as usize - ptr as usize } , 236usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (btelno))) ; } test_field_btelno () ; fn test_field__btelno () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _btelno) as usize - ptr as usize } , 256usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (_btelno))) ; } test_field__btelno () ; fn test_field_gsyyyy () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . gsyyyy) as usize - ptr as usize } , 257usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (gsyyyy))) ; } test_field_gsyyyy () ; fn test_field__gsyyyy () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _gsyyyy) as usize - ptr as usize } , 261usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (_gsyyyy))) ; } test_field__gsyyyy () ; fn test_field_gsmm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . gsmm) as usize - ptr as usize } , 262usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (gsmm))) ; } test_field_gsmm () ; fn test_field__gsmm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _gsmm) as usize - ptr as usize } , 264usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (_gsmm))) ; } test_field__gsmm () ; fn test_field_gsym () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . gsym) as usize - ptr as usize } , 265usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (gsym))) ; } test_field_gsym () ; fn test_field__gsym () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _gsym) as usize - ptr as usize } , 271usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (_gsym))) ; } test_field__gsym () ; fn test_field_lstprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lstprice) as usize - ptr as usize } , 272usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (lstprice))) ; } test_field_lstprice () ; fn test_field__lstprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lstprice) as usize - ptr as usize } , 284usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (_lstprice))) ; } test_field__lstprice () ; fn test_field_gstock () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . gstock) as usize - ptr as usize } , 285usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (gstock))) ; } test_field_gstock () ; fn test_field__gstock () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _gstock) as usize - ptr as usize } , 297usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (_gstock))) ; } test_field__gstock () ; fn test_field_homeurl () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . homeurl) as usize - ptr as usize } , 298usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (homeurl))) ; } test_field_homeurl () ; fn test_field__homeurl () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _homeurl) as usize - ptr as usize } , 348usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (_homeurl))) ; } test_field__homeurl () ; fn test_field_grdnm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . grdnm) as usize - ptr as usize } , 349usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (grdnm))) ; } test_field_grdnm () ; fn test_field__grdnm () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _grdnm) as usize - ptr as usize } , 379usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (_grdnm))) ; } test_field__grdnm () ; fn test_field_foreignratio () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . foreignratio) as usize - ptr as usize } , 380usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (foreignratio))) ; } test_field_foreignratio () ; fn test_field__foreignratio () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _foreignratio) as usize - ptr as usize } , 386usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (_foreignratio))) ; } test_field__foreignratio () ; fn test_field_irtel () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . irtel) as usize - ptr as usize } , 387usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (irtel))) ; } test_field_irtel () ; fn test_field__irtel () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _irtel) as usize - ptr as usize } , 417usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (_irtel))) ; } test_field__irtel () ; fn test_field_capital () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . capital) as usize - ptr as usize } , 418usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (capital))) ; } test_field_capital () ; fn test_field__capital () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _capital) as usize - ptr as usize } , 430usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (_capital))) ; } test_field__capital () ; fn test_field_sigavalue () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sigavalue) as usize - ptr as usize } , 431usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (sigavalue))) ; } test_field_sigavalue () ; fn test_field__sigavalue () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sigavalue) as usize - ptr as usize } , 443usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (_sigavalue))) ; } test_field__sigavalue () ; fn test_field_cashsis () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cashsis) as usize - ptr as usize } , 444usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (cashsis))) ; } test_field_cashsis () ; fn test_field__cashsis () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cashsis) as usize - ptr as usize } , 456usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (_cashsis))) ; } test_field__cashsis () ; fn test_field_cashrate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cashrate) as usize - ptr as usize } , 457usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (cashrate))) ; } test_field_cashrate () ; fn test_field__cashrate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cashrate) as usize - ptr as usize } , 470usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (_cashrate))) ; } test_field__cashrate () ; fn test_field_price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . price) as usize - ptr as usize } , 471usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (price))) ; } test_field_price () ; fn test_field__price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _price) as usize - ptr as usize } , 479usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (_price))) ; } test_field__price () ; fn test_field_jnilclose () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jnilclose) as usize - ptr as usize } , 480usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (jnilclose))) ; } test_field_jnilclose () ; fn test_field__jnilclose () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jnilclose) as usize - ptr as usize } , 488usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (_jnilclose))) ; } test_field__jnilclose () ; fn test_field_padding_added () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . padding_added) as usize - ptr as usize } , 489usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock) , "::" , stringify ! (padding_added))) ; } test_field_padding_added () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T3320OutBlock1 { pub gicode : [:: std :: os :: raw :: c_char ; 7usize] , pub _gicode : :: std :: os :: raw :: c_char , pub gsym : [:: std :: os :: raw :: c_char ; 6usize] , pub _gsym : :: std :: os :: raw :: c_char , pub gsgb : [:: std :: os :: raw :: c_char ; 1usize] , pub _gsgb : :: std :: os :: raw :: c_char , pub per : [:: std :: os :: raw :: c_char ; 13usize] , pub _per : :: std :: os :: raw :: c_char , pub eps : [:: std :: os :: raw :: c_char ; 13usize] , pub _eps : :: std :: os :: raw :: c_char , pub pbr : [:: std :: os :: raw :: c_char ; 13usize] , pub _pbr : :: std :: os :: raw :: c_char , pub roa : [:: std :: os :: raw :: c_char ; 13usize] , pub _roa : :: std :: os :: raw :: c_char , pub roe : [:: std :: os :: raw :: c_char ; 13usize] , pub _roe : :: std :: os :: raw :: c_char , pub ebitda : [:: std :: os :: raw :: c_char ; 13usize] , pub _ebitda : :: std :: os :: raw :: c_char , pub evebitda : [:: std :: os :: raw :: c_char ; 13usize] , pub _evebitda : :: std :: os :: raw :: c_char , pub par : [:: std :: os :: raw :: c_char ; 13usize] , pub _par : :: std :: os :: raw :: c_char , pub sps : [:: std :: os :: raw :: c_char ; 13usize] , pub _sps : :: std :: os :: raw :: c_char , pub cps : [:: std :: os :: raw :: c_char ; 13usize] , pub _cps : :: std :: os :: raw :: c_char , pub bps : [:: std :: os :: raw :: c_char ; 13usize] , pub _bps : :: std :: os :: raw :: c_char , pub tper : [:: std :: os :: raw :: c_char ; 13usize] , pub _t_per : :: std :: os :: raw :: c_char , pub teps : [:: std :: os :: raw :: c_char ; 13usize] , pub _t_eps : :: std :: os :: raw :: c_char , pub peg : [:: std :: os :: raw :: c_char ; 13usize] , pub _peg : :: std :: os :: raw :: c_char , pub tpeg : [:: std :: os :: raw :: c_char ; 13usize] , pub _t_peg : :: std :: os :: raw :: c_char , pub tgsym : [:: std :: os :: raw :: c_char ; 6usize] , pub _t_gsym : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T3320OutBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < T3320OutBlock1 > () , 234usize , concat ! ("Size of: " , stringify ! (T3320OutBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < T3320OutBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (T3320OutBlock1))) ; fn test_field_gicode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . gicode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (gicode))) ; } test_field_gicode () ; fn test_field__gicode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _gicode) as usize - ptr as usize } , 7usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (_gicode))) ; } test_field__gicode () ; fn test_field_gsym () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . gsym) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (gsym))) ; } test_field_gsym () ; fn test_field__gsym () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _gsym) as usize - ptr as usize } , 14usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (_gsym))) ; } test_field__gsym () ; fn test_field_gsgb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . gsgb) as usize - ptr as usize } , 15usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (gsgb))) ; } test_field_gsgb () ; fn test_field__gsgb () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _gsgb) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (_gsgb))) ; } test_field__gsgb () ; fn test_field_per () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . per) as usize - ptr as usize } , 17usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (per))) ; } test_field_per () ; fn test_field__per () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _per) as usize - ptr as usize } , 30usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (_per))) ; } test_field__per () ; fn test_field_eps () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . eps) as usize - ptr as usize } , 31usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (eps))) ; } test_field_eps () ; fn test_field__eps () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _eps) as usize - ptr as usize } , 44usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (_eps))) ; } test_field__eps () ; fn test_field_pbr () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . pbr) as usize - ptr as usize } , 45usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (pbr))) ; } test_field_pbr () ; fn test_field__pbr () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _pbr) as usize - ptr as usize } , 58usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (_pbr))) ; } test_field__pbr () ; fn test_field_roa () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . roa) as usize - ptr as usize } , 59usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (roa))) ; } test_field_roa () ; fn test_field__roa () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _roa) as usize - ptr as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (_roa))) ; } test_field__roa () ; fn test_field_roe () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . roe) as usize - ptr as usize } , 73usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (roe))) ; } test_field_roe () ; fn test_field__roe () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _roe) as usize - ptr as usize } , 86usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (_roe))) ; } test_field__roe () ; fn test_field_ebitda () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ebitda) as usize - ptr as usize } , 87usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (ebitda))) ; } test_field_ebitda () ; fn test_field__ebitda () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ebitda) as usize - ptr as usize } , 100usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (_ebitda))) ; } test_field__ebitda () ; fn test_field_evebitda () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . evebitda) as usize - ptr as usize } , 101usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (evebitda))) ; } test_field_evebitda () ; fn test_field__evebitda () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _evebitda) as usize - ptr as usize } , 114usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (_evebitda))) ; } test_field__evebitda () ; fn test_field_par () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . par) as usize - ptr as usize } , 115usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (par))) ; } test_field_par () ; fn test_field__par () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _par) as usize - ptr as usize } , 128usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (_par))) ; } test_field__par () ; fn test_field_sps () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sps) as usize - ptr as usize } , 129usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (sps))) ; } test_field_sps () ; fn test_field__sps () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sps) as usize - ptr as usize } , 142usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (_sps))) ; } test_field__sps () ; fn test_field_cps () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cps) as usize - ptr as usize } , 143usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (cps))) ; } test_field_cps () ; fn test_field__cps () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cps) as usize - ptr as usize } , 156usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (_cps))) ; } test_field__cps () ; fn test_field_bps () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bps) as usize - ptr as usize } , 157usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (bps))) ; } test_field_bps () ; fn test_field__bps () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bps) as usize - ptr as usize } , 170usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (_bps))) ; } test_field__bps () ; fn test_field_tper () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tper) as usize - ptr as usize } , 171usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (tper))) ; } test_field_tper () ; fn test_field__t_per () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _t_per) as usize - ptr as usize } , 184usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (_t_per))) ; } test_field__t_per () ; fn test_field_teps () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . teps) as usize - ptr as usize } , 185usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (teps))) ; } test_field_teps () ; fn test_field__t_eps () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _t_eps) as usize - ptr as usize } , 198usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (_t_eps))) ; } test_field__t_eps () ; fn test_field_peg () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . peg) as usize - ptr as usize } , 199usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (peg))) ; } test_field_peg () ; fn test_field__peg () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _peg) as usize - ptr as usize } , 212usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (_peg))) ; } test_field__peg () ; fn test_field_tpeg () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tpeg) as usize - ptr as usize } , 213usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (tpeg))) ; } test_field_tpeg () ; fn test_field__t_peg () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _t_peg) as usize - ptr as usize } , 226usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (_t_peg))) ; } test_field__t_peg () ; fn test_field_tgsym () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tgsym) as usize - ptr as usize } , 227usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (tgsym))) ; } test_field_tgsym () ; fn test_field__t_gsym () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3320OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _t_gsym) as usize - ptr as usize } , 233usize , concat ! ("Offset of field: " , stringify ! (T3320OutBlock1) , "::" , stringify ! (_t_gsym))) ; } test_field__t_gsym () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T3341InBlock { pub gubun : [:: std :: os :: raw :: c_char ; 1usize] , pub _gubun : :: std :: os :: raw :: c_char , pub gubun1 : [:: std :: os :: raw :: c_char ; 1usize] , pub _gubun1 : :: std :: os :: raw :: c_char , pub gubun2 : [:: std :: os :: raw :: c_char ; 1usize] , pub _gubun2 : :: std :: os :: raw :: c_char , pub idx : [:: std :: os :: raw :: c_char ; 4usize] , pub _idx : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T3341InBlock () { assert_eq ! (:: std :: mem :: size_of :: < T3341InBlock > () , 11usize , concat ! ("Size of: " , stringify ! (T3341InBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T3341InBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T3341InBlock))) ; fn test_field_gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . gubun) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T3341InBlock) , "::" , stringify ! (gubun))) ; } test_field_gubun () ; fn test_field__gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _gubun) as usize - ptr as usize } , 1usize , concat ! ("Offset of field: " , stringify ! (T3341InBlock) , "::" , stringify ! (_gubun))) ; } test_field__gubun () ; fn test_field_gubun1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . gubun1) as usize - ptr as usize } , 2usize , concat ! ("Offset of field: " , stringify ! (T3341InBlock) , "::" , stringify ! (gubun1))) ; } test_field_gubun1 () ; fn test_field__gubun1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _gubun1) as usize - ptr as usize } , 3usize , concat ! ("Offset of field: " , stringify ! (T3341InBlock) , "::" , stringify ! (_gubun1))) ; } test_field__gubun1 () ; fn test_field_gubun2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . gubun2) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (T3341InBlock) , "::" , stringify ! (gubun2))) ; } test_field_gubun2 () ; fn test_field__gubun2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _gubun2) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (T3341InBlock) , "::" , stringify ! (_gubun2))) ; } test_field__gubun2 () ; fn test_field_idx () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . idx) as usize - ptr as usize } , 6usize , concat ! ("Offset of field: " , stringify ! (T3341InBlock) , "::" , stringify ! (idx))) ; } test_field_idx () ; fn test_field__idx () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _idx) as usize - ptr as usize } , 10usize , concat ! ("Offset of field: " , stringify ! (T3341InBlock) , "::" , stringify ! (_idx))) ; } test_field__idx () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T3341OutBlock { pub cnt : [:: std :: os :: raw :: c_char ; 4usize] , pub _cnt : :: std :: os :: raw :: c_char , pub idx : [:: std :: os :: raw :: c_char ; 4usize] , pub _idx : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T3341OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < T3341OutBlock > () , 10usize , concat ! ("Size of: " , stringify ! (T3341OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T3341OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T3341OutBlock))) ; fn test_field_cnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cnt) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock) , "::" , stringify ! (cnt))) ; } test_field_cnt () ; fn test_field__cnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cnt) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock) , "::" , stringify ! (_cnt))) ; } test_field__cnt () ; fn test_field_idx () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . idx) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock) , "::" , stringify ! (idx))) ; } test_field_idx () ; fn test_field__idx () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _idx) as usize - ptr as usize } , 9usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock) , "::" , stringify ! (_idx))) ; } test_field__idx () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T3341OutBlock1 { pub rank : [:: std :: os :: raw :: c_char ; 4usize] , pub _rank : :: std :: os :: raw :: c_char , pub hname : [:: std :: os :: raw :: c_char ; 20usize] , pub _hname : :: std :: os :: raw :: c_char , pub salesgrowth : [:: std :: os :: raw :: c_char ; 12usize] , pub _salesgrowth : :: std :: os :: raw :: c_char , pub operatingincomegrowt : [:: std :: os :: raw :: c_char ; 12usize] , pub _operatingincomegrowt : :: std :: os :: raw :: c_char , pub ordinaryincomegrowth : [:: std :: os :: raw :: c_char ; 12usize] , pub _ordinaryincomegrowth : :: std :: os :: raw :: c_char , pub liabilitytoequity : [:: std :: os :: raw :: c_char ; 12usize] , pub _liabilitytoequity : :: std :: os :: raw :: c_char , pub enterpriseratio : [:: std :: os :: raw :: c_char ; 12usize] , pub _enterpriseratio : :: std :: os :: raw :: c_char , pub eps : [:: std :: os :: raw :: c_char ; 12usize] , pub _eps : :: std :: os :: raw :: c_char , pub bps : [:: std :: os :: raw :: c_char ; 12usize] , pub _bps : :: std :: os :: raw :: c_char , pub roe : [:: std :: os :: raw :: c_char ; 12usize] , pub _roe : :: std :: os :: raw :: c_char , pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , pub per : [:: std :: os :: raw :: c_char ; 13usize] , pub _per : :: std :: os :: raw :: c_char , pub pbr : [:: std :: os :: raw :: c_char ; 13usize] , pub _pbr : :: std :: os :: raw :: c_char , pub peg : [:: std :: os :: raw :: c_char ; 13usize] , pub _peg : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T3341OutBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < T3341OutBlock1 > () , 179usize , concat ! ("Size of: " , stringify ! (T3341OutBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < T3341OutBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (T3341OutBlock1))) ; fn test_field_rank () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . rank) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock1) , "::" , stringify ! (rank))) ; } test_field_rank () ; fn test_field__rank () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _rank) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock1) , "::" , stringify ! (_rank))) ; } test_field__rank () ; fn test_field_hname () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . hname) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock1) , "::" , stringify ! (hname))) ; } test_field_hname () ; fn test_field__hname () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _hname) as usize - ptr as usize } , 25usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock1) , "::" , stringify ! (_hname))) ; } test_field__hname () ; fn test_field_salesgrowth () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . salesgrowth) as usize - ptr as usize } , 26usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock1) , "::" , stringify ! (salesgrowth))) ; } test_field_salesgrowth () ; fn test_field__salesgrowth () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _salesgrowth) as usize - ptr as usize } , 38usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock1) , "::" , stringify ! (_salesgrowth))) ; } test_field__salesgrowth () ; fn test_field_operatingincomegrowt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . operatingincomegrowt) as usize - ptr as usize } , 39usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock1) , "::" , stringify ! (operatingincomegrowt))) ; } test_field_operatingincomegrowt () ; fn test_field__operatingincomegrowt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _operatingincomegrowt) as usize - ptr as usize } , 51usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock1) , "::" , stringify ! (_operatingincomegrowt))) ; } test_field__operatingincomegrowt () ; fn test_field_ordinaryincomegrowth () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ordinaryincomegrowth) as usize - ptr as usize } , 52usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock1) , "::" , stringify ! (ordinaryincomegrowth))) ; } test_field_ordinaryincomegrowth () ; fn test_field__ordinaryincomegrowth () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ordinaryincomegrowth) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock1) , "::" , stringify ! (_ordinaryincomegrowth))) ; } test_field__ordinaryincomegrowth () ; fn test_field_liabilitytoequity () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . liabilitytoequity) as usize - ptr as usize } , 65usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock1) , "::" , stringify ! (liabilitytoequity))) ; } test_field_liabilitytoequity () ; fn test_field__liabilitytoequity () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _liabilitytoequity) as usize - ptr as usize } , 77usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock1) , "::" , stringify ! (_liabilitytoequity))) ; } test_field__liabilitytoequity () ; fn test_field_enterpriseratio () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . enterpriseratio) as usize - ptr as usize } , 78usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock1) , "::" , stringify ! (enterpriseratio))) ; } test_field_enterpriseratio () ; fn test_field__enterpriseratio () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _enterpriseratio) as usize - ptr as usize } , 90usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock1) , "::" , stringify ! (_enterpriseratio))) ; } test_field__enterpriseratio () ; fn test_field_eps () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . eps) as usize - ptr as usize } , 91usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock1) , "::" , stringify ! (eps))) ; } test_field_eps () ; fn test_field__eps () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _eps) as usize - ptr as usize } , 103usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock1) , "::" , stringify ! (_eps))) ; } test_field__eps () ; fn test_field_bps () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bps) as usize - ptr as usize } , 104usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock1) , "::" , stringify ! (bps))) ; } test_field_bps () ; fn test_field__bps () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bps) as usize - ptr as usize } , 116usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock1) , "::" , stringify ! (_bps))) ; } test_field__bps () ; fn test_field_roe () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . roe) as usize - ptr as usize } , 117usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock1) , "::" , stringify ! (roe))) ; } test_field_roe () ; fn test_field__roe () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _roe) as usize - ptr as usize } , 129usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock1) , "::" , stringify ! (_roe))) ; } test_field__roe () ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 130usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock1) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 136usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock1) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; fn test_field_per () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . per) as usize - ptr as usize } , 137usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock1) , "::" , stringify ! (per))) ; } test_field_per () ; fn test_field__per () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _per) as usize - ptr as usize } , 150usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock1) , "::" , stringify ! (_per))) ; } test_field__per () ; fn test_field_pbr () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . pbr) as usize - ptr as usize } , 151usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock1) , "::" , stringify ! (pbr))) ; } test_field_pbr () ; fn test_field__pbr () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _pbr) as usize - ptr as usize } , 164usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock1) , "::" , stringify ! (_pbr))) ; } test_field__pbr () ; fn test_field_peg () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . peg) as usize - ptr as usize } , 165usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock1) , "::" , stringify ! (peg))) ; } test_field_peg () ; fn test_field__peg () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T3341OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _peg) as usize - ptr as usize } , 178usize , concat ! ("Offset of field: " , stringify ! (T3341OutBlock1) , "::" , stringify ! (_peg))) ; } test_field__peg () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T8407InBlock { pub nrec : [:: std :: os :: raw :: c_char ; 3usize] , pub _nrec : :: std :: os :: raw :: c_char , pub shcode : [:: std :: os :: raw :: c_char ; 300usize] , pub _shcode : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T8407InBlock () { assert_eq ! (:: std :: mem :: size_of :: < T8407InBlock > () , 305usize , concat ! ("Size of: " , stringify ! (T8407InBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T8407InBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T8407InBlock))) ; fn test_field_nrec () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . nrec) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T8407InBlock) , "::" , stringify ! (nrec))) ; } test_field_nrec () ; fn test_field__nrec () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _nrec) as usize - ptr as usize } , 3usize , concat ! ("Offset of field: " , stringify ! (T8407InBlock) , "::" , stringify ! (_nrec))) ; } test_field__nrec () ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (T8407InBlock) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 304usize , concat ! ("Offset of field: " , stringify ! (T8407InBlock) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T8407OutBlock1 { pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , pub hname : [:: std :: os :: raw :: c_char ; 40usize] , pub _hname : :: std :: os :: raw :: c_char , pub price : [:: std :: os :: raw :: c_char ; 8usize] , pub _price : :: std :: os :: raw :: c_char , pub sign : [:: std :: os :: raw :: c_char ; 1usize] , pub _sign : :: std :: os :: raw :: c_char , pub change : [:: std :: os :: raw :: c_char ; 8usize] , pub _change : :: std :: os :: raw :: c_char , pub diff : [:: std :: os :: raw :: c_char ; 6usize] , pub _diff : :: std :: os :: raw :: c_char , pub volume : [:: std :: os :: raw :: c_char ; 12usize] , pub _volume : :: std :: os :: raw :: c_char , pub offerho : [:: std :: os :: raw :: c_char ; 8usize] , pub _offerho : :: std :: os :: raw :: c_char , pub bidho : [:: std :: os :: raw :: c_char ; 8usize] , pub _bidho : :: std :: os :: raw :: c_char , pub cvolume : [:: std :: os :: raw :: c_char ; 8usize] , pub _cvolume : :: std :: os :: raw :: c_char , pub chdegree : [:: std :: os :: raw :: c_char ; 9usize] , pub _chdegree : :: std :: os :: raw :: c_char , pub open : [:: std :: os :: raw :: c_char ; 8usize] , pub _open : :: std :: os :: raw :: c_char , pub high : [:: std :: os :: raw :: c_char ; 8usize] , pub _high : :: std :: os :: raw :: c_char , pub low : [:: std :: os :: raw :: c_char ; 8usize] , pub _low : :: std :: os :: raw :: c_char , pub value : [:: std :: os :: raw :: c_char ; 12usize] , pub _value : :: std :: os :: raw :: c_char , pub offerrem : [:: std :: os :: raw :: c_char ; 12usize] , pub _offerrem : :: std :: os :: raw :: c_char , pub bidrem : [:: std :: os :: raw :: c_char ; 12usize] , pub _bidrem : :: std :: os :: raw :: c_char , pub totofferrem : [:: std :: os :: raw :: c_char ; 12usize] , pub _totofferrem : :: std :: os :: raw :: c_char , pub totbidrem : [:: std :: os :: raw :: c_char ; 12usize] , pub _totbidrem : :: std :: os :: raw :: c_char , pub jnilclose : [:: std :: os :: raw :: c_char ; 8usize] , pub _jnilclose : :: std :: os :: raw :: c_char , pub uplmtprice : [:: std :: os :: raw :: c_char ; 8usize] , pub _uplmtprice : :: std :: os :: raw :: c_char , pub dnlmtprice : [:: std :: os :: raw :: c_char ; 8usize] , pub _dnlmtprice : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T8407OutBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < T8407OutBlock1 > () , 244usize , concat ! ("Size of: " , stringify ! (T8407OutBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < T8407OutBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (T8407OutBlock1))) ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 6usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; fn test_field_hname () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . hname) as usize - ptr as usize } , 7usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (hname))) ; } test_field_hname () ; fn test_field__hname () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _hname) as usize - ptr as usize } , 47usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (_hname))) ; } test_field__hname () ; fn test_field_price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . price) as usize - ptr as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (price))) ; } test_field_price () ; fn test_field__price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _price) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (_price))) ; } test_field__price () ; fn test_field_sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sign) as usize - ptr as usize } , 57usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (sign))) ; } test_field_sign () ; fn test_field__sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sign) as usize - ptr as usize } , 58usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (_sign))) ; } test_field__sign () ; fn test_field_change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . change) as usize - ptr as usize } , 59usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (change))) ; } test_field_change () ; fn test_field__change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _change) as usize - ptr as usize } , 67usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (_change))) ; } test_field__change () ; fn test_field_diff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . diff) as usize - ptr as usize } , 68usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (diff))) ; } test_field_diff () ; fn test_field__diff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _diff) as usize - ptr as usize } , 74usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (_diff))) ; } test_field__diff () ; fn test_field_volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . volume) as usize - ptr as usize } , 75usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (volume))) ; } test_field_volume () ; fn test_field__volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _volume) as usize - ptr as usize } , 87usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (_volume))) ; } test_field__volume () ; fn test_field_offerho () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho) as usize - ptr as usize } , 88usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (offerho))) ; } test_field_offerho () ; fn test_field__offerho () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho) as usize - ptr as usize } , 96usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (_offerho))) ; } test_field__offerho () ; fn test_field_bidho () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho) as usize - ptr as usize } , 97usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (bidho))) ; } test_field_bidho () ; fn test_field__bidho () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho) as usize - ptr as usize } , 105usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (_bidho))) ; } test_field__bidho () ; fn test_field_cvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cvolume) as usize - ptr as usize } , 106usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (cvolume))) ; } test_field_cvolume () ; fn test_field__cvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cvolume) as usize - ptr as usize } , 114usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (_cvolume))) ; } test_field__cvolume () ; fn test_field_chdegree () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . chdegree) as usize - ptr as usize } , 115usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (chdegree))) ; } test_field_chdegree () ; fn test_field__chdegree () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _chdegree) as usize - ptr as usize } , 124usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (_chdegree))) ; } test_field__chdegree () ; fn test_field_open () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . open) as usize - ptr as usize } , 125usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (open))) ; } test_field_open () ; fn test_field__open () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _open) as usize - ptr as usize } , 133usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (_open))) ; } test_field__open () ; fn test_field_high () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . high) as usize - ptr as usize } , 134usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (high))) ; } test_field_high () ; fn test_field__high () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _high) as usize - ptr as usize } , 142usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (_high))) ; } test_field__high () ; fn test_field_low () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . low) as usize - ptr as usize } , 143usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (low))) ; } test_field_low () ; fn test_field__low () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _low) as usize - ptr as usize } , 151usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (_low))) ; } test_field__low () ; fn test_field_value () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . value) as usize - ptr as usize } , 152usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (value))) ; } test_field_value () ; fn test_field__value () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _value) as usize - ptr as usize } , 164usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (_value))) ; } test_field__value () ; fn test_field_offerrem () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem) as usize - ptr as usize } , 165usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (offerrem))) ; } test_field_offerrem () ; fn test_field__offerrem () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem) as usize - ptr as usize } , 177usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (_offerrem))) ; } test_field__offerrem () ; fn test_field_bidrem () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem) as usize - ptr as usize } , 178usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (bidrem))) ; } test_field_bidrem () ; fn test_field__bidrem () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem) as usize - ptr as usize } , 190usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (_bidrem))) ; } test_field__bidrem () ; fn test_field_totofferrem () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . totofferrem) as usize - ptr as usize } , 191usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (totofferrem))) ; } test_field_totofferrem () ; fn test_field__totofferrem () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _totofferrem) as usize - ptr as usize } , 203usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (_totofferrem))) ; } test_field__totofferrem () ; fn test_field_totbidrem () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . totbidrem) as usize - ptr as usize } , 204usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (totbidrem))) ; } test_field_totbidrem () ; fn test_field__totbidrem () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _totbidrem) as usize - ptr as usize } , 216usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (_totbidrem))) ; } test_field__totbidrem () ; fn test_field_jnilclose () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jnilclose) as usize - ptr as usize } , 217usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (jnilclose))) ; } test_field_jnilclose () ; fn test_field__jnilclose () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jnilclose) as usize - ptr as usize } , 225usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (_jnilclose))) ; } test_field__jnilclose () ; fn test_field_uplmtprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . uplmtprice) as usize - ptr as usize } , 226usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (uplmtprice))) ; } test_field_uplmtprice () ; fn test_field__uplmtprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _uplmtprice) as usize - ptr as usize } , 234usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (_uplmtprice))) ; } test_field__uplmtprice () ; fn test_field_dnlmtprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dnlmtprice) as usize - ptr as usize } , 235usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (dnlmtprice))) ; } test_field_dnlmtprice () ; fn test_field__dnlmtprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8407OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dnlmtprice) as usize - ptr as usize } , 243usize , concat ! ("Offset of field: " , stringify ! (T8407OutBlock1) , "::" , stringify ! (_dnlmtprice))) ; } test_field__dnlmtprice () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T8411InBlock { pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , pub ncnt : [:: std :: os :: raw :: c_char ; 4usize] , pub _ncnt : :: std :: os :: raw :: c_char , pub qrycnt : [:: std :: os :: raw :: c_char ; 4usize] , pub _qrycnt : :: std :: os :: raw :: c_char , pub nday : [:: std :: os :: raw :: c_char ; 1usize] , pub _nday : :: std :: os :: raw :: c_char , pub sdate : [:: std :: os :: raw :: c_char ; 8usize] , pub _sdate : :: std :: os :: raw :: c_char , pub stime : [:: std :: os :: raw :: c_char ; 6usize] , pub _stime : :: std :: os :: raw :: c_char , pub edate : [:: std :: os :: raw :: c_char ; 8usize] , pub _edate : :: std :: os :: raw :: c_char , pub etime : [:: std :: os :: raw :: c_char ; 6usize] , pub _etime : :: std :: os :: raw :: c_char , pub cts_date : [:: std :: os :: raw :: c_char ; 8usize] , pub _cts_date : :: std :: os :: raw :: c_char , pub cts_time : [:: std :: os :: raw :: c_char ; 10usize] , pub _cts_time : :: std :: os :: raw :: c_char , pub comp_yn : [:: std :: os :: raw :: c_char ; 1usize] , pub _comp_yn : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T8411InBlock () { assert_eq ! (:: std :: mem :: size_of :: < T8411InBlock > () , 73usize , concat ! ("Size of: " , stringify ! (T8411InBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T8411InBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T8411InBlock))) ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T8411InBlock) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 6usize , concat ! ("Offset of field: " , stringify ! (T8411InBlock) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; fn test_field_ncnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ncnt) as usize - ptr as usize } , 7usize , concat ! ("Offset of field: " , stringify ! (T8411InBlock) , "::" , stringify ! (ncnt))) ; } test_field_ncnt () ; fn test_field__ncnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ncnt) as usize - ptr as usize } , 11usize , concat ! ("Offset of field: " , stringify ! (T8411InBlock) , "::" , stringify ! (_ncnt))) ; } test_field__ncnt () ; fn test_field_qrycnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . qrycnt) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (T8411InBlock) , "::" , stringify ! (qrycnt))) ; } test_field_qrycnt () ; fn test_field__qrycnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _qrycnt) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (T8411InBlock) , "::" , stringify ! (_qrycnt))) ; } test_field__qrycnt () ; fn test_field_nday () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . nday) as usize - ptr as usize } , 17usize , concat ! ("Offset of field: " , stringify ! (T8411InBlock) , "::" , stringify ! (nday))) ; } test_field_nday () ; fn test_field__nday () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _nday) as usize - ptr as usize } , 18usize , concat ! ("Offset of field: " , stringify ! (T8411InBlock) , "::" , stringify ! (_nday))) ; } test_field__nday () ; fn test_field_sdate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sdate) as usize - ptr as usize } , 19usize , concat ! ("Offset of field: " , stringify ! (T8411InBlock) , "::" , stringify ! (sdate))) ; } test_field_sdate () ; fn test_field__sdate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sdate) as usize - ptr as usize } , 27usize , concat ! ("Offset of field: " , stringify ! (T8411InBlock) , "::" , stringify ! (_sdate))) ; } test_field__sdate () ; fn test_field_stime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . stime) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (T8411InBlock) , "::" , stringify ! (stime))) ; } test_field_stime () ; fn test_field__stime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _stime) as usize - ptr as usize } , 34usize , concat ! ("Offset of field: " , stringify ! (T8411InBlock) , "::" , stringify ! (_stime))) ; } test_field__stime () ; fn test_field_edate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . edate) as usize - ptr as usize } , 35usize , concat ! ("Offset of field: " , stringify ! (T8411InBlock) , "::" , stringify ! (edate))) ; } test_field_edate () ; fn test_field__edate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _edate) as usize - ptr as usize } , 43usize , concat ! ("Offset of field: " , stringify ! (T8411InBlock) , "::" , stringify ! (_edate))) ; } test_field__edate () ; fn test_field_etime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . etime) as usize - ptr as usize } , 44usize , concat ! ("Offset of field: " , stringify ! (T8411InBlock) , "::" , stringify ! (etime))) ; } test_field_etime () ; fn test_field__etime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _etime) as usize - ptr as usize } , 50usize , concat ! ("Offset of field: " , stringify ! (T8411InBlock) , "::" , stringify ! (_etime))) ; } test_field__etime () ; fn test_field_cts_date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_date) as usize - ptr as usize } , 51usize , concat ! ("Offset of field: " , stringify ! (T8411InBlock) , "::" , stringify ! (cts_date))) ; } test_field_cts_date () ; fn test_field__cts_date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cts_date) as usize - ptr as usize } , 59usize , concat ! ("Offset of field: " , stringify ! (T8411InBlock) , "::" , stringify ! (_cts_date))) ; } test_field__cts_date () ; fn test_field_cts_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_time) as usize - ptr as usize } , 60usize , concat ! ("Offset of field: " , stringify ! (T8411InBlock) , "::" , stringify ! (cts_time))) ; } test_field_cts_time () ; fn test_field__cts_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cts_time) as usize - ptr as usize } , 70usize , concat ! ("Offset of field: " , stringify ! (T8411InBlock) , "::" , stringify ! (_cts_time))) ; } test_field__cts_time () ; fn test_field_comp_yn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . comp_yn) as usize - ptr as usize } , 71usize , concat ! ("Offset of field: " , stringify ! (T8411InBlock) , "::" , stringify ! (comp_yn))) ; } test_field_comp_yn () ; fn test_field__comp_yn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _comp_yn) as usize - ptr as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (T8411InBlock) , "::" , stringify ! (_comp_yn))) ; } test_field__comp_yn () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T8411OutBlock { pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , pub jisiga : [:: std :: os :: raw :: c_char ; 8usize] , pub _jisiga : :: std :: os :: raw :: c_char , pub jihigh : [:: std :: os :: raw :: c_char ; 8usize] , pub _jihigh : :: std :: os :: raw :: c_char , pub jilow : [:: std :: os :: raw :: c_char ; 8usize] , pub _jilow : :: std :: os :: raw :: c_char , pub jiclose : [:: std :: os :: raw :: c_char ; 8usize] , pub _jiclose : :: std :: os :: raw :: c_char , pub jivolume : [:: std :: os :: raw :: c_char ; 12usize] , pub _jivolume : :: std :: os :: raw :: c_char , pub disiga : [:: std :: os :: raw :: c_char ; 8usize] , pub _disiga : :: std :: os :: raw :: c_char , pub dihigh : [:: std :: os :: raw :: c_char ; 8usize] , pub _dihigh : :: std :: os :: raw :: c_char , pub dilow : [:: std :: os :: raw :: c_char ; 8usize] , pub _dilow : :: std :: os :: raw :: c_char , pub diclose : [:: std :: os :: raw :: c_char ; 8usize] , pub _diclose : :: std :: os :: raw :: c_char , pub highend : [:: std :: os :: raw :: c_char ; 8usize] , pub _highend : :: std :: os :: raw :: c_char , pub lowend : [:: std :: os :: raw :: c_char ; 8usize] , pub _lowend : :: std :: os :: raw :: c_char , pub cts_date : [:: std :: os :: raw :: c_char ; 8usize] , pub _cts_date : :: std :: os :: raw :: c_char , pub cts_time : [:: std :: os :: raw :: c_char ; 10usize] , pub _cts_time : :: std :: os :: raw :: c_char , pub s_time : [:: std :: os :: raw :: c_char ; 6usize] , pub _s_time : :: std :: os :: raw :: c_char , pub e_time : [:: std :: os :: raw :: c_char ; 6usize] , pub _e_time : :: std :: os :: raw :: c_char , pub dshmin : [:: std :: os :: raw :: c_char ; 2usize] , pub _dshmin : :: std :: os :: raw :: c_char , pub rec_count : [:: std :: os :: raw :: c_char ; 7usize] , pub _rec_count : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T8411OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < T8411OutBlock > () , 155usize , concat ! ("Size of: " , stringify ! (T8411OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T8411OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T8411OutBlock))) ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 6usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; fn test_field_jisiga () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jisiga) as usize - ptr as usize } , 7usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (jisiga))) ; } test_field_jisiga () ; fn test_field__jisiga () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jisiga) as usize - ptr as usize } , 15usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (_jisiga))) ; } test_field__jisiga () ; fn test_field_jihigh () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jihigh) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (jihigh))) ; } test_field_jihigh () ; fn test_field__jihigh () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jihigh) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (_jihigh))) ; } test_field__jihigh () ; fn test_field_jilow () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jilow) as usize - ptr as usize } , 25usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (jilow))) ; } test_field_jilow () ; fn test_field__jilow () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jilow) as usize - ptr as usize } , 33usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (_jilow))) ; } test_field__jilow () ; fn test_field_jiclose () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jiclose) as usize - ptr as usize } , 34usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (jiclose))) ; } test_field_jiclose () ; fn test_field__jiclose () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jiclose) as usize - ptr as usize } , 42usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (_jiclose))) ; } test_field__jiclose () ; fn test_field_jivolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jivolume) as usize - ptr as usize } , 43usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (jivolume))) ; } test_field_jivolume () ; fn test_field__jivolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jivolume) as usize - ptr as usize } , 55usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (_jivolume))) ; } test_field__jivolume () ; fn test_field_disiga () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . disiga) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (disiga))) ; } test_field_disiga () ; fn test_field__disiga () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _disiga) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (_disiga))) ; } test_field__disiga () ; fn test_field_dihigh () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dihigh) as usize - ptr as usize } , 65usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (dihigh))) ; } test_field_dihigh () ; fn test_field__dihigh () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dihigh) as usize - ptr as usize } , 73usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (_dihigh))) ; } test_field__dihigh () ; fn test_field_dilow () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dilow) as usize - ptr as usize } , 74usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (dilow))) ; } test_field_dilow () ; fn test_field__dilow () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dilow) as usize - ptr as usize } , 82usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (_dilow))) ; } test_field__dilow () ; fn test_field_diclose () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . diclose) as usize - ptr as usize } , 83usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (diclose))) ; } test_field_diclose () ; fn test_field__diclose () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _diclose) as usize - ptr as usize } , 91usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (_diclose))) ; } test_field__diclose () ; fn test_field_highend () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . highend) as usize - ptr as usize } , 92usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (highend))) ; } test_field_highend () ; fn test_field__highend () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _highend) as usize - ptr as usize } , 100usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (_highend))) ; } test_field__highend () ; fn test_field_lowend () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lowend) as usize - ptr as usize } , 101usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (lowend))) ; } test_field_lowend () ; fn test_field__lowend () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lowend) as usize - ptr as usize } , 109usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (_lowend))) ; } test_field__lowend () ; fn test_field_cts_date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_date) as usize - ptr as usize } , 110usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (cts_date))) ; } test_field_cts_date () ; fn test_field__cts_date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cts_date) as usize - ptr as usize } , 118usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (_cts_date))) ; } test_field__cts_date () ; fn test_field_cts_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_time) as usize - ptr as usize } , 119usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (cts_time))) ; } test_field_cts_time () ; fn test_field__cts_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cts_time) as usize - ptr as usize } , 129usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (_cts_time))) ; } test_field__cts_time () ; fn test_field_s_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . s_time) as usize - ptr as usize } , 130usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (s_time))) ; } test_field_s_time () ; fn test_field__s_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _s_time) as usize - ptr as usize } , 136usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (_s_time))) ; } test_field__s_time () ; fn test_field_e_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . e_time) as usize - ptr as usize } , 137usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (e_time))) ; } test_field_e_time () ; fn test_field__e_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _e_time) as usize - ptr as usize } , 143usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (_e_time))) ; } test_field__e_time () ; fn test_field_dshmin () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dshmin) as usize - ptr as usize } , 144usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (dshmin))) ; } test_field_dshmin () ; fn test_field__dshmin () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dshmin) as usize - ptr as usize } , 146usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (_dshmin))) ; } test_field__dshmin () ; fn test_field_rec_count () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . rec_count) as usize - ptr as usize } , 147usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (rec_count))) ; } test_field_rec_count () ; fn test_field__rec_count () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _rec_count) as usize - ptr as usize } , 154usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock) , "::" , stringify ! (_rec_count))) ; } test_field__rec_count () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T8411OutBlock1 { pub date : [:: std :: os :: raw :: c_char ; 8usize] , pub _date : :: std :: os :: raw :: c_char , pub time : [:: std :: os :: raw :: c_char ; 10usize] , pub _time : :: std :: os :: raw :: c_char , pub open : [:: std :: os :: raw :: c_char ; 8usize] , pub _open : :: std :: os :: raw :: c_char , pub high : [:: std :: os :: raw :: c_char ; 8usize] , pub _high : :: std :: os :: raw :: c_char , pub low : [:: std :: os :: raw :: c_char ; 8usize] , pub _low : :: std :: os :: raw :: c_char , pub close : [:: std :: os :: raw :: c_char ; 8usize] , pub _close : :: std :: os :: raw :: c_char , pub jdiff_vol : [:: std :: os :: raw :: c_char ; 12usize] , pub _jdiff_vol : :: std :: os :: raw :: c_char , pub jongchk : [:: std :: os :: raw :: c_char ; 13usize] , pub _jongchk : :: std :: os :: raw :: c_char , pub rate : [:: std :: os :: raw :: c_char ; 6usize] , pub _rate : :: std :: os :: raw :: c_char , pub pricechk : [:: std :: os :: raw :: c_char ; 13usize] , pub _pricechk : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T8411OutBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < T8411OutBlock1 > () , 104usize , concat ! ("Size of: " , stringify ! (T8411OutBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < T8411OutBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (T8411OutBlock1))) ; fn test_field_date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . date) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock1) , "::" , stringify ! (date))) ; } test_field_date () ; fn test_field__date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _date) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock1) , "::" , stringify ! (_date))) ; } test_field__date () ; fn test_field_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . time) as usize - ptr as usize } , 9usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock1) , "::" , stringify ! (time))) ; } test_field_time () ; fn test_field__time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _time) as usize - ptr as usize } , 19usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock1) , "::" , stringify ! (_time))) ; } test_field__time () ; fn test_field_open () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . open) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock1) , "::" , stringify ! (open))) ; } test_field_open () ; fn test_field__open () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _open) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock1) , "::" , stringify ! (_open))) ; } test_field__open () ; fn test_field_high () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . high) as usize - ptr as usize } , 29usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock1) , "::" , stringify ! (high))) ; } test_field_high () ; fn test_field__high () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _high) as usize - ptr as usize } , 37usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock1) , "::" , stringify ! (_high))) ; } test_field__high () ; fn test_field_low () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . low) as usize - ptr as usize } , 38usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock1) , "::" , stringify ! (low))) ; } test_field_low () ; fn test_field__low () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _low) as usize - ptr as usize } , 46usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock1) , "::" , stringify ! (_low))) ; } test_field__low () ; fn test_field_close () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . close) as usize - ptr as usize } , 47usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock1) , "::" , stringify ! (close))) ; } test_field_close () ; fn test_field__close () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _close) as usize - ptr as usize } , 55usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock1) , "::" , stringify ! (_close))) ; } test_field__close () ; fn test_field_jdiff_vol () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jdiff_vol) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock1) , "::" , stringify ! (jdiff_vol))) ; } test_field_jdiff_vol () ; fn test_field__jdiff_vol () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jdiff_vol) as usize - ptr as usize } , 68usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock1) , "::" , stringify ! (_jdiff_vol))) ; } test_field__jdiff_vol () ; fn test_field_jongchk () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jongchk) as usize - ptr as usize } , 69usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock1) , "::" , stringify ! (jongchk))) ; } test_field_jongchk () ; fn test_field__jongchk () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jongchk) as usize - ptr as usize } , 82usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock1) , "::" , stringify ! (_jongchk))) ; } test_field__jongchk () ; fn test_field_rate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . rate) as usize - ptr as usize } , 83usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock1) , "::" , stringify ! (rate))) ; } test_field_rate () ; fn test_field__rate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _rate) as usize - ptr as usize } , 89usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock1) , "::" , stringify ! (_rate))) ; } test_field__rate () ; fn test_field_pricechk () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . pricechk) as usize - ptr as usize } , 90usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock1) , "::" , stringify ! (pricechk))) ; } test_field_pricechk () ; fn test_field__pricechk () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8411OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _pricechk) as usize - ptr as usize } , 103usize , concat ! ("Offset of field: " , stringify ! (T8411OutBlock1) , "::" , stringify ! (_pricechk))) ; } test_field__pricechk () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T8412InBlock { pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , pub ncnt : [:: std :: os :: raw :: c_char ; 4usize] , pub _ncnt : :: std :: os :: raw :: c_char , pub qrycnt : [:: std :: os :: raw :: c_char ; 4usize] , pub _qrycnt : :: std :: os :: raw :: c_char , pub nday : [:: std :: os :: raw :: c_char ; 1usize] , pub _nday : :: std :: os :: raw :: c_char , pub sdate : [:: std :: os :: raw :: c_char ; 8usize] , pub _sdate : :: std :: os :: raw :: c_char , pub stime : [:: std :: os :: raw :: c_char ; 6usize] , pub _stime : :: std :: os :: raw :: c_char , pub edate : [:: std :: os :: raw :: c_char ; 8usize] , pub _edate : :: std :: os :: raw :: c_char , pub etime : [:: std :: os :: raw :: c_char ; 6usize] , pub _etime : :: std :: os :: raw :: c_char , pub cts_date : [:: std :: os :: raw :: c_char ; 8usize] , pub _cts_date : :: std :: os :: raw :: c_char , pub cts_time : [:: std :: os :: raw :: c_char ; 10usize] , pub _cts_time : :: std :: os :: raw :: c_char , pub comp_yn : [:: std :: os :: raw :: c_char ; 1usize] , pub _comp_yn : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T8412InBlock () { assert_eq ! (:: std :: mem :: size_of :: < T8412InBlock > () , 73usize , concat ! ("Size of: " , stringify ! (T8412InBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T8412InBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T8412InBlock))) ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T8412InBlock) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 6usize , concat ! ("Offset of field: " , stringify ! (T8412InBlock) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; fn test_field_ncnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ncnt) as usize - ptr as usize } , 7usize , concat ! ("Offset of field: " , stringify ! (T8412InBlock) , "::" , stringify ! (ncnt))) ; } test_field_ncnt () ; fn test_field__ncnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ncnt) as usize - ptr as usize } , 11usize , concat ! ("Offset of field: " , stringify ! (T8412InBlock) , "::" , stringify ! (_ncnt))) ; } test_field__ncnt () ; fn test_field_qrycnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . qrycnt) as usize - ptr as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (T8412InBlock) , "::" , stringify ! (qrycnt))) ; } test_field_qrycnt () ; fn test_field__qrycnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _qrycnt) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (T8412InBlock) , "::" , stringify ! (_qrycnt))) ; } test_field__qrycnt () ; fn test_field_nday () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . nday) as usize - ptr as usize } , 17usize , concat ! ("Offset of field: " , stringify ! (T8412InBlock) , "::" , stringify ! (nday))) ; } test_field_nday () ; fn test_field__nday () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _nday) as usize - ptr as usize } , 18usize , concat ! ("Offset of field: " , stringify ! (T8412InBlock) , "::" , stringify ! (_nday))) ; } test_field__nday () ; fn test_field_sdate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sdate) as usize - ptr as usize } , 19usize , concat ! ("Offset of field: " , stringify ! (T8412InBlock) , "::" , stringify ! (sdate))) ; } test_field_sdate () ; fn test_field__sdate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sdate) as usize - ptr as usize } , 27usize , concat ! ("Offset of field: " , stringify ! (T8412InBlock) , "::" , stringify ! (_sdate))) ; } test_field__sdate () ; fn test_field_stime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . stime) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (T8412InBlock) , "::" , stringify ! (stime))) ; } test_field_stime () ; fn test_field__stime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _stime) as usize - ptr as usize } , 34usize , concat ! ("Offset of field: " , stringify ! (T8412InBlock) , "::" , stringify ! (_stime))) ; } test_field__stime () ; fn test_field_edate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . edate) as usize - ptr as usize } , 35usize , concat ! ("Offset of field: " , stringify ! (T8412InBlock) , "::" , stringify ! (edate))) ; } test_field_edate () ; fn test_field__edate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _edate) as usize - ptr as usize } , 43usize , concat ! ("Offset of field: " , stringify ! (T8412InBlock) , "::" , stringify ! (_edate))) ; } test_field__edate () ; fn test_field_etime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . etime) as usize - ptr as usize } , 44usize , concat ! ("Offset of field: " , stringify ! (T8412InBlock) , "::" , stringify ! (etime))) ; } test_field_etime () ; fn test_field__etime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _etime) as usize - ptr as usize } , 50usize , concat ! ("Offset of field: " , stringify ! (T8412InBlock) , "::" , stringify ! (_etime))) ; } test_field__etime () ; fn test_field_cts_date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_date) as usize - ptr as usize } , 51usize , concat ! ("Offset of field: " , stringify ! (T8412InBlock) , "::" , stringify ! (cts_date))) ; } test_field_cts_date () ; fn test_field__cts_date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cts_date) as usize - ptr as usize } , 59usize , concat ! ("Offset of field: " , stringify ! (T8412InBlock) , "::" , stringify ! (_cts_date))) ; } test_field__cts_date () ; fn test_field_cts_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_time) as usize - ptr as usize } , 60usize , concat ! ("Offset of field: " , stringify ! (T8412InBlock) , "::" , stringify ! (cts_time))) ; } test_field_cts_time () ; fn test_field__cts_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cts_time) as usize - ptr as usize } , 70usize , concat ! ("Offset of field: " , stringify ! (T8412InBlock) , "::" , stringify ! (_cts_time))) ; } test_field__cts_time () ; fn test_field_comp_yn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . comp_yn) as usize - ptr as usize } , 71usize , concat ! ("Offset of field: " , stringify ! (T8412InBlock) , "::" , stringify ! (comp_yn))) ; } test_field_comp_yn () ; fn test_field__comp_yn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _comp_yn) as usize - ptr as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (T8412InBlock) , "::" , stringify ! (_comp_yn))) ; } test_field__comp_yn () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T8412OutBlock { pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , pub jisiga : [:: std :: os :: raw :: c_char ; 8usize] , pub _jisiga : :: std :: os :: raw :: c_char , pub jihigh : [:: std :: os :: raw :: c_char ; 8usize] , pub _jihigh : :: std :: os :: raw :: c_char , pub jilow : [:: std :: os :: raw :: c_char ; 8usize] , pub _jilow : :: std :: os :: raw :: c_char , pub jiclose : [:: std :: os :: raw :: c_char ; 8usize] , pub _jiclose : :: std :: os :: raw :: c_char , pub jivolume : [:: std :: os :: raw :: c_char ; 12usize] , pub _jivolume : :: std :: os :: raw :: c_char , pub disiga : [:: std :: os :: raw :: c_char ; 8usize] , pub _disiga : :: std :: os :: raw :: c_char , pub dihigh : [:: std :: os :: raw :: c_char ; 8usize] , pub _dihigh : :: std :: os :: raw :: c_char , pub dilow : [:: std :: os :: raw :: c_char ; 8usize] , pub _dilow : :: std :: os :: raw :: c_char , pub diclose : [:: std :: os :: raw :: c_char ; 8usize] , pub _diclose : :: std :: os :: raw :: c_char , pub highend : [:: std :: os :: raw :: c_char ; 8usize] , pub _highend : :: std :: os :: raw :: c_char , pub lowend : [:: std :: os :: raw :: c_char ; 8usize] , pub _lowend : :: std :: os :: raw :: c_char , pub cts_date : [:: std :: os :: raw :: c_char ; 8usize] , pub _cts_date : :: std :: os :: raw :: c_char , pub cts_time : [:: std :: os :: raw :: c_char ; 10usize] , pub _cts_time : :: std :: os :: raw :: c_char , pub s_time : [:: std :: os :: raw :: c_char ; 6usize] , pub _s_time : :: std :: os :: raw :: c_char , pub e_time : [:: std :: os :: raw :: c_char ; 6usize] , pub _e_time : :: std :: os :: raw :: c_char , pub dshmin : [:: std :: os :: raw :: c_char ; 2usize] , pub _dshmin : :: std :: os :: raw :: c_char , pub rec_count : [:: std :: os :: raw :: c_char ; 7usize] , pub _rec_count : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T8412OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < T8412OutBlock > () , 155usize , concat ! ("Size of: " , stringify ! (T8412OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T8412OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T8412OutBlock))) ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 6usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; fn test_field_jisiga () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jisiga) as usize - ptr as usize } , 7usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (jisiga))) ; } test_field_jisiga () ; fn test_field__jisiga () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jisiga) as usize - ptr as usize } , 15usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (_jisiga))) ; } test_field__jisiga () ; fn test_field_jihigh () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jihigh) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (jihigh))) ; } test_field_jihigh () ; fn test_field__jihigh () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jihigh) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (_jihigh))) ; } test_field__jihigh () ; fn test_field_jilow () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jilow) as usize - ptr as usize } , 25usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (jilow))) ; } test_field_jilow () ; fn test_field__jilow () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jilow) as usize - ptr as usize } , 33usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (_jilow))) ; } test_field__jilow () ; fn test_field_jiclose () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jiclose) as usize - ptr as usize } , 34usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (jiclose))) ; } test_field_jiclose () ; fn test_field__jiclose () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jiclose) as usize - ptr as usize } , 42usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (_jiclose))) ; } test_field__jiclose () ; fn test_field_jivolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jivolume) as usize - ptr as usize } , 43usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (jivolume))) ; } test_field_jivolume () ; fn test_field__jivolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jivolume) as usize - ptr as usize } , 55usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (_jivolume))) ; } test_field__jivolume () ; fn test_field_disiga () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . disiga) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (disiga))) ; } test_field_disiga () ; fn test_field__disiga () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _disiga) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (_disiga))) ; } test_field__disiga () ; fn test_field_dihigh () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dihigh) as usize - ptr as usize } , 65usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (dihigh))) ; } test_field_dihigh () ; fn test_field__dihigh () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dihigh) as usize - ptr as usize } , 73usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (_dihigh))) ; } test_field__dihigh () ; fn test_field_dilow () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dilow) as usize - ptr as usize } , 74usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (dilow))) ; } test_field_dilow () ; fn test_field__dilow () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dilow) as usize - ptr as usize } , 82usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (_dilow))) ; } test_field__dilow () ; fn test_field_diclose () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . diclose) as usize - ptr as usize } , 83usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (diclose))) ; } test_field_diclose () ; fn test_field__diclose () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _diclose) as usize - ptr as usize } , 91usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (_diclose))) ; } test_field__diclose () ; fn test_field_highend () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . highend) as usize - ptr as usize } , 92usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (highend))) ; } test_field_highend () ; fn test_field__highend () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _highend) as usize - ptr as usize } , 100usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (_highend))) ; } test_field__highend () ; fn test_field_lowend () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lowend) as usize - ptr as usize } , 101usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (lowend))) ; } test_field_lowend () ; fn test_field__lowend () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lowend) as usize - ptr as usize } , 109usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (_lowend))) ; } test_field__lowend () ; fn test_field_cts_date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_date) as usize - ptr as usize } , 110usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (cts_date))) ; } test_field_cts_date () ; fn test_field__cts_date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cts_date) as usize - ptr as usize } , 118usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (_cts_date))) ; } test_field__cts_date () ; fn test_field_cts_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_time) as usize - ptr as usize } , 119usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (cts_time))) ; } test_field_cts_time () ; fn test_field__cts_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cts_time) as usize - ptr as usize } , 129usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (_cts_time))) ; } test_field__cts_time () ; fn test_field_s_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . s_time) as usize - ptr as usize } , 130usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (s_time))) ; } test_field_s_time () ; fn test_field__s_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _s_time) as usize - ptr as usize } , 136usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (_s_time))) ; } test_field__s_time () ; fn test_field_e_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . e_time) as usize - ptr as usize } , 137usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (e_time))) ; } test_field_e_time () ; fn test_field__e_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _e_time) as usize - ptr as usize } , 143usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (_e_time))) ; } test_field__e_time () ; fn test_field_dshmin () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dshmin) as usize - ptr as usize } , 144usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (dshmin))) ; } test_field_dshmin () ; fn test_field__dshmin () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dshmin) as usize - ptr as usize } , 146usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (_dshmin))) ; } test_field__dshmin () ; fn test_field_rec_count () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . rec_count) as usize - ptr as usize } , 147usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (rec_count))) ; } test_field_rec_count () ; fn test_field__rec_count () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _rec_count) as usize - ptr as usize } , 154usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock) , "::" , stringify ! (_rec_count))) ; } test_field__rec_count () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T8412OutBlock1 { pub date : [:: std :: os :: raw :: c_char ; 8usize] , pub _date : :: std :: os :: raw :: c_char , pub time : [:: std :: os :: raw :: c_char ; 10usize] , pub _time : :: std :: os :: raw :: c_char , pub open : [:: std :: os :: raw :: c_char ; 8usize] , pub _open : :: std :: os :: raw :: c_char , pub high : [:: std :: os :: raw :: c_char ; 8usize] , pub _high : :: std :: os :: raw :: c_char , pub low : [:: std :: os :: raw :: c_char ; 8usize] , pub _low : :: std :: os :: raw :: c_char , pub close : [:: std :: os :: raw :: c_char ; 8usize] , pub _close : :: std :: os :: raw :: c_char , pub jdiff_vol : [:: std :: os :: raw :: c_char ; 12usize] , pub _jdiff_vol : :: std :: os :: raw :: c_char , pub value : [:: std :: os :: raw :: c_char ; 12usize] , pub _value : :: std :: os :: raw :: c_char , pub jongchk : [:: std :: os :: raw :: c_char ; 13usize] , pub _jongchk : :: std :: os :: raw :: c_char , pub rate : [:: std :: os :: raw :: c_char ; 6usize] , pub _rate : :: std :: os :: raw :: c_char , pub sign : [:: std :: os :: raw :: c_char ; 1usize] , pub _sign : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T8412OutBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < T8412OutBlock1 > () , 105usize , concat ! ("Size of: " , stringify ! (T8412OutBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < T8412OutBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (T8412OutBlock1))) ; fn test_field_date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . date) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock1) , "::" , stringify ! (date))) ; } test_field_date () ; fn test_field__date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _date) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock1) , "::" , stringify ! (_date))) ; } test_field__date () ; fn test_field_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . time) as usize - ptr as usize } , 9usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock1) , "::" , stringify ! (time))) ; } test_field_time () ; fn test_field__time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _time) as usize - ptr as usize } , 19usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock1) , "::" , stringify ! (_time))) ; } test_field__time () ; fn test_field_open () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . open) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock1) , "::" , stringify ! (open))) ; } test_field_open () ; fn test_field__open () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _open) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock1) , "::" , stringify ! (_open))) ; } test_field__open () ; fn test_field_high () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . high) as usize - ptr as usize } , 29usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock1) , "::" , stringify ! (high))) ; } test_field_high () ; fn test_field__high () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _high) as usize - ptr as usize } , 37usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock1) , "::" , stringify ! (_high))) ; } test_field__high () ; fn test_field_low () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . low) as usize - ptr as usize } , 38usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock1) , "::" , stringify ! (low))) ; } test_field_low () ; fn test_field__low () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _low) as usize - ptr as usize } , 46usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock1) , "::" , stringify ! (_low))) ; } test_field__low () ; fn test_field_close () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . close) as usize - ptr as usize } , 47usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock1) , "::" , stringify ! (close))) ; } test_field_close () ; fn test_field__close () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _close) as usize - ptr as usize } , 55usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock1) , "::" , stringify ! (_close))) ; } test_field__close () ; fn test_field_jdiff_vol () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jdiff_vol) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock1) , "::" , stringify ! (jdiff_vol))) ; } test_field_jdiff_vol () ; fn test_field__jdiff_vol () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jdiff_vol) as usize - ptr as usize } , 68usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock1) , "::" , stringify ! (_jdiff_vol))) ; } test_field__jdiff_vol () ; fn test_field_value () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . value) as usize - ptr as usize } , 69usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock1) , "::" , stringify ! (value))) ; } test_field_value () ; fn test_field__value () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _value) as usize - ptr as usize } , 81usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock1) , "::" , stringify ! (_value))) ; } test_field__value () ; fn test_field_jongchk () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jongchk) as usize - ptr as usize } , 82usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock1) , "::" , stringify ! (jongchk))) ; } test_field_jongchk () ; fn test_field__jongchk () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jongchk) as usize - ptr as usize } , 95usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock1) , "::" , stringify ! (_jongchk))) ; } test_field__jongchk () ; fn test_field_rate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . rate) as usize - ptr as usize } , 96usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock1) , "::" , stringify ! (rate))) ; } test_field_rate () ; fn test_field__rate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _rate) as usize - ptr as usize } , 102usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock1) , "::" , stringify ! (_rate))) ; } test_field__rate () ; fn test_field_sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sign) as usize - ptr as usize } , 103usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock1) , "::" , stringify ! (sign))) ; } test_field_sign () ; fn test_field__sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8412OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sign) as usize - ptr as usize } , 104usize , concat ! ("Offset of field: " , stringify ! (T8412OutBlock1) , "::" , stringify ! (_sign))) ; } test_field__sign () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T8413InBlock { pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , pub gubun : [:: std :: os :: raw :: c_char ; 1usize] , pub _gubun : :: std :: os :: raw :: c_char , pub qrycnt : [:: std :: os :: raw :: c_char ; 4usize] , pub _qrycnt : :: std :: os :: raw :: c_char , pub sdate : [:: std :: os :: raw :: c_char ; 8usize] , pub _sdate : :: std :: os :: raw :: c_char , pub edate : [:: std :: os :: raw :: c_char ; 8usize] , pub _edate : :: std :: os :: raw :: c_char , pub cts_date : [:: std :: os :: raw :: c_char ; 8usize] , pub _cts_date : :: std :: os :: raw :: c_char , pub comp_yn : [:: std :: os :: raw :: c_char ; 1usize] , pub _comp_yn : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T8413InBlock () { assert_eq ! (:: std :: mem :: size_of :: < T8413InBlock > () , 43usize , concat ! ("Size of: " , stringify ! (T8413InBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T8413InBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T8413InBlock))) ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T8413InBlock) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 6usize , concat ! ("Offset of field: " , stringify ! (T8413InBlock) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; fn test_field_gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . gubun) as usize - ptr as usize } , 7usize , concat ! ("Offset of field: " , stringify ! (T8413InBlock) , "::" , stringify ! (gubun))) ; } test_field_gubun () ; fn test_field__gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _gubun) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (T8413InBlock) , "::" , stringify ! (_gubun))) ; } test_field__gubun () ; fn test_field_qrycnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . qrycnt) as usize - ptr as usize } , 9usize , concat ! ("Offset of field: " , stringify ! (T8413InBlock) , "::" , stringify ! (qrycnt))) ; } test_field_qrycnt () ; fn test_field__qrycnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _qrycnt) as usize - ptr as usize } , 13usize , concat ! ("Offset of field: " , stringify ! (T8413InBlock) , "::" , stringify ! (_qrycnt))) ; } test_field__qrycnt () ; fn test_field_sdate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sdate) as usize - ptr as usize } , 14usize , concat ! ("Offset of field: " , stringify ! (T8413InBlock) , "::" , stringify ! (sdate))) ; } test_field_sdate () ; fn test_field__sdate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sdate) as usize - ptr as usize } , 22usize , concat ! ("Offset of field: " , stringify ! (T8413InBlock) , "::" , stringify ! (_sdate))) ; } test_field__sdate () ; fn test_field_edate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . edate) as usize - ptr as usize } , 23usize , concat ! ("Offset of field: " , stringify ! (T8413InBlock) , "::" , stringify ! (edate))) ; } test_field_edate () ; fn test_field__edate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _edate) as usize - ptr as usize } , 31usize , concat ! ("Offset of field: " , stringify ! (T8413InBlock) , "::" , stringify ! (_edate))) ; } test_field__edate () ; fn test_field_cts_date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_date) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (T8413InBlock) , "::" , stringify ! (cts_date))) ; } test_field_cts_date () ; fn test_field__cts_date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cts_date) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (T8413InBlock) , "::" , stringify ! (_cts_date))) ; } test_field__cts_date () ; fn test_field_comp_yn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . comp_yn) as usize - ptr as usize } , 41usize , concat ! ("Offset of field: " , stringify ! (T8413InBlock) , "::" , stringify ! (comp_yn))) ; } test_field_comp_yn () ; fn test_field__comp_yn () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _comp_yn) as usize - ptr as usize } , 42usize , concat ! ("Offset of field: " , stringify ! (T8413InBlock) , "::" , stringify ! (_comp_yn))) ; } test_field__comp_yn () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T8413OutBlock { pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , pub jisiga : [:: std :: os :: raw :: c_char ; 8usize] , pub _jisiga : :: std :: os :: raw :: c_char , pub jihigh : [:: std :: os :: raw :: c_char ; 8usize] , pub _jihigh : :: std :: os :: raw :: c_char , pub jilow : [:: std :: os :: raw :: c_char ; 8usize] , pub _jilow : :: std :: os :: raw :: c_char , pub jiclose : [:: std :: os :: raw :: c_char ; 8usize] , pub _jiclose : :: std :: os :: raw :: c_char , pub jivolume : [:: std :: os :: raw :: c_char ; 12usize] , pub _jivolume : :: std :: os :: raw :: c_char , pub disiga : [:: std :: os :: raw :: c_char ; 8usize] , pub _disiga : :: std :: os :: raw :: c_char , pub dihigh : [:: std :: os :: raw :: c_char ; 8usize] , pub _dihigh : :: std :: os :: raw :: c_char , pub dilow : [:: std :: os :: raw :: c_char ; 8usize] , pub _dilow : :: std :: os :: raw :: c_char , pub diclose : [:: std :: os :: raw :: c_char ; 8usize] , pub _diclose : :: std :: os :: raw :: c_char , pub highend : [:: std :: os :: raw :: c_char ; 8usize] , pub _highend : :: std :: os :: raw :: c_char , pub lowend : [:: std :: os :: raw :: c_char ; 8usize] , pub _lowend : :: std :: os :: raw :: c_char , pub cts_date : [:: std :: os :: raw :: c_char ; 8usize] , pub _cts_date : :: std :: os :: raw :: c_char , pub s_time : [:: std :: os :: raw :: c_char ; 6usize] , pub _s_time : :: std :: os :: raw :: c_char , pub e_time : [:: std :: os :: raw :: c_char ; 6usize] , pub _e_time : :: std :: os :: raw :: c_char , pub dshmin : [:: std :: os :: raw :: c_char ; 2usize] , pub _dshmin : :: std :: os :: raw :: c_char , pub rec_count : [:: std :: os :: raw :: c_char ; 7usize] , pub _rec_count : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T8413OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < T8413OutBlock > () , 144usize , concat ! ("Size of: " , stringify ! (T8413OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T8413OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T8413OutBlock))) ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 6usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; fn test_field_jisiga () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jisiga) as usize - ptr as usize } , 7usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (jisiga))) ; } test_field_jisiga () ; fn test_field__jisiga () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jisiga) as usize - ptr as usize } , 15usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (_jisiga))) ; } test_field__jisiga () ; fn test_field_jihigh () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jihigh) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (jihigh))) ; } test_field_jihigh () ; fn test_field__jihigh () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jihigh) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (_jihigh))) ; } test_field__jihigh () ; fn test_field_jilow () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jilow) as usize - ptr as usize } , 25usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (jilow))) ; } test_field_jilow () ; fn test_field__jilow () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jilow) as usize - ptr as usize } , 33usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (_jilow))) ; } test_field__jilow () ; fn test_field_jiclose () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jiclose) as usize - ptr as usize } , 34usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (jiclose))) ; } test_field_jiclose () ; fn test_field__jiclose () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jiclose) as usize - ptr as usize } , 42usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (_jiclose))) ; } test_field__jiclose () ; fn test_field_jivolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jivolume) as usize - ptr as usize } , 43usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (jivolume))) ; } test_field_jivolume () ; fn test_field__jivolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jivolume) as usize - ptr as usize } , 55usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (_jivolume))) ; } test_field__jivolume () ; fn test_field_disiga () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . disiga) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (disiga))) ; } test_field_disiga () ; fn test_field__disiga () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _disiga) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (_disiga))) ; } test_field__disiga () ; fn test_field_dihigh () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dihigh) as usize - ptr as usize } , 65usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (dihigh))) ; } test_field_dihigh () ; fn test_field__dihigh () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dihigh) as usize - ptr as usize } , 73usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (_dihigh))) ; } test_field__dihigh () ; fn test_field_dilow () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dilow) as usize - ptr as usize } , 74usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (dilow))) ; } test_field_dilow () ; fn test_field__dilow () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dilow) as usize - ptr as usize } , 82usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (_dilow))) ; } test_field__dilow () ; fn test_field_diclose () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . diclose) as usize - ptr as usize } , 83usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (diclose))) ; } test_field_diclose () ; fn test_field__diclose () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _diclose) as usize - ptr as usize } , 91usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (_diclose))) ; } test_field__diclose () ; fn test_field_highend () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . highend) as usize - ptr as usize } , 92usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (highend))) ; } test_field_highend () ; fn test_field__highend () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _highend) as usize - ptr as usize } , 100usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (_highend))) ; } test_field__highend () ; fn test_field_lowend () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lowend) as usize - ptr as usize } , 101usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (lowend))) ; } test_field_lowend () ; fn test_field__lowend () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lowend) as usize - ptr as usize } , 109usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (_lowend))) ; } test_field__lowend () ; fn test_field_cts_date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cts_date) as usize - ptr as usize } , 110usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (cts_date))) ; } test_field_cts_date () ; fn test_field__cts_date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cts_date) as usize - ptr as usize } , 118usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (_cts_date))) ; } test_field__cts_date () ; fn test_field_s_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . s_time) as usize - ptr as usize } , 119usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (s_time))) ; } test_field_s_time () ; fn test_field__s_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _s_time) as usize - ptr as usize } , 125usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (_s_time))) ; } test_field__s_time () ; fn test_field_e_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . e_time) as usize - ptr as usize } , 126usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (e_time))) ; } test_field_e_time () ; fn test_field__e_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _e_time) as usize - ptr as usize } , 132usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (_e_time))) ; } test_field__e_time () ; fn test_field_dshmin () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dshmin) as usize - ptr as usize } , 133usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (dshmin))) ; } test_field_dshmin () ; fn test_field__dshmin () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dshmin) as usize - ptr as usize } , 135usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (_dshmin))) ; } test_field__dshmin () ; fn test_field_rec_count () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . rec_count) as usize - ptr as usize } , 136usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (rec_count))) ; } test_field_rec_count () ; fn test_field__rec_count () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _rec_count) as usize - ptr as usize } , 143usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock) , "::" , stringify ! (_rec_count))) ; } test_field__rec_count () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T8413OutBlock1 { pub date : [:: std :: os :: raw :: c_char ; 8usize] , pub _date : :: std :: os :: raw :: c_char , pub open : [:: std :: os :: raw :: c_char ; 8usize] , pub _open : :: std :: os :: raw :: c_char , pub high : [:: std :: os :: raw :: c_char ; 8usize] , pub _high : :: std :: os :: raw :: c_char , pub low : [:: std :: os :: raw :: c_char ; 8usize] , pub _low : :: std :: os :: raw :: c_char , pub close : [:: std :: os :: raw :: c_char ; 8usize] , pub _close : :: std :: os :: raw :: c_char , pub jdiff_vol : [:: std :: os :: raw :: c_char ; 12usize] , pub _jdiff_vol : :: std :: os :: raw :: c_char , pub value : [:: std :: os :: raw :: c_char ; 12usize] , pub _value : :: std :: os :: raw :: c_char , pub jongchk : [:: std :: os :: raw :: c_char ; 13usize] , pub _jongchk : :: std :: os :: raw :: c_char , pub rate : [:: std :: os :: raw :: c_char ; 6usize] , pub _rate : :: std :: os :: raw :: c_char , pub pricechk : [:: std :: os :: raw :: c_char ; 13usize] , pub _pricechk : :: std :: os :: raw :: c_char , pub ratevalue : [:: std :: os :: raw :: c_char ; 12usize] , pub _ratevalue : :: std :: os :: raw :: c_char , pub sign : [:: std :: os :: raw :: c_char ; 1usize] , pub _sign : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T8413OutBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < T8413OutBlock1 > () , 121usize , concat ! ("Size of: " , stringify ! (T8413OutBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < T8413OutBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (T8413OutBlock1))) ; fn test_field_date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . date) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock1) , "::" , stringify ! (date))) ; } test_field_date () ; fn test_field__date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _date) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock1) , "::" , stringify ! (_date))) ; } test_field__date () ; fn test_field_open () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . open) as usize - ptr as usize } , 9usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock1) , "::" , stringify ! (open))) ; } test_field_open () ; fn test_field__open () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _open) as usize - ptr as usize } , 17usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock1) , "::" , stringify ! (_open))) ; } test_field__open () ; fn test_field_high () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . high) as usize - ptr as usize } , 18usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock1) , "::" , stringify ! (high))) ; } test_field_high () ; fn test_field__high () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _high) as usize - ptr as usize } , 26usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock1) , "::" , stringify ! (_high))) ; } test_field__high () ; fn test_field_low () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . low) as usize - ptr as usize } , 27usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock1) , "::" , stringify ! (low))) ; } test_field_low () ; fn test_field__low () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _low) as usize - ptr as usize } , 35usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock1) , "::" , stringify ! (_low))) ; } test_field__low () ; fn test_field_close () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . close) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock1) , "::" , stringify ! (close))) ; } test_field_close () ; fn test_field__close () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _close) as usize - ptr as usize } , 44usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock1) , "::" , stringify ! (_close))) ; } test_field__close () ; fn test_field_jdiff_vol () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jdiff_vol) as usize - ptr as usize } , 45usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock1) , "::" , stringify ! (jdiff_vol))) ; } test_field_jdiff_vol () ; fn test_field__jdiff_vol () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jdiff_vol) as usize - ptr as usize } , 57usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock1) , "::" , stringify ! (_jdiff_vol))) ; } test_field__jdiff_vol () ; fn test_field_value () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . value) as usize - ptr as usize } , 58usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock1) , "::" , stringify ! (value))) ; } test_field_value () ; fn test_field__value () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _value) as usize - ptr as usize } , 70usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock1) , "::" , stringify ! (_value))) ; } test_field__value () ; fn test_field_jongchk () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jongchk) as usize - ptr as usize } , 71usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock1) , "::" , stringify ! (jongchk))) ; } test_field_jongchk () ; fn test_field__jongchk () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jongchk) as usize - ptr as usize } , 84usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock1) , "::" , stringify ! (_jongchk))) ; } test_field__jongchk () ; fn test_field_rate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . rate) as usize - ptr as usize } , 85usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock1) , "::" , stringify ! (rate))) ; } test_field_rate () ; fn test_field__rate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _rate) as usize - ptr as usize } , 91usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock1) , "::" , stringify ! (_rate))) ; } test_field__rate () ; fn test_field_pricechk () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . pricechk) as usize - ptr as usize } , 92usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock1) , "::" , stringify ! (pricechk))) ; } test_field_pricechk () ; fn test_field__pricechk () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _pricechk) as usize - ptr as usize } , 105usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock1) , "::" , stringify ! (_pricechk))) ; } test_field__pricechk () ; fn test_field_ratevalue () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ratevalue) as usize - ptr as usize } , 106usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock1) , "::" , stringify ! (ratevalue))) ; } test_field_ratevalue () ; fn test_field__ratevalue () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ratevalue) as usize - ptr as usize } , 118usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock1) , "::" , stringify ! (_ratevalue))) ; } test_field__ratevalue () ; fn test_field_sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sign) as usize - ptr as usize } , 119usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock1) , "::" , stringify ! (sign))) ; } test_field_sign () ; fn test_field__sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8413OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sign) as usize - ptr as usize } , 120usize , concat ! ("Offset of field: " , stringify ! (T8413OutBlock1) , "::" , stringify ! (_sign))) ; } test_field__sign () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T8428InBlock { pub fdate : [:: std :: os :: raw :: c_char ; 8usize] , pub _fdate : :: std :: os :: raw :: c_char , pub tdate : [:: std :: os :: raw :: c_char ; 8usize] , pub _tdate : :: std :: os :: raw :: c_char , pub gubun : [:: std :: os :: raw :: c_char ; 1usize] , pub _gubun : :: std :: os :: raw :: c_char , pub keyDate : [:: std :: os :: raw :: c_char ; 8usize] , pub _key_date : :: std :: os :: raw :: c_char , pub upcode : [:: std :: os :: raw :: c_char ; 3usize] , pub _upcode : :: std :: os :: raw :: c_char , pub cnt : [:: std :: os :: raw :: c_char ; 3usize] , pub _cnt : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T8428InBlock () { assert_eq ! (:: std :: mem :: size_of :: < T8428InBlock > () , 37usize , concat ! ("Size of: " , stringify ! (T8428InBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T8428InBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T8428InBlock))) ; fn test_field_fdate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . fdate) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T8428InBlock) , "::" , stringify ! (fdate))) ; } test_field_fdate () ; fn test_field__fdate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _fdate) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (T8428InBlock) , "::" , stringify ! (_fdate))) ; } test_field__fdate () ; fn test_field_tdate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tdate) as usize - ptr as usize } , 9usize , concat ! ("Offset of field: " , stringify ! (T8428InBlock) , "::" , stringify ! (tdate))) ; } test_field_tdate () ; fn test_field__tdate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _tdate) as usize - ptr as usize } , 17usize , concat ! ("Offset of field: " , stringify ! (T8428InBlock) , "::" , stringify ! (_tdate))) ; } test_field__tdate () ; fn test_field_gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . gubun) as usize - ptr as usize } , 18usize , concat ! ("Offset of field: " , stringify ! (T8428InBlock) , "::" , stringify ! (gubun))) ; } test_field_gubun () ; fn test_field__gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _gubun) as usize - ptr as usize } , 19usize , concat ! ("Offset of field: " , stringify ! (T8428InBlock) , "::" , stringify ! (_gubun))) ; } test_field__gubun () ; fn test_field_keyDate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . keyDate) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (T8428InBlock) , "::" , stringify ! (keyDate))) ; } test_field_keyDate () ; fn test_field__key_date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _key_date) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (T8428InBlock) , "::" , stringify ! (_key_date))) ; } test_field__key_date () ; fn test_field_upcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . upcode) as usize - ptr as usize } , 29usize , concat ! ("Offset of field: " , stringify ! (T8428InBlock) , "::" , stringify ! (upcode))) ; } test_field_upcode () ; fn test_field__upcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _upcode) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (T8428InBlock) , "::" , stringify ! (_upcode))) ; } test_field__upcode () ; fn test_field_cnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cnt) as usize - ptr as usize } , 33usize , concat ! ("Offset of field: " , stringify ! (T8428InBlock) , "::" , stringify ! (cnt))) ; } test_field_cnt () ; fn test_field__cnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cnt) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (T8428InBlock) , "::" , stringify ! (_cnt))) ; } test_field__cnt () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T8428OutBlock { pub date : [:: std :: os :: raw :: c_char ; 8usize] , pub _date : :: std :: os :: raw :: c_char , pub idx : [:: std :: os :: raw :: c_char ; 4usize] , pub _idx : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T8428OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < T8428OutBlock > () , 14usize , concat ! ("Size of: " , stringify ! (T8428OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T8428OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T8428OutBlock))) ; fn test_field_date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . date) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock) , "::" , stringify ! (date))) ; } test_field_date () ; fn test_field__date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _date) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock) , "::" , stringify ! (_date))) ; } test_field__date () ; fn test_field_idx () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . idx) as usize - ptr as usize } , 9usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock) , "::" , stringify ! (idx))) ; } test_field_idx () ; fn test_field__idx () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _idx) as usize - ptr as usize } , 13usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock) , "::" , stringify ! (_idx))) ; } test_field__idx () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T8428OutBlock1 { pub date : [:: std :: os :: raw :: c_char ; 8usize] , pub _date : :: std :: os :: raw :: c_char , pub jisu : [:: std :: os :: raw :: c_char ; 7usize] , pub _jisu : :: std :: os :: raw :: c_char , pub sign : [:: std :: os :: raw :: c_char ; 1usize] , pub _sign : :: std :: os :: raw :: c_char , pub change : [:: std :: os :: raw :: c_char ; 6usize] , pub _change : :: std :: os :: raw :: c_char , pub diff : [:: std :: os :: raw :: c_char ; 6usize] , pub _diff : :: std :: os :: raw :: c_char , pub volume : [:: std :: os :: raw :: c_char ; 12usize] , pub _volume : :: std :: os :: raw :: c_char , pub custmoney : [:: std :: os :: raw :: c_char ; 12usize] , pub _custmoney : :: std :: os :: raw :: c_char , pub yecha : [:: std :: os :: raw :: c_char ; 12usize] , pub _yecha : :: std :: os :: raw :: c_char , pub vol : [:: std :: os :: raw :: c_char ; 6usize] , pub _vol : :: std :: os :: raw :: c_char , pub outmoney : [:: std :: os :: raw :: c_char ; 12usize] , pub _outmoney : :: std :: os :: raw :: c_char , pub trjango : [:: std :: os :: raw :: c_char ; 12usize] , pub _trjango : :: std :: os :: raw :: c_char , pub futymoney : [:: std :: os :: raw :: c_char ; 12usize] , pub _futymoney : :: std :: os :: raw :: c_char , pub stkmoney : [:: std :: os :: raw :: c_char ; 8usize] , pub _stkmoney : :: std :: os :: raw :: c_char , pub mstkmoney : [:: std :: os :: raw :: c_char ; 8usize] , pub _mstkmoney : :: std :: os :: raw :: c_char , pub mbndmoney : [:: std :: os :: raw :: c_char ; 8usize] , pub _mbndmoney : :: std :: os :: raw :: c_char , pub bndmoney : [:: std :: os :: raw :: c_char ; 8usize] , pub _bndmoney : :: std :: os :: raw :: c_char , pub bndsmoney : [:: std :: os :: raw :: c_char ; 8usize] , pub _bndsmoney : :: std :: os :: raw :: c_char , pub mmfmsoney : [:: std :: os :: raw :: c_char ; 8usize] , pub _mmfmoney : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_T8428OutBlock1 () { assert_eq ! (:: std :: mem :: size_of :: < T8428OutBlock1 > () , 172usize , concat ! ("Size of: " , stringify ! (T8428OutBlock1))) ; assert_eq ! (:: std :: mem :: align_of :: < T8428OutBlock1 > () , 1usize , concat ! ("Alignment of " , stringify ! (T8428OutBlock1))) ; fn test_field_date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . date) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (date))) ; } test_field_date () ; fn test_field__date () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _date) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (_date))) ; } test_field__date () ; fn test_field_jisu () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jisu) as usize - ptr as usize } , 9usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (jisu))) ; } test_field_jisu () ; fn test_field__jisu () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jisu) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (_jisu))) ; } test_field__jisu () ; fn test_field_sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sign) as usize - ptr as usize } , 17usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (sign))) ; } test_field_sign () ; fn test_field__sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sign) as usize - ptr as usize } , 18usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (_sign))) ; } test_field__sign () ; fn test_field_change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . change) as usize - ptr as usize } , 19usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (change))) ; } test_field_change () ; fn test_field__change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _change) as usize - ptr as usize } , 25usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (_change))) ; } test_field__change () ; fn test_field_diff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . diff) as usize - ptr as usize } , 26usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (diff))) ; } test_field_diff () ; fn test_field__diff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _diff) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (_diff))) ; } test_field__diff () ; fn test_field_volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . volume) as usize - ptr as usize } , 33usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (volume))) ; } test_field_volume () ; fn test_field__volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _volume) as usize - ptr as usize } , 45usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (_volume))) ; } test_field__volume () ; fn test_field_custmoney () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . custmoney) as usize - ptr as usize } , 46usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (custmoney))) ; } test_field_custmoney () ; fn test_field__custmoney () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _custmoney) as usize - ptr as usize } , 58usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (_custmoney))) ; } test_field__custmoney () ; fn test_field_yecha () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . yecha) as usize - ptr as usize } , 59usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (yecha))) ; } test_field_yecha () ; fn test_field__yecha () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _yecha) as usize - ptr as usize } , 71usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (_yecha))) ; } test_field__yecha () ; fn test_field_vol () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . vol) as usize - ptr as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (vol))) ; } test_field_vol () ; fn test_field__vol () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _vol) as usize - ptr as usize } , 78usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (_vol))) ; } test_field__vol () ; fn test_field_outmoney () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . outmoney) as usize - ptr as usize } , 79usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (outmoney))) ; } test_field_outmoney () ; fn test_field__outmoney () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _outmoney) as usize - ptr as usize } , 91usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (_outmoney))) ; } test_field__outmoney () ; fn test_field_trjango () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . trjango) as usize - ptr as usize } , 92usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (trjango))) ; } test_field_trjango () ; fn test_field__trjango () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _trjango) as usize - ptr as usize } , 104usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (_trjango))) ; } test_field__trjango () ; fn test_field_futymoney () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . futymoney) as usize - ptr as usize } , 105usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (futymoney))) ; } test_field_futymoney () ; fn test_field__futymoney () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _futymoney) as usize - ptr as usize } , 117usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (_futymoney))) ; } test_field__futymoney () ; fn test_field_stkmoney () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . stkmoney) as usize - ptr as usize } , 118usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (stkmoney))) ; } test_field_stkmoney () ; fn test_field__stkmoney () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _stkmoney) as usize - ptr as usize } , 126usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (_stkmoney))) ; } test_field__stkmoney () ; fn test_field_mstkmoney () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mstkmoney) as usize - ptr as usize } , 127usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (mstkmoney))) ; } test_field_mstkmoney () ; fn test_field__mstkmoney () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _mstkmoney) as usize - ptr as usize } , 135usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (_mstkmoney))) ; } test_field__mstkmoney () ; fn test_field_mbndmoney () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mbndmoney) as usize - ptr as usize } , 136usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (mbndmoney))) ; } test_field_mbndmoney () ; fn test_field__mbndmoney () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _mbndmoney) as usize - ptr as usize } , 144usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (_mbndmoney))) ; } test_field__mbndmoney () ; fn test_field_bndmoney () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bndmoney) as usize - ptr as usize } , 145usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (bndmoney))) ; } test_field_bndmoney () ; fn test_field__bndmoney () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bndmoney) as usize - ptr as usize } , 153usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (_bndmoney))) ; } test_field__bndmoney () ; fn test_field_bndsmoney () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bndsmoney) as usize - ptr as usize } , 154usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (bndsmoney))) ; } test_field_bndsmoney () ; fn test_field__bndsmoney () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bndsmoney) as usize - ptr as usize } , 162usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (_bndsmoney))) ; } test_field__bndsmoney () ; fn test_field_mmfmsoney () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mmfmsoney) as usize - ptr as usize } , 163usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (mmfmsoney))) ; } test_field_mmfmsoney () ; fn test_field__mmfmoney () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8428OutBlock1 > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _mmfmoney) as usize - ptr as usize } , 171usize , concat ! ("Offset of field: " , stringify ! (T8428OutBlock1) , "::" , stringify ! (_mmfmoney))) ; } test_field__mmfmoney () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T8432InBlock { pub gubun : [:: std :: os :: raw :: c_char ; 1usize] , } # [test] fn bindgen_test_layout_T8432InBlock () { assert_eq ! (:: std :: mem :: size_of :: < T8432InBlock > () , 1usize , concat ! ("Size of: " , stringify ! (T8432InBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T8432InBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T8432InBlock))) ; fn test_field_gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8432InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . gubun) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T8432InBlock) , "::" , stringify ! (gubun))) ; } test_field_gubun () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T8432OutBlock { pub hname : [:: std :: os :: raw :: c_char ; 20usize] , pub shcode : [:: std :: os :: raw :: c_char ; 8usize] , pub expcode : [:: std :: os :: raw :: c_char ; 12usize] , pub uplmtprice : [:: std :: os :: raw :: c_char ; 6usize] , pub dnlmtprice : [:: std :: os :: raw :: c_char ; 6usize] , pub jnilclose : [:: std :: os :: raw :: c_char ; 6usize] , pub jnilhigh : [:: std :: os :: raw :: c_char ; 6usize] , pub jnillow : [:: std :: os :: raw :: c_char ; 6usize] , pub recprice : [:: std :: os :: raw :: c_char ; 6usize] , } # [test] fn bindgen_test_layout_T8432OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < T8432OutBlock > () , 76usize , concat ! ("Size of: " , stringify ! (T8432OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T8432OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T8432OutBlock))) ; fn test_field_hname () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8432OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . hname) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T8432OutBlock) , "::" , stringify ! (hname))) ; } test_field_hname () ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8432OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (T8432OutBlock) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field_expcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8432OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . expcode) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (T8432OutBlock) , "::" , stringify ! (expcode))) ; } test_field_expcode () ; fn test_field_uplmtprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8432OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . uplmtprice) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (T8432OutBlock) , "::" , stringify ! (uplmtprice))) ; } test_field_uplmtprice () ; fn test_field_dnlmtprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8432OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dnlmtprice) as usize - ptr as usize } , 46usize , concat ! ("Offset of field: " , stringify ! (T8432OutBlock) , "::" , stringify ! (dnlmtprice))) ; } test_field_dnlmtprice () ; fn test_field_jnilclose () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8432OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jnilclose) as usize - ptr as usize } , 52usize , concat ! ("Offset of field: " , stringify ! (T8432OutBlock) , "::" , stringify ! (jnilclose))) ; } test_field_jnilclose () ; fn test_field_jnilhigh () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8432OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jnilhigh) as usize - ptr as usize } , 58usize , concat ! ("Offset of field: " , stringify ! (T8432OutBlock) , "::" , stringify ! (jnilhigh))) ; } test_field_jnilhigh () ; fn test_field_jnillow () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8432OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jnillow) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (T8432OutBlock) , "::" , stringify ! (jnillow))) ; } test_field_jnillow () ; fn test_field_recprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8432OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . recprice) as usize - ptr as usize } , 70usize , concat ! ("Offset of field: " , stringify ! (T8432OutBlock) , "::" , stringify ! (recprice))) ; } test_field_recprice () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T8436InBlock { pub gubun : [:: std :: os :: raw :: c_char ; 1usize] , } # [test] fn bindgen_test_layout_T8436InBlock () { assert_eq ! (:: std :: mem :: size_of :: < T8436InBlock > () , 1usize , concat ! ("Size of: " , stringify ! (T8436InBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T8436InBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T8436InBlock))) ; fn test_field_gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8436InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . gubun) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T8436InBlock) , "::" , stringify ! (gubun))) ; } test_field_gubun () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct T8436OutBlock { pub hName : [:: std :: os :: raw :: c_char ; 20usize] , pub shCode : [:: std :: os :: raw :: c_char ; 6usize] , pub expCode : [:: std :: os :: raw :: c_char ; 12usize] , pub etfGubun : [:: std :: os :: raw :: c_char ; 1usize] , pub upLmtPrice : [:: std :: os :: raw :: c_char ; 8usize] , pub dnLmtPrice : [:: std :: os :: raw :: c_char ; 8usize] , pub jnilClose : [:: std :: os :: raw :: c_char ; 8usize] , pub meMeDan : [:: std :: os :: raw :: c_char ; 5usize] , pub recPrice : [:: std :: os :: raw :: c_char ; 8usize] , pub gubun : [:: std :: os :: raw :: c_char ; 1usize] , pub bu12Gubun : [:: std :: os :: raw :: c_char ; 2usize] , pub spacGubun : [:: std :: os :: raw :: c_char ; 1usize] , pub filler : [:: std :: os :: raw :: c_char ; 32usize] , } # [test] fn bindgen_test_layout_T8436OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < T8436OutBlock > () , 112usize , concat ! ("Size of: " , stringify ! (T8436OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < T8436OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (T8436OutBlock))) ; fn test_field_hName () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8436OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . hName) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (T8436OutBlock) , "::" , stringify ! (hName))) ; } test_field_hName () ; fn test_field_shCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8436OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shCode) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (T8436OutBlock) , "::" , stringify ! (shCode))) ; } test_field_shCode () ; fn test_field_expCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8436OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . expCode) as usize - ptr as usize } , 26usize , concat ! ("Offset of field: " , stringify ! (T8436OutBlock) , "::" , stringify ! (expCode))) ; } test_field_expCode () ; fn test_field_etfGubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8436OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . etfGubun) as usize - ptr as usize } , 38usize , concat ! ("Offset of field: " , stringify ! (T8436OutBlock) , "::" , stringify ! (etfGubun))) ; } test_field_etfGubun () ; fn test_field_upLmtPrice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8436OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . upLmtPrice) as usize - ptr as usize } , 39usize , concat ! ("Offset of field: " , stringify ! (T8436OutBlock) , "::" , stringify ! (upLmtPrice))) ; } test_field_upLmtPrice () ; fn test_field_dnLmtPrice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8436OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dnLmtPrice) as usize - ptr as usize } , 47usize , concat ! ("Offset of field: " , stringify ! (T8436OutBlock) , "::" , stringify ! (dnLmtPrice))) ; } test_field_dnLmtPrice () ; fn test_field_jnilClose () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8436OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jnilClose) as usize - ptr as usize } , 55usize , concat ! ("Offset of field: " , stringify ! (T8436OutBlock) , "::" , stringify ! (jnilClose))) ; } test_field_jnilClose () ; fn test_field_meMeDan () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8436OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . meMeDan) as usize - ptr as usize } , 63usize , concat ! ("Offset of field: " , stringify ! (T8436OutBlock) , "::" , stringify ! (meMeDan))) ; } test_field_meMeDan () ; fn test_field_recPrice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8436OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . recPrice) as usize - ptr as usize } , 68usize , concat ! ("Offset of field: " , stringify ! (T8436OutBlock) , "::" , stringify ! (recPrice))) ; } test_field_recPrice () ; fn test_field_gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8436OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . gubun) as usize - ptr as usize } , 76usize , concat ! ("Offset of field: " , stringify ! (T8436OutBlock) , "::" , stringify ! (gubun))) ; } test_field_gubun () ; fn test_field_bu12Gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8436OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bu12Gubun) as usize - ptr as usize } , 77usize , concat ! ("Offset of field: " , stringify ! (T8436OutBlock) , "::" , stringify ! (bu12Gubun))) ; } test_field_bu12Gubun () ; fn test_field_spacGubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8436OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . spacGubun) as usize - ptr as usize } , 79usize , concat ! ("Offset of field: " , stringify ! (T8436OutBlock) , "::" , stringify ! (spacGubun))) ; } test_field_spacGubun () ; fn test_field_filler () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < T8436OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . filler) as usize - ptr as usize } , 80usize , concat ! ("Offset of field: " , stringify ! (T8436OutBlock) , "::" , stringify ! (filler))) ; } test_field_filler () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct H1_OutBlock { pub hotime : [:: std :: os :: raw :: c_char ; 6usize] , pub _hotime : :: std :: os :: raw :: c_char , pub offerho1 : [:: std :: os :: raw :: c_char ; 7usize] , pub _offerho1 : :: std :: os :: raw :: c_char , pub bidho1 : [:: std :: os :: raw :: c_char ; 7usize] , pub _bidho1 : :: std :: os :: raw :: c_char , pub offerrem1 : [:: std :: os :: raw :: c_char ; 9usize] , pub _offerrem1 : :: std :: os :: raw :: c_char , pub bidrem1 : [:: std :: os :: raw :: c_char ; 9usize] , pub _bidrem1 : :: std :: os :: raw :: c_char , pub offerho2 : [:: std :: os :: raw :: c_char ; 7usize] , pub _offerho2 : :: std :: os :: raw :: c_char , pub bidho2 : [:: std :: os :: raw :: c_char ; 7usize] , pub _bidho2 : :: std :: os :: raw :: c_char , pub offerrem2 : [:: std :: os :: raw :: c_char ; 9usize] , pub _offerrem2 : :: std :: os :: raw :: c_char , pub bidrem2 : [:: std :: os :: raw :: c_char ; 9usize] , pub _bidrem2 : :: std :: os :: raw :: c_char , pub offerho3 : [:: std :: os :: raw :: c_char ; 7usize] , pub _offerho3 : :: std :: os :: raw :: c_char , pub bidho3 : [:: std :: os :: raw :: c_char ; 7usize] , pub _bidho3 : :: std :: os :: raw :: c_char , pub offerrem3 : [:: std :: os :: raw :: c_char ; 9usize] , pub _offerrem3 : :: std :: os :: raw :: c_char , pub bidrem3 : [:: std :: os :: raw :: c_char ; 9usize] , pub _bidrem3 : :: std :: os :: raw :: c_char , pub offerho4 : [:: std :: os :: raw :: c_char ; 7usize] , pub _offerho4 : :: std :: os :: raw :: c_char , pub bidho4 : [:: std :: os :: raw :: c_char ; 7usize] , pub _bidho4 : :: std :: os :: raw :: c_char , pub offerrem4 : [:: std :: os :: raw :: c_char ; 9usize] , pub _offerrem4 : :: std :: os :: raw :: c_char , pub bidrem4 : [:: std :: os :: raw :: c_char ; 9usize] , pub _bidrem4 : :: std :: os :: raw :: c_char , pub offerho5 : [:: std :: os :: raw :: c_char ; 7usize] , pub _offerho5 : :: std :: os :: raw :: c_char , pub bidho5 : [:: std :: os :: raw :: c_char ; 7usize] , pub _bidho5 : :: std :: os :: raw :: c_char , pub offerrem5 : [:: std :: os :: raw :: c_char ; 9usize] , pub _offerrem5 : :: std :: os :: raw :: c_char , pub bidrem5 : [:: std :: os :: raw :: c_char ; 9usize] , pub _bidrem5 : :: std :: os :: raw :: c_char , pub offerho6 : [:: std :: os :: raw :: c_char ; 7usize] , pub _offerho6 : :: std :: os :: raw :: c_char , pub bidho6 : [:: std :: os :: raw :: c_char ; 7usize] , pub _bidho6 : :: std :: os :: raw :: c_char , pub offerrem6 : [:: std :: os :: raw :: c_char ; 9usize] , pub _offerrem6 : :: std :: os :: raw :: c_char , pub bidrem6 : [:: std :: os :: raw :: c_char ; 9usize] , pub _bidrem6 : :: std :: os :: raw :: c_char , pub offerho7 : [:: std :: os :: raw :: c_char ; 7usize] , pub _offerho7 : :: std :: os :: raw :: c_char , pub bidho7 : [:: std :: os :: raw :: c_char ; 7usize] , pub _bidho7 : :: std :: os :: raw :: c_char , pub offerrem7 : [:: std :: os :: raw :: c_char ; 9usize] , pub _offerrem7 : :: std :: os :: raw :: c_char , pub bidrem7 : [:: std :: os :: raw :: c_char ; 9usize] , pub _bidrem7 : :: std :: os :: raw :: c_char , pub offerho8 : [:: std :: os :: raw :: c_char ; 7usize] , pub _offerho8 : :: std :: os :: raw :: c_char , pub bidho8 : [:: std :: os :: raw :: c_char ; 7usize] , pub _bidho8 : :: std :: os :: raw :: c_char , pub offerrem8 : [:: std :: os :: raw :: c_char ; 9usize] , pub _offerrem8 : :: std :: os :: raw :: c_char , pub bidrem8 : [:: std :: os :: raw :: c_char ; 9usize] , pub _bidrem8 : :: std :: os :: raw :: c_char , pub offerho9 : [:: std :: os :: raw :: c_char ; 7usize] , pub _offerho9 : :: std :: os :: raw :: c_char , pub bidho9 : [:: std :: os :: raw :: c_char ; 7usize] , pub _bidho9 : :: std :: os :: raw :: c_char , pub offerrem9 : [:: std :: os :: raw :: c_char ; 9usize] , pub _offerrem9 : :: std :: os :: raw :: c_char , pub bidrem9 : [:: std :: os :: raw :: c_char ; 9usize] , pub _bidrem9 : :: std :: os :: raw :: c_char , pub offerho10 : [:: std :: os :: raw :: c_char ; 7usize] , pub _offerho10 : :: std :: os :: raw :: c_char , pub bidho10 : [:: std :: os :: raw :: c_char ; 7usize] , pub _bidho10 : :: std :: os :: raw :: c_char , pub offerrem10 : [:: std :: os :: raw :: c_char ; 9usize] , pub _offerrem10 : :: std :: os :: raw :: c_char , pub bidrem10 : [:: std :: os :: raw :: c_char ; 9usize] , pub _bidrem10 : :: std :: os :: raw :: c_char , pub totofferrem : [:: std :: os :: raw :: c_char ; 9usize] , pub _totofferrem : :: std :: os :: raw :: c_char , pub totbidrem : [:: std :: os :: raw :: c_char ; 9usize] , pub _totbidrem : :: std :: os :: raw :: c_char , pub donsigubun : [:: std :: os :: raw :: c_char ; 1usize] , pub _donsigubun : :: std :: os :: raw :: c_char , pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , pub alloc_gubun : [:: std :: os :: raw :: c_char ; 1usize] , pub _alloc_gubun : :: std :: os :: raw :: c_char , pub volume : [:: std :: os :: raw :: c_char ; 12usize] , pub _volume : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_H1_OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < H1_OutBlock > () , 411usize , concat ! ("Size of: " , stringify ! (H1_OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < H1_OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (H1_OutBlock))) ; fn test_field_hotime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . hotime) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (hotime))) ; } test_field_hotime () ; fn test_field__hotime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _hotime) as usize - ptr as usize } , 6usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_hotime))) ; } test_field__hotime () ; fn test_field_offerho1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho1) as usize - ptr as usize } , 7usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (offerho1))) ; } test_field_offerho1 () ; fn test_field__offerho1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho1) as usize - ptr as usize } , 14usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_offerho1))) ; } test_field__offerho1 () ; fn test_field_bidho1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho1) as usize - ptr as usize } , 15usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (bidho1))) ; } test_field_bidho1 () ; fn test_field__bidho1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho1) as usize - ptr as usize } , 22usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_bidho1))) ; } test_field__bidho1 () ; fn test_field_offerrem1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem1) as usize - ptr as usize } , 23usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (offerrem1))) ; } test_field_offerrem1 () ; fn test_field__offerrem1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem1) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_offerrem1))) ; } test_field__offerrem1 () ; fn test_field_bidrem1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem1) as usize - ptr as usize } , 33usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (bidrem1))) ; } test_field_bidrem1 () ; fn test_field__bidrem1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem1) as usize - ptr as usize } , 42usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_bidrem1))) ; } test_field__bidrem1 () ; fn test_field_offerho2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho2) as usize - ptr as usize } , 43usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (offerho2))) ; } test_field_offerho2 () ; fn test_field__offerho2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho2) as usize - ptr as usize } , 50usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_offerho2))) ; } test_field__offerho2 () ; fn test_field_bidho2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho2) as usize - ptr as usize } , 51usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (bidho2))) ; } test_field_bidho2 () ; fn test_field__bidho2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho2) as usize - ptr as usize } , 58usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_bidho2))) ; } test_field__bidho2 () ; fn test_field_offerrem2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem2) as usize - ptr as usize } , 59usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (offerrem2))) ; } test_field_offerrem2 () ; fn test_field__offerrem2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem2) as usize - ptr as usize } , 68usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_offerrem2))) ; } test_field__offerrem2 () ; fn test_field_bidrem2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem2) as usize - ptr as usize } , 69usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (bidrem2))) ; } test_field_bidrem2 () ; fn test_field__bidrem2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem2) as usize - ptr as usize } , 78usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_bidrem2))) ; } test_field__bidrem2 () ; fn test_field_offerho3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho3) as usize - ptr as usize } , 79usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (offerho3))) ; } test_field_offerho3 () ; fn test_field__offerho3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho3) as usize - ptr as usize } , 86usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_offerho3))) ; } test_field__offerho3 () ; fn test_field_bidho3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho3) as usize - ptr as usize } , 87usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (bidho3))) ; } test_field_bidho3 () ; fn test_field__bidho3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho3) as usize - ptr as usize } , 94usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_bidho3))) ; } test_field__bidho3 () ; fn test_field_offerrem3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem3) as usize - ptr as usize } , 95usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (offerrem3))) ; } test_field_offerrem3 () ; fn test_field__offerrem3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem3) as usize - ptr as usize } , 104usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_offerrem3))) ; } test_field__offerrem3 () ; fn test_field_bidrem3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem3) as usize - ptr as usize } , 105usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (bidrem3))) ; } test_field_bidrem3 () ; fn test_field__bidrem3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem3) as usize - ptr as usize } , 114usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_bidrem3))) ; } test_field__bidrem3 () ; fn test_field_offerho4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho4) as usize - ptr as usize } , 115usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (offerho4))) ; } test_field_offerho4 () ; fn test_field__offerho4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho4) as usize - ptr as usize } , 122usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_offerho4))) ; } test_field__offerho4 () ; fn test_field_bidho4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho4) as usize - ptr as usize } , 123usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (bidho4))) ; } test_field_bidho4 () ; fn test_field__bidho4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho4) as usize - ptr as usize } , 130usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_bidho4))) ; } test_field__bidho4 () ; fn test_field_offerrem4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem4) as usize - ptr as usize } , 131usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (offerrem4))) ; } test_field_offerrem4 () ; fn test_field__offerrem4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem4) as usize - ptr as usize } , 140usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_offerrem4))) ; } test_field__offerrem4 () ; fn test_field_bidrem4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem4) as usize - ptr as usize } , 141usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (bidrem4))) ; } test_field_bidrem4 () ; fn test_field__bidrem4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem4) as usize - ptr as usize } , 150usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_bidrem4))) ; } test_field__bidrem4 () ; fn test_field_offerho5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho5) as usize - ptr as usize } , 151usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (offerho5))) ; } test_field_offerho5 () ; fn test_field__offerho5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho5) as usize - ptr as usize } , 158usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_offerho5))) ; } test_field__offerho5 () ; fn test_field_bidho5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho5) as usize - ptr as usize } , 159usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (bidho5))) ; } test_field_bidho5 () ; fn test_field__bidho5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho5) as usize - ptr as usize } , 166usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_bidho5))) ; } test_field__bidho5 () ; fn test_field_offerrem5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem5) as usize - ptr as usize } , 167usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (offerrem5))) ; } test_field_offerrem5 () ; fn test_field__offerrem5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem5) as usize - ptr as usize } , 176usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_offerrem5))) ; } test_field__offerrem5 () ; fn test_field_bidrem5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem5) as usize - ptr as usize } , 177usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (bidrem5))) ; } test_field_bidrem5 () ; fn test_field__bidrem5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem5) as usize - ptr as usize } , 186usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_bidrem5))) ; } test_field__bidrem5 () ; fn test_field_offerho6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho6) as usize - ptr as usize } , 187usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (offerho6))) ; } test_field_offerho6 () ; fn test_field__offerho6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho6) as usize - ptr as usize } , 194usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_offerho6))) ; } test_field__offerho6 () ; fn test_field_bidho6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho6) as usize - ptr as usize } , 195usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (bidho6))) ; } test_field_bidho6 () ; fn test_field__bidho6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho6) as usize - ptr as usize } , 202usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_bidho6))) ; } test_field__bidho6 () ; fn test_field_offerrem6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem6) as usize - ptr as usize } , 203usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (offerrem6))) ; } test_field_offerrem6 () ; fn test_field__offerrem6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem6) as usize - ptr as usize } , 212usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_offerrem6))) ; } test_field__offerrem6 () ; fn test_field_bidrem6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem6) as usize - ptr as usize } , 213usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (bidrem6))) ; } test_field_bidrem6 () ; fn test_field__bidrem6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem6) as usize - ptr as usize } , 222usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_bidrem6))) ; } test_field__bidrem6 () ; fn test_field_offerho7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho7) as usize - ptr as usize } , 223usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (offerho7))) ; } test_field_offerho7 () ; fn test_field__offerho7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho7) as usize - ptr as usize } , 230usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_offerho7))) ; } test_field__offerho7 () ; fn test_field_bidho7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho7) as usize - ptr as usize } , 231usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (bidho7))) ; } test_field_bidho7 () ; fn test_field__bidho7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho7) as usize - ptr as usize } , 238usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_bidho7))) ; } test_field__bidho7 () ; fn test_field_offerrem7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem7) as usize - ptr as usize } , 239usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (offerrem7))) ; } test_field_offerrem7 () ; fn test_field__offerrem7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem7) as usize - ptr as usize } , 248usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_offerrem7))) ; } test_field__offerrem7 () ; fn test_field_bidrem7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem7) as usize - ptr as usize } , 249usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (bidrem7))) ; } test_field_bidrem7 () ; fn test_field__bidrem7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem7) as usize - ptr as usize } , 258usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_bidrem7))) ; } test_field__bidrem7 () ; fn test_field_offerho8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho8) as usize - ptr as usize } , 259usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (offerho8))) ; } test_field_offerho8 () ; fn test_field__offerho8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho8) as usize - ptr as usize } , 266usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_offerho8))) ; } test_field__offerho8 () ; fn test_field_bidho8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho8) as usize - ptr as usize } , 267usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (bidho8))) ; } test_field_bidho8 () ; fn test_field__bidho8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho8) as usize - ptr as usize } , 274usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_bidho8))) ; } test_field__bidho8 () ; fn test_field_offerrem8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem8) as usize - ptr as usize } , 275usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (offerrem8))) ; } test_field_offerrem8 () ; fn test_field__offerrem8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem8) as usize - ptr as usize } , 284usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_offerrem8))) ; } test_field__offerrem8 () ; fn test_field_bidrem8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem8) as usize - ptr as usize } , 285usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (bidrem8))) ; } test_field_bidrem8 () ; fn test_field__bidrem8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem8) as usize - ptr as usize } , 294usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_bidrem8))) ; } test_field__bidrem8 () ; fn test_field_offerho9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho9) as usize - ptr as usize } , 295usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (offerho9))) ; } test_field_offerho9 () ; fn test_field__offerho9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho9) as usize - ptr as usize } , 302usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_offerho9))) ; } test_field__offerho9 () ; fn test_field_bidho9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho9) as usize - ptr as usize } , 303usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (bidho9))) ; } test_field_bidho9 () ; fn test_field__bidho9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho9) as usize - ptr as usize } , 310usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_bidho9))) ; } test_field__bidho9 () ; fn test_field_offerrem9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem9) as usize - ptr as usize } , 311usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (offerrem9))) ; } test_field_offerrem9 () ; fn test_field__offerrem9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem9) as usize - ptr as usize } , 320usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_offerrem9))) ; } test_field__offerrem9 () ; fn test_field_bidrem9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem9) as usize - ptr as usize } , 321usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (bidrem9))) ; } test_field_bidrem9 () ; fn test_field__bidrem9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem9) as usize - ptr as usize } , 330usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_bidrem9))) ; } test_field__bidrem9 () ; fn test_field_offerho10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho10) as usize - ptr as usize } , 331usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (offerho10))) ; } test_field_offerho10 () ; fn test_field__offerho10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho10) as usize - ptr as usize } , 338usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_offerho10))) ; } test_field__offerho10 () ; fn test_field_bidho10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho10) as usize - ptr as usize } , 339usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (bidho10))) ; } test_field_bidho10 () ; fn test_field__bidho10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho10) as usize - ptr as usize } , 346usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_bidho10))) ; } test_field__bidho10 () ; fn test_field_offerrem10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem10) as usize - ptr as usize } , 347usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (offerrem10))) ; } test_field_offerrem10 () ; fn test_field__offerrem10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem10) as usize - ptr as usize } , 356usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_offerrem10))) ; } test_field__offerrem10 () ; fn test_field_bidrem10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem10) as usize - ptr as usize } , 357usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (bidrem10))) ; } test_field_bidrem10 () ; fn test_field__bidrem10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem10) as usize - ptr as usize } , 366usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_bidrem10))) ; } test_field__bidrem10 () ; fn test_field_totofferrem () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . totofferrem) as usize - ptr as usize } , 367usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (totofferrem))) ; } test_field_totofferrem () ; fn test_field__totofferrem () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _totofferrem) as usize - ptr as usize } , 376usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_totofferrem))) ; } test_field__totofferrem () ; fn test_field_totbidrem () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . totbidrem) as usize - ptr as usize } , 377usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (totbidrem))) ; } test_field_totbidrem () ; fn test_field__totbidrem () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _totbidrem) as usize - ptr as usize } , 386usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_totbidrem))) ; } test_field__totbidrem () ; fn test_field_donsigubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . donsigubun) as usize - ptr as usize } , 387usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (donsigubun))) ; } test_field_donsigubun () ; fn test_field__donsigubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _donsigubun) as usize - ptr as usize } , 388usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_donsigubun))) ; } test_field__donsigubun () ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 389usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 395usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; fn test_field_alloc_gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . alloc_gubun) as usize - ptr as usize } , 396usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (alloc_gubun))) ; } test_field_alloc_gubun () ; fn test_field__alloc_gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _alloc_gubun) as usize - ptr as usize } , 397usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_alloc_gubun))) ; } test_field__alloc_gubun () ; fn test_field_volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . volume) as usize - ptr as usize } , 398usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (volume))) ; } test_field_volume () ; fn test_field__volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H1_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _volume) as usize - ptr as usize } , 410usize , concat ! ("Offset of field: " , stringify ! (H1_OutBlock) , "::" , stringify ! (_volume))) ; } test_field__volume () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct H2_OutBlock { pub hotime : [:: std :: os :: raw :: c_char ; 6usize] , pub _hotime : :: std :: os :: raw :: c_char , pub tmofferrem : [:: std :: os :: raw :: c_char ; 12usize] , pub _tmofferrem : :: std :: os :: raw :: c_char , pub tmbidrem : [:: std :: os :: raw :: c_char ; 12usize] , pub _tmbidrem : :: std :: os :: raw :: c_char , pub pretmoffercha : [:: std :: os :: raw :: c_char ; 12usize] , pub _pretmoffercha : :: std :: os :: raw :: c_char , pub pretmbidcha : [:: std :: os :: raw :: c_char ; 12usize] , pub _pretmbidcha : :: std :: os :: raw :: c_char , pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_H2_OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < H2_OutBlock > () , 66usize , concat ! ("Size of: " , stringify ! (H2_OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < H2_OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (H2_OutBlock))) ; fn test_field_hotime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . hotime) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (H2_OutBlock) , "::" , stringify ! (hotime))) ; } test_field_hotime () ; fn test_field__hotime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _hotime) as usize - ptr as usize } , 6usize , concat ! ("Offset of field: " , stringify ! (H2_OutBlock) , "::" , stringify ! (_hotime))) ; } test_field__hotime () ; fn test_field_tmofferrem () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tmofferrem) as usize - ptr as usize } , 7usize , concat ! ("Offset of field: " , stringify ! (H2_OutBlock) , "::" , stringify ! (tmofferrem))) ; } test_field_tmofferrem () ; fn test_field__tmofferrem () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _tmofferrem) as usize - ptr as usize } , 19usize , concat ! ("Offset of field: " , stringify ! (H2_OutBlock) , "::" , stringify ! (_tmofferrem))) ; } test_field__tmofferrem () ; fn test_field_tmbidrem () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tmbidrem) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (H2_OutBlock) , "::" , stringify ! (tmbidrem))) ; } test_field_tmbidrem () ; fn test_field__tmbidrem () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _tmbidrem) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (H2_OutBlock) , "::" , stringify ! (_tmbidrem))) ; } test_field__tmbidrem () ; fn test_field_pretmoffercha () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . pretmoffercha) as usize - ptr as usize } , 33usize , concat ! ("Offset of field: " , stringify ! (H2_OutBlock) , "::" , stringify ! (pretmoffercha))) ; } test_field_pretmoffercha () ; fn test_field__pretmoffercha () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _pretmoffercha) as usize - ptr as usize } , 45usize , concat ! ("Offset of field: " , stringify ! (H2_OutBlock) , "::" , stringify ! (_pretmoffercha))) ; } test_field__pretmoffercha () ; fn test_field_pretmbidcha () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . pretmbidcha) as usize - ptr as usize } , 46usize , concat ! ("Offset of field: " , stringify ! (H2_OutBlock) , "::" , stringify ! (pretmbidcha))) ; } test_field_pretmbidcha () ; fn test_field__pretmbidcha () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _pretmbidcha) as usize - ptr as usize } , 58usize , concat ! ("Offset of field: " , stringify ! (H2_OutBlock) , "::" , stringify ! (_pretmbidcha))) ; } test_field__pretmbidcha () ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 59usize , concat ! ("Offset of field: " , stringify ! (H2_OutBlock) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < H2_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 65usize , concat ! ("Offset of field: " , stringify ! (H2_OutBlock) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct HA_OutBlock { pub hotime : [:: std :: os :: raw :: c_char ; 6usize] , pub _hotime : :: std :: os :: raw :: c_char , pub offerho1 : [:: std :: os :: raw :: c_char ; 7usize] , pub _offerho1 : :: std :: os :: raw :: c_char , pub bidho1 : [:: std :: os :: raw :: c_char ; 7usize] , pub _bidho1 : :: std :: os :: raw :: c_char , pub offerrem1 : [:: std :: os :: raw :: c_char ; 9usize] , pub _offerrem1 : :: std :: os :: raw :: c_char , pub bidrem1 : [:: std :: os :: raw :: c_char ; 9usize] , pub _bidrem1 : :: std :: os :: raw :: c_char , pub offerho2 : [:: std :: os :: raw :: c_char ; 7usize] , pub _offerho2 : :: std :: os :: raw :: c_char , pub bidho2 : [:: std :: os :: raw :: c_char ; 7usize] , pub _bidho2 : :: std :: os :: raw :: c_char , pub offerrem2 : [:: std :: os :: raw :: c_char ; 9usize] , pub _offerrem2 : :: std :: os :: raw :: c_char , pub bidrem2 : [:: std :: os :: raw :: c_char ; 9usize] , pub _bidrem2 : :: std :: os :: raw :: c_char , pub offerho3 : [:: std :: os :: raw :: c_char ; 7usize] , pub _offerho3 : :: std :: os :: raw :: c_char , pub bidho3 : [:: std :: os :: raw :: c_char ; 7usize] , pub _bidho3 : :: std :: os :: raw :: c_char , pub offerrem3 : [:: std :: os :: raw :: c_char ; 9usize] , pub _offerrem3 : :: std :: os :: raw :: c_char , pub bidrem3 : [:: std :: os :: raw :: c_char ; 9usize] , pub _bidrem3 : :: std :: os :: raw :: c_char , pub offerho4 : [:: std :: os :: raw :: c_char ; 7usize] , pub _offerho4 : :: std :: os :: raw :: c_char , pub bidho4 : [:: std :: os :: raw :: c_char ; 7usize] , pub _bidho4 : :: std :: os :: raw :: c_char , pub offerrem4 : [:: std :: os :: raw :: c_char ; 9usize] , pub _offerrem4 : :: std :: os :: raw :: c_char , pub bidrem4 : [:: std :: os :: raw :: c_char ; 9usize] , pub _bidrem4 : :: std :: os :: raw :: c_char , pub offerho5 : [:: std :: os :: raw :: c_char ; 7usize] , pub _offerho5 : :: std :: os :: raw :: c_char , pub bidho5 : [:: std :: os :: raw :: c_char ; 7usize] , pub _bidho5 : :: std :: os :: raw :: c_char , pub offerrem5 : [:: std :: os :: raw :: c_char ; 9usize] , pub _offerrem5 : :: std :: os :: raw :: c_char , pub bidrem5 : [:: std :: os :: raw :: c_char ; 9usize] , pub _bidrem5 : :: std :: os :: raw :: c_char , pub offerho6 : [:: std :: os :: raw :: c_char ; 7usize] , pub _offerho6 : :: std :: os :: raw :: c_char , pub bidho6 : [:: std :: os :: raw :: c_char ; 7usize] , pub _bidho6 : :: std :: os :: raw :: c_char , pub offerrem6 : [:: std :: os :: raw :: c_char ; 9usize] , pub _offerrem6 : :: std :: os :: raw :: c_char , pub bidrem6 : [:: std :: os :: raw :: c_char ; 9usize] , pub _bidrem6 : :: std :: os :: raw :: c_char , pub offerho7 : [:: std :: os :: raw :: c_char ; 7usize] , pub _offerho7 : :: std :: os :: raw :: c_char , pub bidho7 : [:: std :: os :: raw :: c_char ; 7usize] , pub _bidho7 : :: std :: os :: raw :: c_char , pub offerrem7 : [:: std :: os :: raw :: c_char ; 9usize] , pub _offerrem7 : :: std :: os :: raw :: c_char , pub bidrem7 : [:: std :: os :: raw :: c_char ; 9usize] , pub _bidrem7 : :: std :: os :: raw :: c_char , pub offerho8 : [:: std :: os :: raw :: c_char ; 7usize] , pub _offerho8 : :: std :: os :: raw :: c_char , pub bidho8 : [:: std :: os :: raw :: c_char ; 7usize] , pub _bidho8 : :: std :: os :: raw :: c_char , pub offerrem8 : [:: std :: os :: raw :: c_char ; 9usize] , pub _offerrem8 : :: std :: os :: raw :: c_char , pub bidrem8 : [:: std :: os :: raw :: c_char ; 9usize] , pub _bidrem8 : :: std :: os :: raw :: c_char , pub offerho9 : [:: std :: os :: raw :: c_char ; 7usize] , pub _offerho9 : :: std :: os :: raw :: c_char , pub bidho9 : [:: std :: os :: raw :: c_char ; 7usize] , pub _bidho9 : :: std :: os :: raw :: c_char , pub offerrem9 : [:: std :: os :: raw :: c_char ; 9usize] , pub _offerrem9 : :: std :: os :: raw :: c_char , pub bidrem9 : [:: std :: os :: raw :: c_char ; 9usize] , pub _bidrem9 : :: std :: os :: raw :: c_char , pub offerho10 : [:: std :: os :: raw :: c_char ; 7usize] , pub _offerho10 : :: std :: os :: raw :: c_char , pub bidho10 : [:: std :: os :: raw :: c_char ; 7usize] , pub _bidho10 : :: std :: os :: raw :: c_char , pub offerrem10 : [:: std :: os :: raw :: c_char ; 9usize] , pub _offerrem10 : :: std :: os :: raw :: c_char , pub bidrem10 : [:: std :: os :: raw :: c_char ; 9usize] , pub _bidrem10 : :: std :: os :: raw :: c_char , pub totofferrem : [:: std :: os :: raw :: c_char ; 9usize] , pub _totofferrem : :: std :: os :: raw :: c_char , pub totbidrem : [:: std :: os :: raw :: c_char ; 9usize] , pub _totbidrem : :: std :: os :: raw :: c_char , pub donsigubun : [:: std :: os :: raw :: c_char ; 1usize] , pub _donsigubun : :: std :: os :: raw :: c_char , pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , pub alloc_gubun : [:: std :: os :: raw :: c_char ; 1usize] , pub _alloc_gubun : :: std :: os :: raw :: c_char , pub volume : [:: std :: os :: raw :: c_char ; 12usize] , pub _volume : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_HA_OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < HA_OutBlock > () , 411usize , concat ! ("Size of: " , stringify ! (HA_OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < HA_OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (HA_OutBlock))) ; fn test_field_hotime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . hotime) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (hotime))) ; } test_field_hotime () ; fn test_field__hotime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _hotime) as usize - ptr as usize } , 6usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_hotime))) ; } test_field__hotime () ; fn test_field_offerho1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho1) as usize - ptr as usize } , 7usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (offerho1))) ; } test_field_offerho1 () ; fn test_field__offerho1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho1) as usize - ptr as usize } , 14usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_offerho1))) ; } test_field__offerho1 () ; fn test_field_bidho1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho1) as usize - ptr as usize } , 15usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (bidho1))) ; } test_field_bidho1 () ; fn test_field__bidho1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho1) as usize - ptr as usize } , 22usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_bidho1))) ; } test_field__bidho1 () ; fn test_field_offerrem1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem1) as usize - ptr as usize } , 23usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (offerrem1))) ; } test_field_offerrem1 () ; fn test_field__offerrem1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem1) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_offerrem1))) ; } test_field__offerrem1 () ; fn test_field_bidrem1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem1) as usize - ptr as usize } , 33usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (bidrem1))) ; } test_field_bidrem1 () ; fn test_field__bidrem1 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem1) as usize - ptr as usize } , 42usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_bidrem1))) ; } test_field__bidrem1 () ; fn test_field_offerho2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho2) as usize - ptr as usize } , 43usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (offerho2))) ; } test_field_offerho2 () ; fn test_field__offerho2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho2) as usize - ptr as usize } , 50usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_offerho2))) ; } test_field__offerho2 () ; fn test_field_bidho2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho2) as usize - ptr as usize } , 51usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (bidho2))) ; } test_field_bidho2 () ; fn test_field__bidho2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho2) as usize - ptr as usize } , 58usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_bidho2))) ; } test_field__bidho2 () ; fn test_field_offerrem2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem2) as usize - ptr as usize } , 59usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (offerrem2))) ; } test_field_offerrem2 () ; fn test_field__offerrem2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem2) as usize - ptr as usize } , 68usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_offerrem2))) ; } test_field__offerrem2 () ; fn test_field_bidrem2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem2) as usize - ptr as usize } , 69usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (bidrem2))) ; } test_field_bidrem2 () ; fn test_field__bidrem2 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem2) as usize - ptr as usize } , 78usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_bidrem2))) ; } test_field__bidrem2 () ; fn test_field_offerho3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho3) as usize - ptr as usize } , 79usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (offerho3))) ; } test_field_offerho3 () ; fn test_field__offerho3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho3) as usize - ptr as usize } , 86usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_offerho3))) ; } test_field__offerho3 () ; fn test_field_bidho3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho3) as usize - ptr as usize } , 87usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (bidho3))) ; } test_field_bidho3 () ; fn test_field__bidho3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho3) as usize - ptr as usize } , 94usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_bidho3))) ; } test_field__bidho3 () ; fn test_field_offerrem3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem3) as usize - ptr as usize } , 95usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (offerrem3))) ; } test_field_offerrem3 () ; fn test_field__offerrem3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem3) as usize - ptr as usize } , 104usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_offerrem3))) ; } test_field__offerrem3 () ; fn test_field_bidrem3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem3) as usize - ptr as usize } , 105usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (bidrem3))) ; } test_field_bidrem3 () ; fn test_field__bidrem3 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem3) as usize - ptr as usize } , 114usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_bidrem3))) ; } test_field__bidrem3 () ; fn test_field_offerho4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho4) as usize - ptr as usize } , 115usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (offerho4))) ; } test_field_offerho4 () ; fn test_field__offerho4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho4) as usize - ptr as usize } , 122usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_offerho4))) ; } test_field__offerho4 () ; fn test_field_bidho4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho4) as usize - ptr as usize } , 123usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (bidho4))) ; } test_field_bidho4 () ; fn test_field__bidho4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho4) as usize - ptr as usize } , 130usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_bidho4))) ; } test_field__bidho4 () ; fn test_field_offerrem4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem4) as usize - ptr as usize } , 131usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (offerrem4))) ; } test_field_offerrem4 () ; fn test_field__offerrem4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem4) as usize - ptr as usize } , 140usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_offerrem4))) ; } test_field__offerrem4 () ; fn test_field_bidrem4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem4) as usize - ptr as usize } , 141usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (bidrem4))) ; } test_field_bidrem4 () ; fn test_field__bidrem4 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem4) as usize - ptr as usize } , 150usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_bidrem4))) ; } test_field__bidrem4 () ; fn test_field_offerho5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho5) as usize - ptr as usize } , 151usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (offerho5))) ; } test_field_offerho5 () ; fn test_field__offerho5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho5) as usize - ptr as usize } , 158usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_offerho5))) ; } test_field__offerho5 () ; fn test_field_bidho5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho5) as usize - ptr as usize } , 159usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (bidho5))) ; } test_field_bidho5 () ; fn test_field__bidho5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho5) as usize - ptr as usize } , 166usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_bidho5))) ; } test_field__bidho5 () ; fn test_field_offerrem5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem5) as usize - ptr as usize } , 167usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (offerrem5))) ; } test_field_offerrem5 () ; fn test_field__offerrem5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem5) as usize - ptr as usize } , 176usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_offerrem5))) ; } test_field__offerrem5 () ; fn test_field_bidrem5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem5) as usize - ptr as usize } , 177usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (bidrem5))) ; } test_field_bidrem5 () ; fn test_field__bidrem5 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem5) as usize - ptr as usize } , 186usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_bidrem5))) ; } test_field__bidrem5 () ; fn test_field_offerho6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho6) as usize - ptr as usize } , 187usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (offerho6))) ; } test_field_offerho6 () ; fn test_field__offerho6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho6) as usize - ptr as usize } , 194usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_offerho6))) ; } test_field__offerho6 () ; fn test_field_bidho6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho6) as usize - ptr as usize } , 195usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (bidho6))) ; } test_field_bidho6 () ; fn test_field__bidho6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho6) as usize - ptr as usize } , 202usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_bidho6))) ; } test_field__bidho6 () ; fn test_field_offerrem6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem6) as usize - ptr as usize } , 203usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (offerrem6))) ; } test_field_offerrem6 () ; fn test_field__offerrem6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem6) as usize - ptr as usize } , 212usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_offerrem6))) ; } test_field__offerrem6 () ; fn test_field_bidrem6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem6) as usize - ptr as usize } , 213usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (bidrem6))) ; } test_field_bidrem6 () ; fn test_field__bidrem6 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem6) as usize - ptr as usize } , 222usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_bidrem6))) ; } test_field__bidrem6 () ; fn test_field_offerho7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho7) as usize - ptr as usize } , 223usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (offerho7))) ; } test_field_offerho7 () ; fn test_field__offerho7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho7) as usize - ptr as usize } , 230usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_offerho7))) ; } test_field__offerho7 () ; fn test_field_bidho7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho7) as usize - ptr as usize } , 231usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (bidho7))) ; } test_field_bidho7 () ; fn test_field__bidho7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho7) as usize - ptr as usize } , 238usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_bidho7))) ; } test_field__bidho7 () ; fn test_field_offerrem7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem7) as usize - ptr as usize } , 239usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (offerrem7))) ; } test_field_offerrem7 () ; fn test_field__offerrem7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem7) as usize - ptr as usize } , 248usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_offerrem7))) ; } test_field__offerrem7 () ; fn test_field_bidrem7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem7) as usize - ptr as usize } , 249usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (bidrem7))) ; } test_field_bidrem7 () ; fn test_field__bidrem7 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem7) as usize - ptr as usize } , 258usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_bidrem7))) ; } test_field__bidrem7 () ; fn test_field_offerho8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho8) as usize - ptr as usize } , 259usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (offerho8))) ; } test_field_offerho8 () ; fn test_field__offerho8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho8) as usize - ptr as usize } , 266usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_offerho8))) ; } test_field__offerho8 () ; fn test_field_bidho8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho8) as usize - ptr as usize } , 267usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (bidho8))) ; } test_field_bidho8 () ; fn test_field__bidho8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho8) as usize - ptr as usize } , 274usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_bidho8))) ; } test_field__bidho8 () ; fn test_field_offerrem8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem8) as usize - ptr as usize } , 275usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (offerrem8))) ; } test_field_offerrem8 () ; fn test_field__offerrem8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem8) as usize - ptr as usize } , 284usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_offerrem8))) ; } test_field__offerrem8 () ; fn test_field_bidrem8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem8) as usize - ptr as usize } , 285usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (bidrem8))) ; } test_field_bidrem8 () ; fn test_field__bidrem8 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem8) as usize - ptr as usize } , 294usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_bidrem8))) ; } test_field__bidrem8 () ; fn test_field_offerho9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho9) as usize - ptr as usize } , 295usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (offerho9))) ; } test_field_offerho9 () ; fn test_field__offerho9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho9) as usize - ptr as usize } , 302usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_offerho9))) ; } test_field__offerho9 () ; fn test_field_bidho9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho9) as usize - ptr as usize } , 303usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (bidho9))) ; } test_field_bidho9 () ; fn test_field__bidho9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho9) as usize - ptr as usize } , 310usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_bidho9))) ; } test_field__bidho9 () ; fn test_field_offerrem9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem9) as usize - ptr as usize } , 311usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (offerrem9))) ; } test_field_offerrem9 () ; fn test_field__offerrem9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem9) as usize - ptr as usize } , 320usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_offerrem9))) ; } test_field__offerrem9 () ; fn test_field_bidrem9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem9) as usize - ptr as usize } , 321usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (bidrem9))) ; } test_field_bidrem9 () ; fn test_field__bidrem9 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem9) as usize - ptr as usize } , 330usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_bidrem9))) ; } test_field__bidrem9 () ; fn test_field_offerho10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho10) as usize - ptr as usize } , 331usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (offerho10))) ; } test_field_offerho10 () ; fn test_field__offerho10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho10) as usize - ptr as usize } , 338usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_offerho10))) ; } test_field__offerho10 () ; fn test_field_bidho10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho10) as usize - ptr as usize } , 339usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (bidho10))) ; } test_field_bidho10 () ; fn test_field__bidho10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho10) as usize - ptr as usize } , 346usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_bidho10))) ; } test_field__bidho10 () ; fn test_field_offerrem10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerrem10) as usize - ptr as usize } , 347usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (offerrem10))) ; } test_field_offerrem10 () ; fn test_field__offerrem10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerrem10) as usize - ptr as usize } , 356usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_offerrem10))) ; } test_field__offerrem10 () ; fn test_field_bidrem10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidrem10) as usize - ptr as usize } , 357usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (bidrem10))) ; } test_field_bidrem10 () ; fn test_field__bidrem10 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidrem10) as usize - ptr as usize } , 366usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_bidrem10))) ; } test_field__bidrem10 () ; fn test_field_totofferrem () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . totofferrem) as usize - ptr as usize } , 367usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (totofferrem))) ; } test_field_totofferrem () ; fn test_field__totofferrem () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _totofferrem) as usize - ptr as usize } , 376usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_totofferrem))) ; } test_field__totofferrem () ; fn test_field_totbidrem () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . totbidrem) as usize - ptr as usize } , 377usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (totbidrem))) ; } test_field_totbidrem () ; fn test_field__totbidrem () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _totbidrem) as usize - ptr as usize } , 386usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_totbidrem))) ; } test_field__totbidrem () ; fn test_field_donsigubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . donsigubun) as usize - ptr as usize } , 387usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (donsigubun))) ; } test_field_donsigubun () ; fn test_field__donsigubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _donsigubun) as usize - ptr as usize } , 388usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_donsigubun))) ; } test_field__donsigubun () ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 389usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 395usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; fn test_field_alloc_gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . alloc_gubun) as usize - ptr as usize } , 396usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (alloc_gubun))) ; } test_field_alloc_gubun () ; fn test_field__alloc_gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _alloc_gubun) as usize - ptr as usize } , 397usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_alloc_gubun))) ; } test_field__alloc_gubun () ; fn test_field_volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . volume) as usize - ptr as usize } , 398usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (volume))) ; } test_field_volume () ; fn test_field__volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HA_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _volume) as usize - ptr as usize } , 410usize , concat ! ("Offset of field: " , stringify ! (HA_OutBlock) , "::" , stringify ! (_volume))) ; } test_field__volume () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct HB_OutBlock { pub hotime : [:: std :: os :: raw :: c_char ; 6usize] , pub _hotime : :: std :: os :: raw :: c_char , pub tmofferrem : [:: std :: os :: raw :: c_char ; 12usize] , pub _tmofferrem : :: std :: os :: raw :: c_char , pub tmbidrem : [:: std :: os :: raw :: c_char ; 12usize] , pub _tmbidrem : :: std :: os :: raw :: c_char , pub pretmoffercha : [:: std :: os :: raw :: c_char ; 12usize] , pub _pretmoffercha : :: std :: os :: raw :: c_char , pub pretmbidcha : [:: std :: os :: raw :: c_char ; 12usize] , pub _pretmbidcha : :: std :: os :: raw :: c_char , pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_HB_OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < HB_OutBlock > () , 66usize , concat ! ("Size of: " , stringify ! (HB_OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < HB_OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (HB_OutBlock))) ; fn test_field_hotime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HB_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . hotime) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (HB_OutBlock) , "::" , stringify ! (hotime))) ; } test_field_hotime () ; fn test_field__hotime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HB_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _hotime) as usize - ptr as usize } , 6usize , concat ! ("Offset of field: " , stringify ! (HB_OutBlock) , "::" , stringify ! (_hotime))) ; } test_field__hotime () ; fn test_field_tmofferrem () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HB_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tmofferrem) as usize - ptr as usize } , 7usize , concat ! ("Offset of field: " , stringify ! (HB_OutBlock) , "::" , stringify ! (tmofferrem))) ; } test_field_tmofferrem () ; fn test_field__tmofferrem () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HB_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _tmofferrem) as usize - ptr as usize } , 19usize , concat ! ("Offset of field: " , stringify ! (HB_OutBlock) , "::" , stringify ! (_tmofferrem))) ; } test_field__tmofferrem () ; fn test_field_tmbidrem () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HB_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tmbidrem) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (HB_OutBlock) , "::" , stringify ! (tmbidrem))) ; } test_field_tmbidrem () ; fn test_field__tmbidrem () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HB_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _tmbidrem) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (HB_OutBlock) , "::" , stringify ! (_tmbidrem))) ; } test_field__tmbidrem () ; fn test_field_pretmoffercha () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HB_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . pretmoffercha) as usize - ptr as usize } , 33usize , concat ! ("Offset of field: " , stringify ! (HB_OutBlock) , "::" , stringify ! (pretmoffercha))) ; } test_field_pretmoffercha () ; fn test_field__pretmoffercha () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HB_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _pretmoffercha) as usize - ptr as usize } , 45usize , concat ! ("Offset of field: " , stringify ! (HB_OutBlock) , "::" , stringify ! (_pretmoffercha))) ; } test_field__pretmoffercha () ; fn test_field_pretmbidcha () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HB_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . pretmbidcha) as usize - ptr as usize } , 46usize , concat ! ("Offset of field: " , stringify ! (HB_OutBlock) , "::" , stringify ! (pretmbidcha))) ; } test_field_pretmbidcha () ; fn test_field__pretmbidcha () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HB_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _pretmbidcha) as usize - ptr as usize } , 58usize , concat ! ("Offset of field: " , stringify ! (HB_OutBlock) , "::" , stringify ! (_pretmbidcha))) ; } test_field__pretmbidcha () ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HB_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 59usize , concat ! ("Offset of field: " , stringify ! (HB_OutBlock) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < HB_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 65usize , concat ! ("Offset of field: " , stringify ! (HB_OutBlock) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct S3_OutBlock { pub chetime : [:: std :: os :: raw :: c_char ; 6usize] , pub _chetime : :: std :: os :: raw :: c_char , pub sign : [:: std :: os :: raw :: c_char ; 1usize] , pub _sign : :: std :: os :: raw :: c_char , pub change : [:: std :: os :: raw :: c_char ; 8usize] , pub _change : :: std :: os :: raw :: c_char , pub drate : [:: std :: os :: raw :: c_char ; 6usize] , pub _drate : :: std :: os :: raw :: c_char , pub price : [:: std :: os :: raw :: c_char ; 8usize] , pub _price : :: std :: os :: raw :: c_char , pub opentime : [:: std :: os :: raw :: c_char ; 6usize] , pub _opentime : :: std :: os :: raw :: c_char , pub open : [:: std :: os :: raw :: c_char ; 8usize] , pub _open : :: std :: os :: raw :: c_char , pub hightime : [:: std :: os :: raw :: c_char ; 6usize] , pub _hightime : :: std :: os :: raw :: c_char , pub high : [:: std :: os :: raw :: c_char ; 8usize] , pub _high : :: std :: os :: raw :: c_char , pub lowtime : [:: std :: os :: raw :: c_char ; 6usize] , pub _lowtime : :: std :: os :: raw :: c_char , pub low : [:: std :: os :: raw :: c_char ; 8usize] , pub _low : :: std :: os :: raw :: c_char , pub cgubun : [:: std :: os :: raw :: c_char ; 1usize] , pub _cgubun : :: std :: os :: raw :: c_char , pub cvolume : [:: std :: os :: raw :: c_char ; 8usize] , pub _cvolume : :: std :: os :: raw :: c_char , pub volume : [:: std :: os :: raw :: c_char ; 12usize] , pub _volume : :: std :: os :: raw :: c_char , pub value : [:: std :: os :: raw :: c_char ; 12usize] , pub _value : :: std :: os :: raw :: c_char , pub mdvolume : [:: std :: os :: raw :: c_char ; 12usize] , pub _mdvolume : :: std :: os :: raw :: c_char , pub mdchecnt : [:: std :: os :: raw :: c_char ; 8usize] , pub _mdchecnt : :: std :: os :: raw :: c_char , pub msvolume : [:: std :: os :: raw :: c_char ; 12usize] , pub _msvolume : :: std :: os :: raw :: c_char , pub mschecnt : [:: std :: os :: raw :: c_char ; 8usize] , pub _mschecnt : :: std :: os :: raw :: c_char , pub cpower : [:: std :: os :: raw :: c_char ; 9usize] , pub _cpower : :: std :: os :: raw :: c_char , pub wAvrg : [:: std :: os :: raw :: c_char ; 8usize] , pub _w_avrg : :: std :: os :: raw :: c_char , pub offerho : [:: std :: os :: raw :: c_char ; 8usize] , pub _offerho : :: std :: os :: raw :: c_char , pub bidho : [:: std :: os :: raw :: c_char ; 8usize] , pub _bidho : :: std :: os :: raw :: c_char , pub status : [:: std :: os :: raw :: c_char ; 2usize] , pub _status : :: std :: os :: raw :: c_char , pub jnilvolume : [:: std :: os :: raw :: c_char ; 12usize] , pub _jnilvolume : :: std :: os :: raw :: c_char , pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_S3_OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < S3_OutBlock > () , 223usize , concat ! ("Size of: " , stringify ! (S3_OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < S3_OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (S3_OutBlock))) ; fn test_field_chetime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . chetime) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (chetime))) ; } test_field_chetime () ; fn test_field__chetime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _chetime) as usize - ptr as usize } , 6usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (_chetime))) ; } test_field__chetime () ; fn test_field_sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sign) as usize - ptr as usize } , 7usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (sign))) ; } test_field_sign () ; fn test_field__sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sign) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (_sign))) ; } test_field__sign () ; fn test_field_change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . change) as usize - ptr as usize } , 9usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (change))) ; } test_field_change () ; fn test_field__change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _change) as usize - ptr as usize } , 17usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (_change))) ; } test_field__change () ; fn test_field_drate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . drate) as usize - ptr as usize } , 18usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (drate))) ; } test_field_drate () ; fn test_field__drate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _drate) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (_drate))) ; } test_field__drate () ; fn test_field_price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . price) as usize - ptr as usize } , 25usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (price))) ; } test_field_price () ; fn test_field__price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _price) as usize - ptr as usize } , 33usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (_price))) ; } test_field__price () ; fn test_field_opentime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . opentime) as usize - ptr as usize } , 34usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (opentime))) ; } test_field_opentime () ; fn test_field__opentime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _opentime) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (_opentime))) ; } test_field__opentime () ; fn test_field_open () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . open) as usize - ptr as usize } , 41usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (open))) ; } test_field_open () ; fn test_field__open () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _open) as usize - ptr as usize } , 49usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (_open))) ; } test_field__open () ; fn test_field_hightime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . hightime) as usize - ptr as usize } , 50usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (hightime))) ; } test_field_hightime () ; fn test_field__hightime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _hightime) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (_hightime))) ; } test_field__hightime () ; fn test_field_high () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . high) as usize - ptr as usize } , 57usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (high))) ; } test_field_high () ; fn test_field__high () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _high) as usize - ptr as usize } , 65usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (_high))) ; } test_field__high () ; fn test_field_lowtime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lowtime) as usize - ptr as usize } , 66usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (lowtime))) ; } test_field_lowtime () ; fn test_field__lowtime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lowtime) as usize - ptr as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (_lowtime))) ; } test_field__lowtime () ; fn test_field_low () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . low) as usize - ptr as usize } , 73usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (low))) ; } test_field_low () ; fn test_field__low () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _low) as usize - ptr as usize } , 81usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (_low))) ; } test_field__low () ; fn test_field_cgubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cgubun) as usize - ptr as usize } , 82usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (cgubun))) ; } test_field_cgubun () ; fn test_field__cgubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cgubun) as usize - ptr as usize } , 83usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (_cgubun))) ; } test_field__cgubun () ; fn test_field_cvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cvolume) as usize - ptr as usize } , 84usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (cvolume))) ; } test_field_cvolume () ; fn test_field__cvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cvolume) as usize - ptr as usize } , 92usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (_cvolume))) ; } test_field__cvolume () ; fn test_field_volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . volume) as usize - ptr as usize } , 93usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (volume))) ; } test_field_volume () ; fn test_field__volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _volume) as usize - ptr as usize } , 105usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (_volume))) ; } test_field__volume () ; fn test_field_value () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . value) as usize - ptr as usize } , 106usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (value))) ; } test_field_value () ; fn test_field__value () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _value) as usize - ptr as usize } , 118usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (_value))) ; } test_field__value () ; fn test_field_mdvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mdvolume) as usize - ptr as usize } , 119usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (mdvolume))) ; } test_field_mdvolume () ; fn test_field__mdvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _mdvolume) as usize - ptr as usize } , 131usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (_mdvolume))) ; } test_field__mdvolume () ; fn test_field_mdchecnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mdchecnt) as usize - ptr as usize } , 132usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (mdchecnt))) ; } test_field_mdchecnt () ; fn test_field__mdchecnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _mdchecnt) as usize - ptr as usize } , 140usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (_mdchecnt))) ; } test_field__mdchecnt () ; fn test_field_msvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . msvolume) as usize - ptr as usize } , 141usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (msvolume))) ; } test_field_msvolume () ; fn test_field__msvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _msvolume) as usize - ptr as usize } , 153usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (_msvolume))) ; } test_field__msvolume () ; fn test_field_mschecnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mschecnt) as usize - ptr as usize } , 154usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (mschecnt))) ; } test_field_mschecnt () ; fn test_field__mschecnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _mschecnt) as usize - ptr as usize } , 162usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (_mschecnt))) ; } test_field__mschecnt () ; fn test_field_cpower () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cpower) as usize - ptr as usize } , 163usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (cpower))) ; } test_field_cpower () ; fn test_field__cpower () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cpower) as usize - ptr as usize } , 172usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (_cpower))) ; } test_field__cpower () ; fn test_field_wAvrg () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . wAvrg) as usize - ptr as usize } , 173usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (wAvrg))) ; } test_field_wAvrg () ; fn test_field__w_avrg () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _w_avrg) as usize - ptr as usize } , 181usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (_w_avrg))) ; } test_field__w_avrg () ; fn test_field_offerho () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho) as usize - ptr as usize } , 182usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (offerho))) ; } test_field_offerho () ; fn test_field__offerho () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho) as usize - ptr as usize } , 190usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (_offerho))) ; } test_field__offerho () ; fn test_field_bidho () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho) as usize - ptr as usize } , 191usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (bidho))) ; } test_field_bidho () ; fn test_field__bidho () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho) as usize - ptr as usize } , 199usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (_bidho))) ; } test_field__bidho () ; fn test_field_status () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . status) as usize - ptr as usize } , 200usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (status))) ; } test_field_status () ; fn test_field__status () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _status) as usize - ptr as usize } , 202usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (_status))) ; } test_field__status () ; fn test_field_jnilvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jnilvolume) as usize - ptr as usize } , 203usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (jnilvolume))) ; } test_field_jnilvolume () ; fn test_field__jnilvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jnilvolume) as usize - ptr as usize } , 215usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (_jnilvolume))) ; } test_field__jnilvolume () ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 216usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < S3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 222usize , concat ! ("Offset of field: " , stringify ! (S3_OutBlock) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct YS3OutBlock { pub hotime : [:: std :: os :: raw :: c_char ; 6usize] , pub _hotime : :: std :: os :: raw :: c_char , pub yeprice : [:: std :: os :: raw :: c_char ; 8usize] , pub _yeprice : :: std :: os :: raw :: c_char , pub yevolume : [:: std :: os :: raw :: c_char ; 12usize] , pub _yevolume : :: std :: os :: raw :: c_char , pub jnilysign : [:: std :: os :: raw :: c_char ; 1usize] , pub _jnilysign : :: std :: os :: raw :: c_char , pub preychange : [:: std :: os :: raw :: c_char ; 8usize] , pub _preychange : :: std :: os :: raw :: c_char , pub jnilydrate : [:: std :: os :: raw :: c_char ; 6usize] , pub _jnilydrate : :: std :: os :: raw :: c_char , pub yofferho0 : [:: std :: os :: raw :: c_char ; 8usize] , pub _yofferho0 : :: std :: os :: raw :: c_char , pub ybidho0 : [:: std :: os :: raw :: c_char ; 8usize] , pub _ybidho0 : :: std :: os :: raw :: c_char , pub yofferrem0 : [:: std :: os :: raw :: c_char ; 12usize] , pub _yofferrem0 : :: std :: os :: raw :: c_char , pub ybidrem0 : [:: std :: os :: raw :: c_char ; 12usize] , pub _ybidrem0 : :: std :: os :: raw :: c_char , pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_YS3OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < YS3OutBlock > () , 98usize , concat ! ("Size of: " , stringify ! (YS3OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < YS3OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (YS3OutBlock))) ; fn test_field_hotime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YS3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . hotime) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (YS3OutBlock) , "::" , stringify ! (hotime))) ; } test_field_hotime () ; fn test_field__hotime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YS3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _hotime) as usize - ptr as usize } , 6usize , concat ! ("Offset of field: " , stringify ! (YS3OutBlock) , "::" , stringify ! (_hotime))) ; } test_field__hotime () ; fn test_field_yeprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YS3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . yeprice) as usize - ptr as usize } , 7usize , concat ! ("Offset of field: " , stringify ! (YS3OutBlock) , "::" , stringify ! (yeprice))) ; } test_field_yeprice () ; fn test_field__yeprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YS3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _yeprice) as usize - ptr as usize } , 15usize , concat ! ("Offset of field: " , stringify ! (YS3OutBlock) , "::" , stringify ! (_yeprice))) ; } test_field__yeprice () ; fn test_field_yevolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YS3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . yevolume) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (YS3OutBlock) , "::" , stringify ! (yevolume))) ; } test_field_yevolume () ; fn test_field__yevolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YS3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _yevolume) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (YS3OutBlock) , "::" , stringify ! (_yevolume))) ; } test_field__yevolume () ; fn test_field_jnilysign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YS3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jnilysign) as usize - ptr as usize } , 29usize , concat ! ("Offset of field: " , stringify ! (YS3OutBlock) , "::" , stringify ! (jnilysign))) ; } test_field_jnilysign () ; fn test_field__jnilysign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YS3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jnilysign) as usize - ptr as usize } , 30usize , concat ! ("Offset of field: " , stringify ! (YS3OutBlock) , "::" , stringify ! (_jnilysign))) ; } test_field__jnilysign () ; fn test_field_preychange () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YS3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . preychange) as usize - ptr as usize } , 31usize , concat ! ("Offset of field: " , stringify ! (YS3OutBlock) , "::" , stringify ! (preychange))) ; } test_field_preychange () ; fn test_field__preychange () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YS3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _preychange) as usize - ptr as usize } , 39usize , concat ! ("Offset of field: " , stringify ! (YS3OutBlock) , "::" , stringify ! (_preychange))) ; } test_field__preychange () ; fn test_field_jnilydrate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YS3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jnilydrate) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (YS3OutBlock) , "::" , stringify ! (jnilydrate))) ; } test_field_jnilydrate () ; fn test_field__jnilydrate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YS3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jnilydrate) as usize - ptr as usize } , 46usize , concat ! ("Offset of field: " , stringify ! (YS3OutBlock) , "::" , stringify ! (_jnilydrate))) ; } test_field__jnilydrate () ; fn test_field_yofferho0 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YS3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . yofferho0) as usize - ptr as usize } , 47usize , concat ! ("Offset of field: " , stringify ! (YS3OutBlock) , "::" , stringify ! (yofferho0))) ; } test_field_yofferho0 () ; fn test_field__yofferho0 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YS3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _yofferho0) as usize - ptr as usize } , 55usize , concat ! ("Offset of field: " , stringify ! (YS3OutBlock) , "::" , stringify ! (_yofferho0))) ; } test_field__yofferho0 () ; fn test_field_ybidho0 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YS3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ybidho0) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (YS3OutBlock) , "::" , stringify ! (ybidho0))) ; } test_field_ybidho0 () ; fn test_field__ybidho0 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YS3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ybidho0) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (YS3OutBlock) , "::" , stringify ! (_ybidho0))) ; } test_field__ybidho0 () ; fn test_field_yofferrem0 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YS3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . yofferrem0) as usize - ptr as usize } , 65usize , concat ! ("Offset of field: " , stringify ! (YS3OutBlock) , "::" , stringify ! (yofferrem0))) ; } test_field_yofferrem0 () ; fn test_field__yofferrem0 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YS3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _yofferrem0) as usize - ptr as usize } , 77usize , concat ! ("Offset of field: " , stringify ! (YS3OutBlock) , "::" , stringify ! (_yofferrem0))) ; } test_field__yofferrem0 () ; fn test_field_ybidrem0 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YS3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ybidrem0) as usize - ptr as usize } , 78usize , concat ! ("Offset of field: " , stringify ! (YS3OutBlock) , "::" , stringify ! (ybidrem0))) ; } test_field_ybidrem0 () ; fn test_field__ybidrem0 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YS3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ybidrem0) as usize - ptr as usize } , 90usize , concat ! ("Offset of field: " , stringify ! (YS3OutBlock) , "::" , stringify ! (_ybidrem0))) ; } test_field__ybidrem0 () ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YS3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 91usize , concat ! ("Offset of field: " , stringify ! (YS3OutBlock) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YS3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 97usize , concat ! ("Offset of field: " , stringify ! (YS3OutBlock) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct K3_OutBlock { pub chetime : [:: std :: os :: raw :: c_char ; 6usize] , pub _chetime : :: std :: os :: raw :: c_char , pub sign : [:: std :: os :: raw :: c_char ; 1usize] , pub _sign : :: std :: os :: raw :: c_char , pub change : [:: std :: os :: raw :: c_char ; 8usize] , pub _change : :: std :: os :: raw :: c_char , pub drate : [:: std :: os :: raw :: c_char ; 6usize] , pub _drate : :: std :: os :: raw :: c_char , pub price : [:: std :: os :: raw :: c_char ; 8usize] , pub _price : :: std :: os :: raw :: c_char , pub opentime : [:: std :: os :: raw :: c_char ; 6usize] , pub _opentime : :: std :: os :: raw :: c_char , pub open : [:: std :: os :: raw :: c_char ; 8usize] , pub _open : :: std :: os :: raw :: c_char , pub hightime : [:: std :: os :: raw :: c_char ; 6usize] , pub _hightime : :: std :: os :: raw :: c_char , pub high : [:: std :: os :: raw :: c_char ; 8usize] , pub _high : :: std :: os :: raw :: c_char , pub lowtime : [:: std :: os :: raw :: c_char ; 6usize] , pub _lowtime : :: std :: os :: raw :: c_char , pub low : [:: std :: os :: raw :: c_char ; 8usize] , pub _low : :: std :: os :: raw :: c_char , pub cgubun : [:: std :: os :: raw :: c_char ; 1usize] , pub _cgubun : :: std :: os :: raw :: c_char , pub cvolume : [:: std :: os :: raw :: c_char ; 8usize] , pub _cvolume : :: std :: os :: raw :: c_char , pub volume : [:: std :: os :: raw :: c_char ; 12usize] , pub _volume : :: std :: os :: raw :: c_char , pub value : [:: std :: os :: raw :: c_char ; 12usize] , pub _value : :: std :: os :: raw :: c_char , pub mdvolume : [:: std :: os :: raw :: c_char ; 12usize] , pub _mdvolume : :: std :: os :: raw :: c_char , pub mdchecnt : [:: std :: os :: raw :: c_char ; 8usize] , pub _mdchecnt : :: std :: os :: raw :: c_char , pub msvolume : [:: std :: os :: raw :: c_char ; 12usize] , pub _msvolume : :: std :: os :: raw :: c_char , pub mschecnt : [:: std :: os :: raw :: c_char ; 8usize] , pub _mschecnt : :: std :: os :: raw :: c_char , pub cpower : [:: std :: os :: raw :: c_char ; 9usize] , pub _cpower : :: std :: os :: raw :: c_char , pub wAvrg : [:: std :: os :: raw :: c_char ; 8usize] , pub _w_avrg : :: std :: os :: raw :: c_char , pub offerho : [:: std :: os :: raw :: c_char ; 8usize] , pub _offerho : :: std :: os :: raw :: c_char , pub bidho : [:: std :: os :: raw :: c_char ; 8usize] , pub _bidho : :: std :: os :: raw :: c_char , pub status : [:: std :: os :: raw :: c_char ; 2usize] , pub _status : :: std :: os :: raw :: c_char , pub jnilvolume : [:: std :: os :: raw :: c_char ; 12usize] , pub _jnilvolume : :: std :: os :: raw :: c_char , pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_K3_OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < K3_OutBlock > () , 223usize , concat ! ("Size of: " , stringify ! (K3_OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < K3_OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (K3_OutBlock))) ; fn test_field_chetime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . chetime) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (chetime))) ; } test_field_chetime () ; fn test_field__chetime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _chetime) as usize - ptr as usize } , 6usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (_chetime))) ; } test_field__chetime () ; fn test_field_sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sign) as usize - ptr as usize } , 7usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (sign))) ; } test_field_sign () ; fn test_field__sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sign) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (_sign))) ; } test_field__sign () ; fn test_field_change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . change) as usize - ptr as usize } , 9usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (change))) ; } test_field_change () ; fn test_field__change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _change) as usize - ptr as usize } , 17usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (_change))) ; } test_field__change () ; fn test_field_drate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . drate) as usize - ptr as usize } , 18usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (drate))) ; } test_field_drate () ; fn test_field__drate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _drate) as usize - ptr as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (_drate))) ; } test_field__drate () ; fn test_field_price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . price) as usize - ptr as usize } , 25usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (price))) ; } test_field_price () ; fn test_field__price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _price) as usize - ptr as usize } , 33usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (_price))) ; } test_field__price () ; fn test_field_opentime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . opentime) as usize - ptr as usize } , 34usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (opentime))) ; } test_field_opentime () ; fn test_field__opentime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _opentime) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (_opentime))) ; } test_field__opentime () ; fn test_field_open () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . open) as usize - ptr as usize } , 41usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (open))) ; } test_field_open () ; fn test_field__open () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _open) as usize - ptr as usize } , 49usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (_open))) ; } test_field__open () ; fn test_field_hightime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . hightime) as usize - ptr as usize } , 50usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (hightime))) ; } test_field_hightime () ; fn test_field__hightime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _hightime) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (_hightime))) ; } test_field__hightime () ; fn test_field_high () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . high) as usize - ptr as usize } , 57usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (high))) ; } test_field_high () ; fn test_field__high () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _high) as usize - ptr as usize } , 65usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (_high))) ; } test_field__high () ; fn test_field_lowtime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . lowtime) as usize - ptr as usize } , 66usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (lowtime))) ; } test_field_lowtime () ; fn test_field__lowtime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _lowtime) as usize - ptr as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (_lowtime))) ; } test_field__lowtime () ; fn test_field_low () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . low) as usize - ptr as usize } , 73usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (low))) ; } test_field_low () ; fn test_field__low () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _low) as usize - ptr as usize } , 81usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (_low))) ; } test_field__low () ; fn test_field_cgubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cgubun) as usize - ptr as usize } , 82usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (cgubun))) ; } test_field_cgubun () ; fn test_field__cgubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cgubun) as usize - ptr as usize } , 83usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (_cgubun))) ; } test_field__cgubun () ; fn test_field_cvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cvolume) as usize - ptr as usize } , 84usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (cvolume))) ; } test_field_cvolume () ; fn test_field__cvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cvolume) as usize - ptr as usize } , 92usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (_cvolume))) ; } test_field__cvolume () ; fn test_field_volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . volume) as usize - ptr as usize } , 93usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (volume))) ; } test_field_volume () ; fn test_field__volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _volume) as usize - ptr as usize } , 105usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (_volume))) ; } test_field__volume () ; fn test_field_value () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . value) as usize - ptr as usize } , 106usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (value))) ; } test_field_value () ; fn test_field__value () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _value) as usize - ptr as usize } , 118usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (_value))) ; } test_field__value () ; fn test_field_mdvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mdvolume) as usize - ptr as usize } , 119usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (mdvolume))) ; } test_field_mdvolume () ; fn test_field__mdvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _mdvolume) as usize - ptr as usize } , 131usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (_mdvolume))) ; } test_field__mdvolume () ; fn test_field_mdchecnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mdchecnt) as usize - ptr as usize } , 132usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (mdchecnt))) ; } test_field_mdchecnt () ; fn test_field__mdchecnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _mdchecnt) as usize - ptr as usize } , 140usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (_mdchecnt))) ; } test_field__mdchecnt () ; fn test_field_msvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . msvolume) as usize - ptr as usize } , 141usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (msvolume))) ; } test_field_msvolume () ; fn test_field__msvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _msvolume) as usize - ptr as usize } , 153usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (_msvolume))) ; } test_field__msvolume () ; fn test_field_mschecnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mschecnt) as usize - ptr as usize } , 154usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (mschecnt))) ; } test_field_mschecnt () ; fn test_field__mschecnt () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _mschecnt) as usize - ptr as usize } , 162usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (_mschecnt))) ; } test_field__mschecnt () ; fn test_field_cpower () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . cpower) as usize - ptr as usize } , 163usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (cpower))) ; } test_field_cpower () ; fn test_field__cpower () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _cpower) as usize - ptr as usize } , 172usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (_cpower))) ; } test_field__cpower () ; fn test_field_wAvrg () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . wAvrg) as usize - ptr as usize } , 173usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (wAvrg))) ; } test_field_wAvrg () ; fn test_field__w_avrg () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _w_avrg) as usize - ptr as usize } , 181usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (_w_avrg))) ; } test_field__w_avrg () ; fn test_field_offerho () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . offerho) as usize - ptr as usize } , 182usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (offerho))) ; } test_field_offerho () ; fn test_field__offerho () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _offerho) as usize - ptr as usize } , 190usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (_offerho))) ; } test_field__offerho () ; fn test_field_bidho () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . bidho) as usize - ptr as usize } , 191usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (bidho))) ; } test_field_bidho () ; fn test_field__bidho () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _bidho) as usize - ptr as usize } , 199usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (_bidho))) ; } test_field__bidho () ; fn test_field_status () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . status) as usize - ptr as usize } , 200usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (status))) ; } test_field_status () ; fn test_field__status () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _status) as usize - ptr as usize } , 202usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (_status))) ; } test_field__status () ; fn test_field_jnilvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jnilvolume) as usize - ptr as usize } , 203usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (jnilvolume))) ; } test_field_jnilvolume () ; fn test_field__jnilvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jnilvolume) as usize - ptr as usize } , 215usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (_jnilvolume))) ; } test_field__jnilvolume () ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 216usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < K3_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 222usize , concat ! ("Offset of field: " , stringify ! (K3_OutBlock) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct YK3OutBlock { pub hotime : [:: std :: os :: raw :: c_char ; 6usize] , pub _hotime : :: std :: os :: raw :: c_char , pub yeprice : [:: std :: os :: raw :: c_char ; 8usize] , pub _yeprice : :: std :: os :: raw :: c_char , pub yevolume : [:: std :: os :: raw :: c_char ; 12usize] , pub _yevolume : :: std :: os :: raw :: c_char , pub jnilysign : [:: std :: os :: raw :: c_char ; 1usize] , pub _jnilysign : :: std :: os :: raw :: c_char , pub preychange : [:: std :: os :: raw :: c_char ; 8usize] , pub _preychange : :: std :: os :: raw :: c_char , pub jnilydrate : [:: std :: os :: raw :: c_char ; 6usize] , pub _jnilydrate : :: std :: os :: raw :: c_char , pub yofferho0 : [:: std :: os :: raw :: c_char ; 8usize] , pub _yofferho0 : :: std :: os :: raw :: c_char , pub ybidho0 : [:: std :: os :: raw :: c_char ; 8usize] , pub _ybidho0 : :: std :: os :: raw :: c_char , pub yofferrem0 : [:: std :: os :: raw :: c_char ; 12usize] , pub _yofferrem0 : :: std :: os :: raw :: c_char , pub ybidrem0 : [:: std :: os :: raw :: c_char ; 12usize] , pub _ybidrem0 : :: std :: os :: raw :: c_char , pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_YK3OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < YK3OutBlock > () , 98usize , concat ! ("Size of: " , stringify ! (YK3OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < YK3OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (YK3OutBlock))) ; fn test_field_hotime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YK3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . hotime) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (YK3OutBlock) , "::" , stringify ! (hotime))) ; } test_field_hotime () ; fn test_field__hotime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YK3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _hotime) as usize - ptr as usize } , 6usize , concat ! ("Offset of field: " , stringify ! (YK3OutBlock) , "::" , stringify ! (_hotime))) ; } test_field__hotime () ; fn test_field_yeprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YK3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . yeprice) as usize - ptr as usize } , 7usize , concat ! ("Offset of field: " , stringify ! (YK3OutBlock) , "::" , stringify ! (yeprice))) ; } test_field_yeprice () ; fn test_field__yeprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YK3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _yeprice) as usize - ptr as usize } , 15usize , concat ! ("Offset of field: " , stringify ! (YK3OutBlock) , "::" , stringify ! (_yeprice))) ; } test_field__yeprice () ; fn test_field_yevolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YK3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . yevolume) as usize - ptr as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (YK3OutBlock) , "::" , stringify ! (yevolume))) ; } test_field_yevolume () ; fn test_field__yevolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YK3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _yevolume) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (YK3OutBlock) , "::" , stringify ! (_yevolume))) ; } test_field__yevolume () ; fn test_field_jnilysign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YK3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jnilysign) as usize - ptr as usize } , 29usize , concat ! ("Offset of field: " , stringify ! (YK3OutBlock) , "::" , stringify ! (jnilysign))) ; } test_field_jnilysign () ; fn test_field__jnilysign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YK3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jnilysign) as usize - ptr as usize } , 30usize , concat ! ("Offset of field: " , stringify ! (YK3OutBlock) , "::" , stringify ! (_jnilysign))) ; } test_field__jnilysign () ; fn test_field_preychange () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YK3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . preychange) as usize - ptr as usize } , 31usize , concat ! ("Offset of field: " , stringify ! (YK3OutBlock) , "::" , stringify ! (preychange))) ; } test_field_preychange () ; fn test_field__preychange () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YK3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _preychange) as usize - ptr as usize } , 39usize , concat ! ("Offset of field: " , stringify ! (YK3OutBlock) , "::" , stringify ! (_preychange))) ; } test_field__preychange () ; fn test_field_jnilydrate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YK3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jnilydrate) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (YK3OutBlock) , "::" , stringify ! (jnilydrate))) ; } test_field_jnilydrate () ; fn test_field__jnilydrate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YK3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jnilydrate) as usize - ptr as usize } , 46usize , concat ! ("Offset of field: " , stringify ! (YK3OutBlock) , "::" , stringify ! (_jnilydrate))) ; } test_field__jnilydrate () ; fn test_field_yofferho0 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YK3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . yofferho0) as usize - ptr as usize } , 47usize , concat ! ("Offset of field: " , stringify ! (YK3OutBlock) , "::" , stringify ! (yofferho0))) ; } test_field_yofferho0 () ; fn test_field__yofferho0 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YK3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _yofferho0) as usize - ptr as usize } , 55usize , concat ! ("Offset of field: " , stringify ! (YK3OutBlock) , "::" , stringify ! (_yofferho0))) ; } test_field__yofferho0 () ; fn test_field_ybidho0 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YK3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ybidho0) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (YK3OutBlock) , "::" , stringify ! (ybidho0))) ; } test_field_ybidho0 () ; fn test_field__ybidho0 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YK3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ybidho0) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (YK3OutBlock) , "::" , stringify ! (_ybidho0))) ; } test_field__ybidho0 () ; fn test_field_yofferrem0 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YK3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . yofferrem0) as usize - ptr as usize } , 65usize , concat ! ("Offset of field: " , stringify ! (YK3OutBlock) , "::" , stringify ! (yofferrem0))) ; } test_field_yofferrem0 () ; fn test_field__yofferrem0 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YK3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _yofferrem0) as usize - ptr as usize } , 77usize , concat ! ("Offset of field: " , stringify ! (YK3OutBlock) , "::" , stringify ! (_yofferrem0))) ; } test_field__yofferrem0 () ; fn test_field_ybidrem0 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YK3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ybidrem0) as usize - ptr as usize } , 78usize , concat ! ("Offset of field: " , stringify ! (YK3OutBlock) , "::" , stringify ! (ybidrem0))) ; } test_field_ybidrem0 () ; fn test_field__ybidrem0 () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YK3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ybidrem0) as usize - ptr as usize } , 90usize , concat ! ("Offset of field: " , stringify ! (YK3OutBlock) , "::" , stringify ! (_ybidrem0))) ; } test_field__ybidrem0 () ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YK3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 91usize , concat ! ("Offset of field: " , stringify ! (YK3OutBlock) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < YK3OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 97usize , concat ! ("Offset of field: " , stringify ! (YK3OutBlock) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct I5_OutBlock { pub time : [:: std :: os :: raw :: c_char ; 8usize] , pub _time : :: std :: os :: raw :: c_char , pub price : [:: std :: os :: raw :: c_char ; 8usize] , pub _price : :: std :: os :: raw :: c_char , pub sign : [:: std :: os :: raw :: c_char ; 1usize] , pub _sign : :: std :: os :: raw :: c_char , pub change : [:: std :: os :: raw :: c_char ; 8usize] , pub _change : :: std :: os :: raw :: c_char , pub volume : [:: std :: os :: raw :: c_char ; 12usize] , pub _volume : :: std :: os :: raw :: c_char , pub navdiff : [:: std :: os :: raw :: c_char ; 9usize] , pub _navdiff : :: std :: os :: raw :: c_char , pub nav : [:: std :: os :: raw :: c_char ; 9usize] , pub _nav : :: std :: os :: raw :: c_char , pub navchange : [:: std :: os :: raw :: c_char ; 9usize] , pub _navchange : :: std :: os :: raw :: c_char , pub crate_ : [:: std :: os :: raw :: c_char ; 9usize] , pub _crate : :: std :: os :: raw :: c_char , pub grate : [:: std :: os :: raw :: c_char ; 9usize] , pub _grate : :: std :: os :: raw :: c_char , pub jisu : [:: std :: os :: raw :: c_char ; 8usize] , pub _jisu : :: std :: os :: raw :: c_char , pub jichange : [:: std :: os :: raw :: c_char ; 8usize] , pub _jichange : :: std :: os :: raw :: c_char , pub jirate : [:: std :: os :: raw :: c_char ; 8usize] , pub _jirate : :: std :: os :: raw :: c_char , pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_I5_OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < I5_OutBlock > () , 126usize , concat ! ("Size of: " , stringify ! (I5_OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < I5_OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (I5_OutBlock))) ; fn test_field_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < I5_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . time) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (I5_OutBlock) , "::" , stringify ! (time))) ; } test_field_time () ; fn test_field__time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < I5_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _time) as usize - ptr as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (I5_OutBlock) , "::" , stringify ! (_time))) ; } test_field__time () ; fn test_field_price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < I5_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . price) as usize - ptr as usize } , 9usize , concat ! ("Offset of field: " , stringify ! (I5_OutBlock) , "::" , stringify ! (price))) ; } test_field_price () ; fn test_field__price () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < I5_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _price) as usize - ptr as usize } , 17usize , concat ! ("Offset of field: " , stringify ! (I5_OutBlock) , "::" , stringify ! (_price))) ; } test_field__price () ; fn test_field_sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < I5_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . sign) as usize - ptr as usize } , 18usize , concat ! ("Offset of field: " , stringify ! (I5_OutBlock) , "::" , stringify ! (sign))) ; } test_field_sign () ; fn test_field__sign () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < I5_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _sign) as usize - ptr as usize } , 19usize , concat ! ("Offset of field: " , stringify ! (I5_OutBlock) , "::" , stringify ! (_sign))) ; } test_field__sign () ; fn test_field_change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < I5_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . change) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (I5_OutBlock) , "::" , stringify ! (change))) ; } test_field_change () ; fn test_field__change () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < I5_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _change) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (I5_OutBlock) , "::" , stringify ! (_change))) ; } test_field__change () ; fn test_field_volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < I5_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . volume) as usize - ptr as usize } , 29usize , concat ! ("Offset of field: " , stringify ! (I5_OutBlock) , "::" , stringify ! (volume))) ; } test_field_volume () ; fn test_field__volume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < I5_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _volume) as usize - ptr as usize } , 41usize , concat ! ("Offset of field: " , stringify ! (I5_OutBlock) , "::" , stringify ! (_volume))) ; } test_field__volume () ; fn test_field_navdiff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < I5_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . navdiff) as usize - ptr as usize } , 42usize , concat ! ("Offset of field: " , stringify ! (I5_OutBlock) , "::" , stringify ! (navdiff))) ; } test_field_navdiff () ; fn test_field__navdiff () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < I5_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _navdiff) as usize - ptr as usize } , 51usize , concat ! ("Offset of field: " , stringify ! (I5_OutBlock) , "::" , stringify ! (_navdiff))) ; } test_field__navdiff () ; fn test_field_nav () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < I5_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . nav) as usize - ptr as usize } , 52usize , concat ! ("Offset of field: " , stringify ! (I5_OutBlock) , "::" , stringify ! (nav))) ; } test_field_nav () ; fn test_field__nav () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < I5_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _nav) as usize - ptr as usize } , 61usize , concat ! ("Offset of field: " , stringify ! (I5_OutBlock) , "::" , stringify ! (_nav))) ; } test_field__nav () ; fn test_field_navchange () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < I5_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . navchange) as usize - ptr as usize } , 62usize , concat ! ("Offset of field: " , stringify ! (I5_OutBlock) , "::" , stringify ! (navchange))) ; } test_field_navchange () ; fn test_field__navchange () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < I5_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _navchange) as usize - ptr as usize } , 71usize , concat ! ("Offset of field: " , stringify ! (I5_OutBlock) , "::" , stringify ! (_navchange))) ; } test_field__navchange () ; fn test_field_crate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < I5_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . crate_) as usize - ptr as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (I5_OutBlock) , "::" , stringify ! (crate_))) ; } test_field_crate () ; fn test_field__crate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < I5_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _crate) as usize - ptr as usize } , 81usize , concat ! ("Offset of field: " , stringify ! (I5_OutBlock) , "::" , stringify ! (_crate))) ; } test_field__crate () ; fn test_field_grate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < I5_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . grate) as usize - ptr as usize } , 82usize , concat ! ("Offset of field: " , stringify ! (I5_OutBlock) , "::" , stringify ! (grate))) ; } test_field_grate () ; fn test_field__grate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < I5_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _grate) as usize - ptr as usize } , 91usize , concat ! ("Offset of field: " , stringify ! (I5_OutBlock) , "::" , stringify ! (_grate))) ; } test_field__grate () ; fn test_field_jisu () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < I5_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jisu) as usize - ptr as usize } , 92usize , concat ! ("Offset of field: " , stringify ! (I5_OutBlock) , "::" , stringify ! (jisu))) ; } test_field_jisu () ; fn test_field__jisu () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < I5_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jisu) as usize - ptr as usize } , 100usize , concat ! ("Offset of field: " , stringify ! (I5_OutBlock) , "::" , stringify ! (_jisu))) ; } test_field__jisu () ; fn test_field_jichange () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < I5_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jichange) as usize - ptr as usize } , 101usize , concat ! ("Offset of field: " , stringify ! (I5_OutBlock) , "::" , stringify ! (jichange))) ; } test_field_jichange () ; fn test_field__jichange () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < I5_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jichange) as usize - ptr as usize } , 109usize , concat ! ("Offset of field: " , stringify ! (I5_OutBlock) , "::" , stringify ! (_jichange))) ; } test_field__jichange () ; fn test_field_jirate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < I5_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jirate) as usize - ptr as usize } , 110usize , concat ! ("Offset of field: " , stringify ! (I5_OutBlock) , "::" , stringify ! (jirate))) ; } test_field_jirate () ; fn test_field__jirate () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < I5_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _jirate) as usize - ptr as usize } , 118usize , concat ! ("Offset of field: " , stringify ! (I5_OutBlock) , "::" , stringify ! (_jirate))) ; } test_field__jirate () ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < I5_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 119usize , concat ! ("Offset of field: " , stringify ! (I5_OutBlock) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < I5_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 125usize , concat ! ("Offset of field: " , stringify ! (I5_OutBlock) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct VI_OutBlock { pub vi_gubun : [:: std :: os :: raw :: c_char ; 1usize] , pub _vi_gubun : :: std :: os :: raw :: c_char , pub svi_recprice : [:: std :: os :: raw :: c_char ; 8usize] , pub _svi_recprice : :: std :: os :: raw :: c_char , pub dvi_recprice : [:: std :: os :: raw :: c_char ; 8usize] , pub _dvi_recprice : :: std :: os :: raw :: c_char , pub vi_trgprice : [:: std :: os :: raw :: c_char ; 8usize] , pub _vi_trgprice : :: std :: os :: raw :: c_char , pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , pub ref_shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _ref_shcode : :: std :: os :: raw :: c_char , pub time : [:: std :: os :: raw :: c_char ; 6usize] , pub _time : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_VI_OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < VI_OutBlock > () , 50usize , concat ! ("Size of: " , stringify ! (VI_OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < VI_OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (VI_OutBlock))) ; fn test_field_vi_gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < VI_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . vi_gubun) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (VI_OutBlock) , "::" , stringify ! (vi_gubun))) ; } test_field_vi_gubun () ; fn test_field__vi_gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < VI_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _vi_gubun) as usize - ptr as usize } , 1usize , concat ! ("Offset of field: " , stringify ! (VI_OutBlock) , "::" , stringify ! (_vi_gubun))) ; } test_field__vi_gubun () ; fn test_field_svi_recprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < VI_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . svi_recprice) as usize - ptr as usize } , 2usize , concat ! ("Offset of field: " , stringify ! (VI_OutBlock) , "::" , stringify ! (svi_recprice))) ; } test_field_svi_recprice () ; fn test_field__svi_recprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < VI_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _svi_recprice) as usize - ptr as usize } , 10usize , concat ! ("Offset of field: " , stringify ! (VI_OutBlock) , "::" , stringify ! (_svi_recprice))) ; } test_field__svi_recprice () ; fn test_field_dvi_recprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < VI_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dvi_recprice) as usize - ptr as usize } , 11usize , concat ! ("Offset of field: " , stringify ! (VI_OutBlock) , "::" , stringify ! (dvi_recprice))) ; } test_field_dvi_recprice () ; fn test_field__dvi_recprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < VI_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dvi_recprice) as usize - ptr as usize } , 19usize , concat ! ("Offset of field: " , stringify ! (VI_OutBlock) , "::" , stringify ! (_dvi_recprice))) ; } test_field__dvi_recprice () ; fn test_field_vi_trgprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < VI_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . vi_trgprice) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (VI_OutBlock) , "::" , stringify ! (vi_trgprice))) ; } test_field_vi_trgprice () ; fn test_field__vi_trgprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < VI_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _vi_trgprice) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (VI_OutBlock) , "::" , stringify ! (_vi_trgprice))) ; } test_field__vi_trgprice () ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < VI_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 29usize , concat ! ("Offset of field: " , stringify ! (VI_OutBlock) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < VI_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 35usize , concat ! ("Offset of field: " , stringify ! (VI_OutBlock) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; fn test_field_ref_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < VI_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ref_shcode) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (VI_OutBlock) , "::" , stringify ! (ref_shcode))) ; } test_field_ref_shcode () ; fn test_field__ref_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < VI_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ref_shcode) as usize - ptr as usize } , 42usize , concat ! ("Offset of field: " , stringify ! (VI_OutBlock) , "::" , stringify ! (_ref_shcode))) ; } test_field__ref_shcode () ; fn test_field_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < VI_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . time) as usize - ptr as usize } , 43usize , concat ! ("Offset of field: " , stringify ! (VI_OutBlock) , "::" , stringify ! (time))) ; } test_field_time () ; fn test_field__time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < VI_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _time) as usize - ptr as usize } , 49usize , concat ! ("Offset of field: " , stringify ! (VI_OutBlock) , "::" , stringify ! (_time))) ; } test_field__time () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct DVIOutBlock { pub vi_gubun : [:: std :: os :: raw :: c_char ; 1usize] , pub _vi_gubun : :: std :: os :: raw :: c_char , pub svi_recprice : [:: std :: os :: raw :: c_char ; 8usize] , pub _svi_recprice : :: std :: os :: raw :: c_char , pub dvi_recprice : [:: std :: os :: raw :: c_char ; 8usize] , pub _dvi_recprice : :: std :: os :: raw :: c_char , pub vi_trgprice : [:: std :: os :: raw :: c_char ; 8usize] , pub _vi_trgprice : :: std :: os :: raw :: c_char , pub shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _shcode : :: std :: os :: raw :: c_char , pub ref_shcode : [:: std :: os :: raw :: c_char ; 6usize] , pub _ref_shcode : :: std :: os :: raw :: c_char , pub time : [:: std :: os :: raw :: c_char ; 6usize] , pub _time : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_DVIOutBlock () { assert_eq ! (:: std :: mem :: size_of :: < DVIOutBlock > () , 50usize , concat ! ("Size of: " , stringify ! (DVIOutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < DVIOutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (DVIOutBlock))) ; fn test_field_vi_gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < DVIOutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . vi_gubun) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (DVIOutBlock) , "::" , stringify ! (vi_gubun))) ; } test_field_vi_gubun () ; fn test_field__vi_gubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < DVIOutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _vi_gubun) as usize - ptr as usize } , 1usize , concat ! ("Offset of field: " , stringify ! (DVIOutBlock) , "::" , stringify ! (_vi_gubun))) ; } test_field__vi_gubun () ; fn test_field_svi_recprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < DVIOutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . svi_recprice) as usize - ptr as usize } , 2usize , concat ! ("Offset of field: " , stringify ! (DVIOutBlock) , "::" , stringify ! (svi_recprice))) ; } test_field_svi_recprice () ; fn test_field__svi_recprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < DVIOutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _svi_recprice) as usize - ptr as usize } , 10usize , concat ! ("Offset of field: " , stringify ! (DVIOutBlock) , "::" , stringify ! (_svi_recprice))) ; } test_field__svi_recprice () ; fn test_field_dvi_recprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < DVIOutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . dvi_recprice) as usize - ptr as usize } , 11usize , concat ! ("Offset of field: " , stringify ! (DVIOutBlock) , "::" , stringify ! (dvi_recprice))) ; } test_field_dvi_recprice () ; fn test_field__dvi_recprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < DVIOutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _dvi_recprice) as usize - ptr as usize } , 19usize , concat ! ("Offset of field: " , stringify ! (DVIOutBlock) , "::" , stringify ! (_dvi_recprice))) ; } test_field__dvi_recprice () ; fn test_field_vi_trgprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < DVIOutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . vi_trgprice) as usize - ptr as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (DVIOutBlock) , "::" , stringify ! (vi_trgprice))) ; } test_field_vi_trgprice () ; fn test_field__vi_trgprice () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < DVIOutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _vi_trgprice) as usize - ptr as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (DVIOutBlock) , "::" , stringify ! (_vi_trgprice))) ; } test_field__vi_trgprice () ; fn test_field_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < DVIOutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . shcode) as usize - ptr as usize } , 29usize , concat ! ("Offset of field: " , stringify ! (DVIOutBlock) , "::" , stringify ! (shcode))) ; } test_field_shcode () ; fn test_field__shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < DVIOutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _shcode) as usize - ptr as usize } , 35usize , concat ! ("Offset of field: " , stringify ! (DVIOutBlock) , "::" , stringify ! (_shcode))) ; } test_field__shcode () ; fn test_field_ref_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < DVIOutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . ref_shcode) as usize - ptr as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (DVIOutBlock) , "::" , stringify ! (ref_shcode))) ; } test_field_ref_shcode () ; fn test_field__ref_shcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < DVIOutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _ref_shcode) as usize - ptr as usize } , 42usize , concat ! ("Offset of field: " , stringify ! (DVIOutBlock) , "::" , stringify ! (_ref_shcode))) ; } test_field__ref_shcode () ; fn test_field_time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < DVIOutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . time) as usize - ptr as usize } , 43usize , concat ! ("Offset of field: " , stringify ! (DVIOutBlock) , "::" , stringify ! (time))) ; } test_field_time () ; fn test_field__time () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < DVIOutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _time) as usize - ptr as usize } , 49usize , concat ! ("Offset of field: " , stringify ! (DVIOutBlock) , "::" , stringify ! (_time))) ; } test_field__time () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct JIFInBlock { pub jangubun : [:: std :: os :: raw :: c_char ; 1usize] , } # [test] fn bindgen_test_layout_JIFInBlock () { assert_eq ! (:: std :: mem :: size_of :: < JIFInBlock > () , 1usize , concat ! ("Size of: " , stringify ! (JIFInBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < JIFInBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (JIFInBlock))) ; fn test_field_jangubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < JIFInBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jangubun) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (JIFInBlock) , "::" , stringify ! (jangubun))) ; } test_field_jangubun () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct JIFOutBlock { pub jangubun : [:: std :: os :: raw :: c_char ; 1usize] , pub jstatus : [:: std :: os :: raw :: c_char ; 2usize] , } # [test] fn bindgen_test_layout_JIFOutBlock () { assert_eq ! (:: std :: mem :: size_of :: < JIFOutBlock > () , 3usize , concat ! ("Size of: " , stringify ! (JIFOutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < JIFOutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (JIFOutBlock))) ; fn test_field_jangubun () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < JIFOutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jangubun) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (JIFOutBlock) , "::" , stringify ! (jangubun))) ; } test_field_jangubun () ; fn test_field_jstatus () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < JIFOutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . jstatus) as usize - ptr as usize } , 1usize , concat ! ("Offset of field: " , stringify ! (JIFOutBlock) , "::" , stringify ! (jstatus))) ; } test_field_jstatus () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct BM_InBlock { pub upCode : [:: std :: os :: raw :: c_char ; 3usize] , pub _upcode : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_BM_InBlock () { assert_eq ! (:: std :: mem :: size_of :: < BM_InBlock > () , 4usize , concat ! ("Size of: " , stringify ! (BM_InBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < BM_InBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (BM_InBlock))) ; fn test_field_upCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < BM_InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . upCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (BM_InBlock) , "::" , stringify ! (upCode))) ; } test_field_upCode () ; fn test_field__upcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < BM_InBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _upcode) as usize - ptr as usize } , 3usize , concat ! ("Offset of field: " , stringify ! (BM_InBlock) , "::" , stringify ! (_upcode))) ; } test_field__upcode () ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct BM_OutBlock { pub tjjCode : [:: std :: os :: raw :: c_char ; 4usize] , pub _tjjcode : :: std :: os :: raw :: c_char , pub tjjTime : [:: std :: os :: raw :: c_char ; 8usize] , pub _tjjtime : :: std :: os :: raw :: c_char , pub msVolume : [:: std :: os :: raw :: c_char ; 8usize] , pub _msvolume : :: std :: os :: raw :: c_char , pub mdVolume : [:: std :: os :: raw :: c_char ; 8usize] , pub _mdvolume : :: std :: os :: raw :: c_char , pub msVol : [:: std :: os :: raw :: c_char ; 8usize] , pub _msvol : :: std :: os :: raw :: c_char , pub pMsVol : [:: std :: os :: raw :: c_char ; 8usize] , pub _p_msvol : :: std :: os :: raw :: c_char , pub msValue : [:: std :: os :: raw :: c_char ; 6usize] , pub _msvalue : :: std :: os :: raw :: c_char , pub mdValue : [:: std :: os :: raw :: c_char ; 6usize] , pub _mdvalue : :: std :: os :: raw :: c_char , pub msVal : [:: std :: os :: raw :: c_char ; 6usize] , pub _msval : :: std :: os :: raw :: c_char , pub pMsVal : [:: std :: os :: raw :: c_char ; 6usize] , pub _p_msval : :: std :: os :: raw :: c_char , pub upCode : [:: std :: os :: raw :: c_char ; 3usize] , pub _upcode : :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_BM_OutBlock () { assert_eq ! (:: std :: mem :: size_of :: < BM_OutBlock > () , 82usize , concat ! ("Size of: " , stringify ! (BM_OutBlock))) ; assert_eq ! (:: std :: mem :: align_of :: < BM_OutBlock > () , 1usize , concat ! ("Alignment of " , stringify ! (BM_OutBlock))) ; fn test_field_tjjCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < BM_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tjjCode) as usize - ptr as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (BM_OutBlock) , "::" , stringify ! (tjjCode))) ; } test_field_tjjCode () ; fn test_field__tjjcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < BM_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _tjjcode) as usize - ptr as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (BM_OutBlock) , "::" , stringify ! (_tjjcode))) ; } test_field__tjjcode () ; fn test_field_tjjTime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < BM_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . tjjTime) as usize - ptr as usize } , 5usize , concat ! ("Offset of field: " , stringify ! (BM_OutBlock) , "::" , stringify ! (tjjTime))) ; } test_field_tjjTime () ; fn test_field__tjjtime () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < BM_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _tjjtime) as usize - ptr as usize } , 13usize , concat ! ("Offset of field: " , stringify ! (BM_OutBlock) , "::" , stringify ! (_tjjtime))) ; } test_field__tjjtime () ; fn test_field_msVolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < BM_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . msVolume) as usize - ptr as usize } , 14usize , concat ! ("Offset of field: " , stringify ! (BM_OutBlock) , "::" , stringify ! (msVolume))) ; } test_field_msVolume () ; fn test_field__msvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < BM_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _msvolume) as usize - ptr as usize } , 22usize , concat ! ("Offset of field: " , stringify ! (BM_OutBlock) , "::" , stringify ! (_msvolume))) ; } test_field__msvolume () ; fn test_field_mdVolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < BM_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mdVolume) as usize - ptr as usize } , 23usize , concat ! ("Offset of field: " , stringify ! (BM_OutBlock) , "::" , stringify ! (mdVolume))) ; } test_field_mdVolume () ; fn test_field__mdvolume () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < BM_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _mdvolume) as usize - ptr as usize } , 31usize , concat ! ("Offset of field: " , stringify ! (BM_OutBlock) , "::" , stringify ! (_mdvolume))) ; } test_field__mdvolume () ; fn test_field_msVol () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < BM_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . msVol) as usize - ptr as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (BM_OutBlock) , "::" , stringify ! (msVol))) ; } test_field_msVol () ; fn test_field__msvol () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < BM_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _msvol) as usize - ptr as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (BM_OutBlock) , "::" , stringify ! (_msvol))) ; } test_field__msvol () ; fn test_field_pMsVol () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < BM_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . pMsVol) as usize - ptr as usize } , 41usize , concat ! ("Offset of field: " , stringify ! (BM_OutBlock) , "::" , stringify ! (pMsVol))) ; } test_field_pMsVol () ; fn test_field__p_msvol () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < BM_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _p_msvol) as usize - ptr as usize } , 49usize , concat ! ("Offset of field: " , stringify ! (BM_OutBlock) , "::" , stringify ! (_p_msvol))) ; } test_field__p_msvol () ; fn test_field_msValue () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < BM_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . msValue) as usize - ptr as usize } , 50usize , concat ! ("Offset of field: " , stringify ! (BM_OutBlock) , "::" , stringify ! (msValue))) ; } test_field_msValue () ; fn test_field__msvalue () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < BM_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _msvalue) as usize - ptr as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (BM_OutBlock) , "::" , stringify ! (_msvalue))) ; } test_field__msvalue () ; fn test_field_mdValue () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < BM_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . mdValue) as usize - ptr as usize } , 57usize , concat ! ("Offset of field: " , stringify ! (BM_OutBlock) , "::" , stringify ! (mdValue))) ; } test_field_mdValue () ; fn test_field__mdvalue () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < BM_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _mdvalue) as usize - ptr as usize } , 63usize , concat ! ("Offset of field: " , stringify ! (BM_OutBlock) , "::" , stringify ! (_mdvalue))) ; } test_field__mdvalue () ; fn test_field_msVal () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < BM_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . msVal) as usize - ptr as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (BM_OutBlock) , "::" , stringify ! (msVal))) ; } test_field_msVal () ; fn test_field__msval () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < BM_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _msval) as usize - ptr as usize } , 70usize , concat ! ("Offset of field: " , stringify ! (BM_OutBlock) , "::" , stringify ! (_msval))) ; } test_field__msval () ; fn test_field_pMsVal () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < BM_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . pMsVal) as usize - ptr as usize } , 71usize , concat ! ("Offset of field: " , stringify ! (BM_OutBlock) , "::" , stringify ! (pMsVal))) ; } test_field_pMsVal () ; fn test_field__p_msval () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < BM_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _p_msval) as usize - ptr as usize } , 77usize , concat ! ("Offset of field: " , stringify ! (BM_OutBlock) , "::" , stringify ! (_p_msval))) ; } test_field__p_msval () ; fn test_field_upCode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < BM_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . upCode) as usize - ptr as usize } , 78usize , concat ! ("Offset of field: " , stringify ! (BM_OutBlock) , "::" , stringify ! (upCode))) ; } test_field_upCode () ; fn test_field__upcode () { assert_eq ! (unsafe { let uninit = :: std :: mem :: MaybeUninit :: < BM_OutBlock > :: uninit () ; let ptr = uninit . as_ptr () ; :: std :: ptr :: addr_of ! ((* ptr) . _upcode) as usize - ptr as usize } , 81usize , concat ! ("Offset of field: " , stringify ! (BM_OutBlock) , "::" , stringify ! (_upcode))) ; } test_field__upcode () ; }